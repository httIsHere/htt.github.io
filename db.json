{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/Android-6.png","path":"images/Android-6.png","modified":1,"renderable":0},{"_id":"source/images/HAXM-error.png","path":"images/HAXM-error.png","modified":1,"renderable":0},{"_id":"source/images/SDK-HOME.png","path":"images/SDK-HOME.png","modified":1,"renderable":0},{"_id":"source/images/running.png","path":"images/running.png","modified":1,"renderable":0},{"_id":"source/images/sdk-manager.png","path":"images/sdk-manager.png","modified":1,"renderable":0},{"_id":"source/images/server-detail.png","path":"images/server-detail.png","modified":1,"renderable":0},{"_id":"source/images/vultr.png","path":"images/vultr.png","modified":1,"renderable":0},{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/images/icon.jpg","path":"images/icon.jpg","modified":1,"renderable":0},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/Chic/ChangeLogs.md","hash":"82786c20871dd56447d872db9c16bd14b0cf01b8","modified":1587535878718},{"_id":"themes/Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1587535878718},{"_id":"themes/Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1587535878718},{"_id":"themes/Chic/README.md","hash":"3805a9cae08d92b63dbc3764e57bb0b295972049","modified":1587535878718},{"_id":"themes/Chic/_config.yml","hash":"74c8193d205fe3caf074ff88cb5d66b850a499c4","modified":1587535878719},{"_id":"themes/Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1587535878723},{"_id":"source/_posts/Act_like_a_leader_00.md","hash":"d319213843259114568cd38a3bc969fc036ba72e","modified":1587459210627},{"_id":"source/_posts/android-dev-env.md","hash":"316faf6938841dab15da1ba8cdf7c2911199e142","modified":1587459210627},{"_id":"source/_posts/constructor & prototype.md","hash":"5d4ce6bc12440f0cab0d58aeca852e0eb29be3f4","modified":1587459210629},{"_id":"source/_posts/canvas.md","hash":"cc0a4fdc8ae9348d7e83a043a48ccc56fa494d97","modified":1587459210629},{"_id":"source/_posts/easy-study.md","hash":"70b3c3c15feb7ea72fc650a3bc261415f5afddce","modified":1587521701935},{"_id":"source/_posts/egg-vue-webpack-boilerplate.md","hash":"ddb910d57678e66e3e1fddcc794a4db662388763","modified":1587459210629},{"_id":"source/_posts/js-proxy.md","hash":"00ed03a18cfe28674a39ce82adea2c006cd56c16","modified":1587459210631},{"_id":"source/_posts/js-yield.md","hash":"771eb9539ad2022bee0772256538622e5ea81fe0","modified":1587459210631},{"_id":"source/_posts/js绑定.md","hash":"4ecf091b8938e6b1e2c9f7e710407c30dbfde63e","modified":1587459210631},{"_id":"source/_posts/learn-webpack.md","hash":"7149f2be0b1382de43c751c0da3d25a46509e899","modified":1587459210632},{"_id":"source/_posts/re-css_01.md","hash":"90537c42dc66e9ecd86787ebea1d8601511455ea","modified":1587459210934},{"_id":"source/_posts/roughViz.md","hash":"c2a079d817fd329118c76f746c20eb0f56728dad","modified":1587459210934},{"_id":"source/_posts/taro-mult-dev.md","hash":"e21cd102d2bd96a254f266c107a0238a14add768","modified":1587459210934},{"_id":"source/_posts/vue1.0.md","hash":"32891aec9627fabdae0f5c6d7dac346ab2da6c6a","modified":1587459210936},{"_id":"source/_posts/vue2.0.md","hash":"f7fd290640783af9c38ca039f5d74c3fc5959f1a","modified":1587459210936},{"_id":"source/_posts/vultr-ss.md","hash":"2eba195b4f4a6ca1584cbd1a00e6d1ced1736371","modified":1587459210937},{"_id":"source/_posts/wx-input.md","hash":"f461e85e958313e9e206670c1c70911c6c8067ba","modified":1587459210938},{"_id":"source/about/index.md","hash":"6bcd846f4ca3923dcaf22709544351c20ff9abe6","modified":1587459210942},{"_id":"source/categories/index.md","hash":"23d86bc7725b157868f454c42eb600b81756b299","modified":1587459210942},{"_id":"source/category/index.md","hash":"8ebe61f74283fb6ad76cdf11fbdede2b40818356","modified":1587459210942},{"_id":"source/images/Android-6.png","hash":"d00d0ecb7dd26dbb434cca8e7dac2c4f08d935bc","modified":1587459210942},{"_id":"source/images/HAXM-error.png","hash":"6903b74bf9d9a4fc91c4bd520f766892c077f111","modified":1587459210943},{"_id":"source/images/SDK-HOME.png","hash":"361df1a468a89be76286eb991a569a16322c8c3e","modified":1587459210943},{"_id":"source/images/running.png","hash":"fb063eedb5225414d30e90b66afefa8a52cd8db0","modified":1587459210944},{"_id":"source/images/sdk-manager.png","hash":"bd4403a690c3f03acf0b19c8f1e7226cc1d159da","modified":1587459210944},{"_id":"source/images/server-detail.png","hash":"a7b7bc50dce5ae079e4bd73c5d5de3622fd84c32","modified":1587459210944},{"_id":"source/images/vultr.png","hash":"055918a304336feb5b0dcdd6a9639a9637cf6ec0","modified":1587459210945},{"_id":"source/tag/index.md","hash":"6c00a7871f7f36796526c34750b00d367a823f5b","modified":1587459210945},{"_id":"source/tags/index.md","hash":"511df79f2806d1d54e2b154694327ff3fdc84c2f","modified":1587459210946},{"_id":"themes/Chic/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1587535878713},{"_id":"themes/Chic/.git/config","hash":"cd7ab5965f436f6c309d895a80a01fd2b19d3241","modified":1587535878715},{"_id":"themes/Chic/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1587535844998},{"_id":"themes/Chic/.git/index","hash":"df71f04c5474f3c8a30fb6275452a3bcc0eb771f","modified":1587535878821},{"_id":"themes/Chic/.git/packed-refs","hash":"eb33bb4f27fabbb879e546619609c36814ba1cfb","modified":1587535878712},{"_id":"themes/Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1587535878719},{"_id":"themes/Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1587535878719},{"_id":"themes/Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1587535878719},{"_id":"themes/Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1587535878719},{"_id":"themes/Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1587535878719},{"_id":"themes/Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1587535878719},{"_id":"themes/Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1587535878719},{"_id":"themes/Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1587535878720},{"_id":"themes/Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1587535878720},{"_id":"themes/Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1587535878720},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1587535878720},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1587535878720},{"_id":"themes/Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1587535878722},{"_id":"themes/Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1587535878722},{"_id":"themes/Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1587535878722},{"_id":"themes/Chic/layout/layout.ejs","hash":"f874320edabdefc204f9e17d119a16d16f26c363","modified":1587535878722},{"_id":"themes/Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1587535878723},{"_id":"themes/Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1587535878723},{"_id":"themes/Chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1587535878723},{"_id":"themes/Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1587535878723},{"_id":"themes/Chic/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1587535878740},{"_id":"source/images/icon.jpg","hash":"f8c4ca58b0116831f0a7f8cdc79ef68fabe1a8e8","modified":1587459210943},{"_id":"source/_posts/android-dev-env/Android-6.png","hash":"d00d0ecb7dd26dbb434cca8e7dac2c4f08d935bc","modified":1587459210628},{"_id":"source/_posts/android-dev-env/HAXM-error.png","hash":"6903b74bf9d9a4fc91c4bd520f766892c077f111","modified":1587459210628},{"_id":"source/_posts/android-dev-env/SDK-HOME.png","hash":"361df1a468a89be76286eb991a569a16322c8c3e","modified":1587459210628},{"_id":"source/_posts/android-dev-env/sdk-manager.png","hash":"bd4403a690c3f03acf0b19c8f1e7226cc1d159da","modified":1587459210629},{"_id":"source/_posts/learn-webpack/webpack_00.PNG","hash":"024dbb946abab49defb9b92a058508676e51e32a","modified":1587459210632},{"_id":"source/_posts/learn-webpack/webpack_01.png","hash":"8da114a31f34cacc028ea790796e8830aab923a3","modified":1587459210632},{"_id":"source/_posts/learn-webpack/webpack_02.png","hash":"46cf1abf1efd0a0f816f9b2d281c28b437f6bb69","modified":1587459210632},{"_id":"source/_posts/vultr-ss/running.png","hash":"fb063eedb5225414d30e90b66afefa8a52cd8db0","modified":1587459210937},{"_id":"source/_posts/vultr-ss/server-detail.png","hash":"a7b7bc50dce5ae079e4bd73c5d5de3622fd84c32","modified":1587459210937},{"_id":"source/_posts/vultr-ss/vultr.png","hash":"055918a304336feb5b0dcdd6a9639a9637cf6ec0","modified":1587459210938},{"_id":"source/_posts/yuque/2019总结，2020要开心.md","hash":"85e9ca04a607175cc04c08c9639d60599c033418","modified":1587522307334},{"_id":"source/_posts/yuque/2020.03.18 QS(04.17更新).md","hash":"5a4328e925ace28236f40f55b153e2698168ac83","modified":1587522307324},{"_id":"source/_posts/yuque/Less 记录.md","hash":"46ed7aa62196604e02a8c69e22b1cd2f58fd20dd","modified":1587522307318},{"_id":"source/_posts/yuque/MAC book 从0到开发.md","hash":"fc7a6bdd26dc98360ccf9aee06e8ae39a38b29c7","modified":1587522307317},{"_id":"source/_posts/yuque/React Native 踩坑记.md","hash":"5b3edf1ca3194b9d6b6d2ecbbf719fafb3865b84","modified":1587522307323},{"_id":"source/_posts/yuque/Vue-cli3构建静态网站页面.md","hash":"9cd0f0006a8345ee3d7a8ffb54a1cea6fa4a9a30","modified":1587522307319},{"_id":"source/_posts/yuque/Weekly sharing 02（20190304）.md","hash":"fc323f3767dcb97f5da3abaccc6546cdaffef036","modified":1587522307336},{"_id":"source/_posts/yuque/Windows环境下docker配置安装.md","hash":"1cb01e919b2c817fd63d532c0941fc003caca0d5","modified":1587522307333},{"_id":"source/_posts/yuque/css position sticky（css的粘性定位）.md","hash":"d2e688f28c3392675433366b7047d400da7400ae","modified":1587522307337},{"_id":"source/_posts/yuque/h5自定义海报生成.md","hash":"e006aca3095e8e727ae042ed15ee361ae100ef0d","modified":1587522307338},{"_id":"source/_posts/yuque/ios10以下版本内浏览器无法打开vue项目.md","hash":"ac91856aa6e644f23f78b0e1f8b6bd45a3a3878a","modified":1587522307340},{"_id":"source/_posts/yuque/mpvue 引入第三方UI组件库.md","hash":"d9a02a9c05a80f7893188ec7d3eaf4594244aa09","modified":1587522307335},{"_id":"source/_posts/yuque/no such file or directory, scandir '...!node_modules!node-sass!vendor.md","hash":"34c9cd0bee5e489ba64cc2ad02ee51b29e05497a","modified":1587522307320},{"_id":"source/_posts/yuque/sourcetree 推送报错.md","hash":"aa3ea35afed06577e0f433867c8791521ecb77c7","modified":1587522307337},{"_id":"source/_posts/yuque/swiper4.0自动轮播+循环轮播.md","hash":"fe47ab3b66b77235406de1c41a27e8d5c19edbe2","modified":1587522307340},{"_id":"source/_posts/yuque/「Taro」Taro CLI 与本地安装运行时框架 @tarojs!taro-weapp 版本不一致.md","hash":"9a8aa2e09cc875e8fc58d4e325b3cba77883a32e","modified":1587522307326},{"_id":"source/_posts/yuque/「git」bad signature fatal index file corrupt.md","hash":"9a3cde3ab99119e141867bf7d47a946ad0237536","modified":1587522307323},{"_id":"source/_posts/yuque/「js」微信环境判断.md","hash":"a050edd1e74969a197a18067b439d253e7cbef62","modified":1587522307326},{"_id":"source/_posts/yuque/「wx」微信小程序web-view localStorage问题.md","hash":"d850f2eea909ca718ca0d26523411713afe45efc","modified":1587522307325},{"_id":"source/_posts/yuque/「wx」微信小程序自定义下拉刷新.md","hash":"ace21e42ed7b846994b188f795ff739744d84a48","modified":1587522307324},{"_id":"source/_posts/yuque/在ios系统浏览器中输入框得到焦点时页面自动放大.md","hash":"3e98ed3957bf7e19aa0af457ae2a12cd9d4ebf67","modified":1587522307339},{"_id":"source/_posts/yuque/微信小程序自定义组件使用canvas绘图，无法绘制以及fail canvas is empty问题.md","hash":"7ee35888e0d9f5bdcbe3213f280b422a47cf0b01","modified":1587522307335},{"_id":"source/_posts/yuque/微信小程序获取当前页面options.md","hash":"eff4cf68aaad20e2e147a1dcc970472e9dfd7e33","modified":1587522307333},{"_id":"source/_posts/yuque/微信开发目前遇到的一些坑.md","hash":"a50b1e1e494cbcb86ba48d91da3cecddd067f895","modified":1587522307339},{"_id":"themes/Chic/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1587535844999},{"_id":"themes/Chic/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1587535845001},{"_id":"themes/Chic/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1587535845002},{"_id":"themes/Chic/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1587535845002},{"_id":"themes/Chic/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1587535845000},{"_id":"themes/Chic/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1587535845003},{"_id":"themes/Chic/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1587535845000},{"_id":"themes/Chic/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1587535845001},{"_id":"themes/Chic/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1587535845001},{"_id":"themes/Chic/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1587535845003},{"_id":"themes/Chic/.git/logs/HEAD","hash":"661f605e95f4ed3f18579c621212174ea28fa600","modified":1587535878714},{"_id":"themes/Chic/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1587535844997},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1587535878721},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1587535878721},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1587535878721},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1587535878721},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1587535878721},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1587535878721},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1587535878721},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"7a23c26a6c8800befb9878d60afe077c738f0c93","modified":1587535967289},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1587535878722},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1587535878722},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1587535878722},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1587535878722},{"_id":"themes/Chic/source/css/base.styl","hash":"7ea2db2c139a719bb7d3f3c5e182dd0e0d59e098","modified":1587535878738},{"_id":"themes/Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1587535878739},{"_id":"themes/Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1587535878739},{"_id":"themes/Chic/source/css/layout.styl","hash":"9942d05bb2c55cf035d4bf9af325e1e81766a510","modified":1587535878739},{"_id":"themes/Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1587535878739},{"_id":"themes/Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1587535878739},{"_id":"themes/Chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1587535878739},{"_id":"themes/Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1587535878740},{"_id":"themes/Chic/source/js/script.js","hash":"93694e4e16893f83611daa5ba3723b14ecc80abb","modified":1587535878820},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1587535878820},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1587535878821},{"_id":"source/_posts/egg-vue-webpack-boilerplate/egg-vue_00.png","hash":"7c0374d56a1589254fefa38ee827b34ee98594ee","modified":1587459210631},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1587535878819},{"_id":"themes/Chic/.git/objects/pack/pack-aec9c985200cc5700b1604eb960bb3ee6220d986.idx","hash":"8b795c07a4d94338d7d453b13a78da2326012706","modified":1587535878704},{"_id":"themes/Chic/.git/refs/heads/master","hash":"06e6bc800607681123e2a766c8d8c6332dfad9ee","modified":1587535878714},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1587535878735},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1587535878735},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1587535878723},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1587535878724},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1587535878725},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1587535878726},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1587535878727},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1587535878727},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1587535878727},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1587535878727},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1587535878727},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1587535878728},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1587535878729},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1587535878730},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1587535878730},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1587535878730},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1587535878730},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1587535878730},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1587535878731},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1587535878732},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1587535878733},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1587535878734},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1587535878734},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1587535878734},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1587535878734},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1587535878734},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1587535878735},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1587535878735},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1587535878735},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1587535878735},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1587535878737},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1587535878737},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1587535878737},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1587535878738},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1587535878738},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1587535878738},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1587535878738},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1587535878738},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1587535878740},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1587535878740},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1587535878741},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1587535878741},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1587535878741},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1587535878741},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1587535878742},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1587535878742},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1587535878742},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1587535878742},{"_id":"themes/Chic/.git/logs/refs/heads/master","hash":"661f605e95f4ed3f18579c621212174ea28fa600","modified":1587535878714},{"_id":"themes/Chic/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1587535878713},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1587535878736},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1587535878736},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1587535878736},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1587535878736},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1587535878737},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1587535878737},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1587535878737},{"_id":"source/_posts/taro-mult-dev/avd.png","hash":"a3502f5d4ede039cab66ea294781f102534f61ea","modified":1587459210936},{"_id":"themes/Chic/.git/logs/refs/remotes/origin/HEAD","hash":"661f605e95f4ed3f18579c621212174ea28fa600","modified":1587535878713},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1587535878819},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1587535878815},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1587535878781},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1587535878763},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1587535878811},{"_id":"source/_posts/re-css/CSS世界（异步图书）.mobi","hash":"742426acd07e735a6a9875b935d216292ec216ba","modified":1587459210933},{"_id":"themes/Chic/.git/objects/pack/pack-aec9c985200cc5700b1604eb960bb3ee6220d986.pack","hash":"764102ed1b9e6afab0def7abfba6ffec9897b515","modified":1587535878704},{"_id":"source/_posts/re-css/CSS世界.pdf","hash":"12fd5f1e4580a2796bb771bcbdc50e70ab767ee4","modified":1587459210883}],"Category":[{"name":"读书&听书","_id":"ck9axxrow0004e36k4fpxe7cl"},{"name":"android","_id":"ck9axxrp1000be36ke9l2qnln"},{"name":"js","_id":"ck9axxrp4000he36kos3d24v5"},{"name":"HTML","_id":"ck9axxrp6000me36kgyssdi6v"},{"name":"webpack","_id":"ck9axxrp9000te36kmsuaah0s"},{"name":"vue","_id":"ck9axxrpc0012e36k2f2ydj1h"},{"name":"css","_id":"ck9axxrph001ie36kifn1hrp0"},{"name":"taro","_id":"ck9axxrpi001ne36k56t59a7d"},{"name":"微信小程序","_id":"ck9axxrpk001we36ki3nifwds"},{"name":"React","_id":"ck9axxrqs002ue36kllzfsskd"}],"Data":[],"Page":[{"title":"","date":"2020-01-12T09:45:23.000Z","type":"about","_content":"\nHTTISHERE\n\nemail: httishere0728@gmail.com\n\n微信公众号:\n![](https://mp.weixin.qq.com/misc/getqrcode?fakeid=3240606184&token=88909113)\n\nQ&A\n...\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2020-01-12 17:45:23\ntype: about\n---\n\nHTTISHERE\n\nemail: httishere0728@gmail.com\n\n微信公众号:\n![](https://mp.weixin.qq.com/misc/getqrcode?fakeid=3240606184&token=88909113)\n\nQ&A\n...\n","updated":"2020-04-21T08:53:30.942Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9axxrou0001e36koxwbso67","content":"<p>HTTISHERE</p>\n<p>email: <a href=\"mailto:httishere0728@gmail.com\" target=\"_blank\" rel=\"noopener\">httishere0728@gmail.com</a></p>\n<p>微信公众号:<br><img src=\"https://mp.weixin.qq.com/misc/getqrcode?fakeid=3240606184&amp;token=88909113\" alt=\"\"></p>\n<p>Q&amp;A<br>…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTISHERE</p>\n<p>email: <a href=\"mailto:httishere0728@gmail.com\" target=\"_blank\" rel=\"noopener\">httishere0728@gmail.com</a></p>\n<p>微信公众号:<br><img src=\"https://mp.weixin.qq.com/misc/getqrcode?fakeid=3240606184&amp;token=88909113\" alt=\"\"></p>\n<p>Q&amp;A<br>…</p>\n"},{"title":"Categories","date":"2020-01-04T10:11:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2020-01-04 18:11:18\ntype: categories\n---\n","updated":"2020-04-21T08:53:30.942Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9axxrov0003e36kj7rvduzi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","date":"2020-01-04T11:14:57.000Z","type":"category","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: category\ndate: 2020-01-04 19:14:57\ntype: category\nlayout: category\n---\n","updated":"2020-04-21T08:53:30.942Z","path":"category/index.html","comments":1,"_id":"ck9axxroy0007e36kwdczbirr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","date":"2020-01-04T11:14:54.000Z","type":"tag","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\ndate: 2020-01-04 19:14:54\ntype: tag\nlayout: tag\n---\n","updated":"2020-04-21T08:53:30.945Z","path":"tag/index.html","comments":1,"_id":"ck9axxroz0009e36kriq8scgo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2020-01-04T10:16:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2020-01-04 18:16:37\ntype: tags\n---\n","updated":"2020-04-21T08:53:30.946Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9axxrq5002ne36kkjszfg5i","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"听《能力陷阱》-【美】埃米尼亚·伊贝拉 （一）","date":"2020-01-06T04:29:58.000Z","_content":"![](https://cdn.nlark.com/yuque/0/2020/png/250093/1578310667973-af3dc6c7-374d-4c77-aad3-140d4c9930cd.png)<br>\n英文名：< Act like a leader and think like a leader >\n\n核心：先行动后思考，不要被思想局限。\n\n1、定义自己的工作<br>\n\n不要用自己的技能和特长来定义自己的工作，如果是用技能和特长来定义自己的工作那么就会讨厌生活的变动，工作的变动。<br>\n我觉得我是因为讨厌变动才造成懒惰，不会思考，不会畅想。我会一直点一家外卖直到吃厌才会去找另外的外卖，我不喜欢每次到要点外卖前的选择，不喜欢尝试新的外卖，因为我怕点到我不喜欢的菜，对，因为我怕。<br>\n很多时候害怕变动或者不喜欢变动都是对自己能力的不自信，因为我觉得不够，所以我只会做我自己分内的工作，我不敢接触其他工作内容。<br>\n\n1）由外而内的思考原则<br>\n很多时候我们都在说要吾日三省吾身，每天要多多反省自己，所以对于一时的冲动，就有了犹豫的时间，因为我们的价值观，我们优先考虑的东西都会阻碍我们的行动，“由内而外”产生的想法就会对我们的改变造成阻碍。但是一个人的思维方式是很难改变的，不可能我和你说你不能老是由内而外的思考，你应该多多经历多多像领导一样思考，不要总是局限于自己的能力范围，但是可能一下子改变吗，当然不可能。所以只能慢慢做慢慢去锻炼自己的思维方式，第一就是不要对参与新项目或者新活动产生排斥感，不要排斥和新的人新的事物打交道，不一定要从工作开始，可以先从生活新鲜事开始，因为这些充满挑战的新经历以及它们带来的成就会改变限制我们的固有行为和思维，比如每个周末宅在家里就是一种固有行为，所以首先多出去走走就是一种调整，你会面对去哪儿？去干嘛？行程安排这些挑战，这些就是你首要面对的。<br>\n自省大多时候会让我们只停留在过去，但是过去的就是过去了，有时候想太多，后悔太多是没有用的，我们只有多行动才能学会敏感自如的应对生活的改变。\n> 我何以知道自己在想什么？——只有在看到我做了什么以后才能知道。\n                        —— 社会心理学家卡尔·韦克（Karl Weick）\n\n由内而外：内在自我认知-过去的经历-思考\n由外而内：外在能力表现-新的经历-行动\n\n2）避免能力陷阱<br>\n> 我们很乐于去做那些我们擅长的事，于是就会一直去做，最终使得我们一直只会做擅长的那些事。\n\n我们任务我们的价值来源于我们擅长的事，所以会投入大量的精力和时间去做我们会做的事，有可能仅仅只是我们会而已。久而久之就会忽略其他的事情，总觉得自己没有时间，没有精力。上大学的时候，就总觉得课被排得满满的，难以有整块的时间让我去做自己想要做的事，可以要做的事难道真的需要那么多整块的时间吗。<br>\n前几天刚刚正好经历了跨年，所以年度总结是必不可少的，leader给了一组数据问我们满意吗，其实我们心里的第一想法就是我们满不满意有什么关系，老板满意就行，反正我们做到了自己应该做的，按时完成了项目需求，按时上线，及时处理bug，并没有延期，我们为什么要去觉得满不满意，这就是“能力陷阱”。当我们非常优秀完美的完成了上级指派的任务时，表现良好且无可取代，所以我们也会越来越离不开这个岗位，第一、leader觉得我们太厉害了所以离不开，第二自己觉得自己太厉害了所以离不开。<br>\n于是我们就被自己的优势禁锢了。\n\n3）领导者的特征<br>\n首先沟通能力是一件很重要的事情，无论是否为一个领导者，如果连基本的表达能力都不足的话万事皆不能成。<br>\n我们总在说如何正确表达自己是一件能难的事情，需要有良好的思维逻辑和优秀的表达能力。<br>\n我们在周五会有一个例行分享会，可以分享一切自己觉得有趣值得讨论的事情，我之前一直没有明确这个分享会存在的意义是什么，拓展大家的见识？了解不一样的想法？其实更多的是在于学会表达自己，每次说到指定下周分享者的时候，大家都默默低下了头心里默念不要是我不要是我，因为我们不会或者不愿表达，也因为表达是一件很难的事情，比如我在写下这几段话的时候其实我并不知道该用怎样的语言逻辑去表达我想要表达的意思，比如上周的分享，我明明准备了两周，准备了PPT但是我在分享时依旧脑袋一片空白，只能想到什么说什么。我们老大说，几十个人面前讲话的机会是很难得的，有这个表达分享的机会是需要好好把握的，习惯了在几十个人面前说话之后怎么会害怕面试时的那么几个面试官呢。<br>\n\na. 像桥梁一样连接不同的人或组织<br>\n对于领导这个角色来说对内做的完美无瑕是一件重要的事情，他能更好的提高团队效率和凝聚力，但是能够将内外对接起来才是最不容易的事情，需要长于从外部获取想法，给团队带来新的观点，能从大局上看待问题，展望发展方向。<br>\nb. 有远见<br>\n我们在生活工作中总会遇到的一个问题就是未来规划，但是往往我们对于自己的未来规划都是局限于自己的能力，我是一个程序员我以后就要做全栈，就要研究算法等等，其实都是被我们自己的技能局限了。<br>\n我们不要做一个只会工作其他什么也不会的技能者，更多的区分发现生活中的机遇和危险。<br>\nc. 提升影响力<br>\n如何展示我们的想法以及这个过程中的交互都决定了其他人是否愿意采纳自己的想法意见，能被采纳就说明我们是带有一定影响力的，所以不要吝啬于表达，多表达是一件很重要的事情（当然除了抬杠），我上一年的年度报告写得就是我不要沉默我要多多能和别人表达自己的想法意见，而我今年的年度报告就是减少无意义的想法讨论，过犹不及，所以要锻炼自己的表达能力，能更加正确的表述自己的想法。<br>\nd. 提升领导气质<br>\n需要有丰富的人生阅历，良好的交流行为，做到知行合一。<br>\ne. 改变日程安排<br>\n需要将更多的时间精力放在更加有价值的事情上反而能提高自己的做事效率。<br>\n越是忙碌的时候越需要空出一些时间来应对一些意想不到的事情，当然同时不要过多的减少旧工作，当新角色开始发灰效果才会有更多的动力放手以前阻碍我们进步的日常工作。<br>\n同时克服拖延也是一件非常困难的事情，其实拖延的主要原因就是懒，没有动力，没有更多的想法和兴趣，所以分散对日常工作的注意力不妨是一个好的解决方法。<br>\n\n\n","source":"_posts/Act_like_a_leader_00.md","raw":"---\ntitle: 听《能力陷阱》-【美】埃米尼亚·伊贝拉 （一）\ndate: 2020-01-06 12:29:58\ntags: \n    - '樊登读书'\ncategories:\n    - '读书&听书'\n---\n![](https://cdn.nlark.com/yuque/0/2020/png/250093/1578310667973-af3dc6c7-374d-4c77-aad3-140d4c9930cd.png)<br>\n英文名：< Act like a leader and think like a leader >\n\n核心：先行动后思考，不要被思想局限。\n\n1、定义自己的工作<br>\n\n不要用自己的技能和特长来定义自己的工作，如果是用技能和特长来定义自己的工作那么就会讨厌生活的变动，工作的变动。<br>\n我觉得我是因为讨厌变动才造成懒惰，不会思考，不会畅想。我会一直点一家外卖直到吃厌才会去找另外的外卖，我不喜欢每次到要点外卖前的选择，不喜欢尝试新的外卖，因为我怕点到我不喜欢的菜，对，因为我怕。<br>\n很多时候害怕变动或者不喜欢变动都是对自己能力的不自信，因为我觉得不够，所以我只会做我自己分内的工作，我不敢接触其他工作内容。<br>\n\n1）由外而内的思考原则<br>\n很多时候我们都在说要吾日三省吾身，每天要多多反省自己，所以对于一时的冲动，就有了犹豫的时间，因为我们的价值观，我们优先考虑的东西都会阻碍我们的行动，“由内而外”产生的想法就会对我们的改变造成阻碍。但是一个人的思维方式是很难改变的，不可能我和你说你不能老是由内而外的思考，你应该多多经历多多像领导一样思考，不要总是局限于自己的能力范围，但是可能一下子改变吗，当然不可能。所以只能慢慢做慢慢去锻炼自己的思维方式，第一就是不要对参与新项目或者新活动产生排斥感，不要排斥和新的人新的事物打交道，不一定要从工作开始，可以先从生活新鲜事开始，因为这些充满挑战的新经历以及它们带来的成就会改变限制我们的固有行为和思维，比如每个周末宅在家里就是一种固有行为，所以首先多出去走走就是一种调整，你会面对去哪儿？去干嘛？行程安排这些挑战，这些就是你首要面对的。<br>\n自省大多时候会让我们只停留在过去，但是过去的就是过去了，有时候想太多，后悔太多是没有用的，我们只有多行动才能学会敏感自如的应对生活的改变。\n> 我何以知道自己在想什么？——只有在看到我做了什么以后才能知道。\n                        —— 社会心理学家卡尔·韦克（Karl Weick）\n\n由内而外：内在自我认知-过去的经历-思考\n由外而内：外在能力表现-新的经历-行动\n\n2）避免能力陷阱<br>\n> 我们很乐于去做那些我们擅长的事，于是就会一直去做，最终使得我们一直只会做擅长的那些事。\n\n我们任务我们的价值来源于我们擅长的事，所以会投入大量的精力和时间去做我们会做的事，有可能仅仅只是我们会而已。久而久之就会忽略其他的事情，总觉得自己没有时间，没有精力。上大学的时候，就总觉得课被排得满满的，难以有整块的时间让我去做自己想要做的事，可以要做的事难道真的需要那么多整块的时间吗。<br>\n前几天刚刚正好经历了跨年，所以年度总结是必不可少的，leader给了一组数据问我们满意吗，其实我们心里的第一想法就是我们满不满意有什么关系，老板满意就行，反正我们做到了自己应该做的，按时完成了项目需求，按时上线，及时处理bug，并没有延期，我们为什么要去觉得满不满意，这就是“能力陷阱”。当我们非常优秀完美的完成了上级指派的任务时，表现良好且无可取代，所以我们也会越来越离不开这个岗位，第一、leader觉得我们太厉害了所以离不开，第二自己觉得自己太厉害了所以离不开。<br>\n于是我们就被自己的优势禁锢了。\n\n3）领导者的特征<br>\n首先沟通能力是一件很重要的事情，无论是否为一个领导者，如果连基本的表达能力都不足的话万事皆不能成。<br>\n我们总在说如何正确表达自己是一件能难的事情，需要有良好的思维逻辑和优秀的表达能力。<br>\n我们在周五会有一个例行分享会，可以分享一切自己觉得有趣值得讨论的事情，我之前一直没有明确这个分享会存在的意义是什么，拓展大家的见识？了解不一样的想法？其实更多的是在于学会表达自己，每次说到指定下周分享者的时候，大家都默默低下了头心里默念不要是我不要是我，因为我们不会或者不愿表达，也因为表达是一件很难的事情，比如我在写下这几段话的时候其实我并不知道该用怎样的语言逻辑去表达我想要表达的意思，比如上周的分享，我明明准备了两周，准备了PPT但是我在分享时依旧脑袋一片空白，只能想到什么说什么。我们老大说，几十个人面前讲话的机会是很难得的，有这个表达分享的机会是需要好好把握的，习惯了在几十个人面前说话之后怎么会害怕面试时的那么几个面试官呢。<br>\n\na. 像桥梁一样连接不同的人或组织<br>\n对于领导这个角色来说对内做的完美无瑕是一件重要的事情，他能更好的提高团队效率和凝聚力，但是能够将内外对接起来才是最不容易的事情，需要长于从外部获取想法，给团队带来新的观点，能从大局上看待问题，展望发展方向。<br>\nb. 有远见<br>\n我们在生活工作中总会遇到的一个问题就是未来规划，但是往往我们对于自己的未来规划都是局限于自己的能力，我是一个程序员我以后就要做全栈，就要研究算法等等，其实都是被我们自己的技能局限了。<br>\n我们不要做一个只会工作其他什么也不会的技能者，更多的区分发现生活中的机遇和危险。<br>\nc. 提升影响力<br>\n如何展示我们的想法以及这个过程中的交互都决定了其他人是否愿意采纳自己的想法意见，能被采纳就说明我们是带有一定影响力的，所以不要吝啬于表达，多表达是一件很重要的事情（当然除了抬杠），我上一年的年度报告写得就是我不要沉默我要多多能和别人表达自己的想法意见，而我今年的年度报告就是减少无意义的想法讨论，过犹不及，所以要锻炼自己的表达能力，能更加正确的表述自己的想法。<br>\nd. 提升领导气质<br>\n需要有丰富的人生阅历，良好的交流行为，做到知行合一。<br>\ne. 改变日程安排<br>\n需要将更多的时间精力放在更加有价值的事情上反而能提高自己的做事效率。<br>\n越是忙碌的时候越需要空出一些时间来应对一些意想不到的事情，当然同时不要过多的减少旧工作，当新角色开始发灰效果才会有更多的动力放手以前阻碍我们进步的日常工作。<br>\n同时克服拖延也是一件非常困难的事情，其实拖延的主要原因就是懒，没有动力，没有更多的想法和兴趣，所以分散对日常工作的注意力不妨是一个好的解决方法。<br>\n\n\n","slug":"Act_like_a_leader_00","published":1,"updated":"2020-04-21T08:53:30.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxroq0000e36krsly0sqv","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578310667973-af3dc6c7-374d-4c77-aad3-140d4c9930cd.png\" alt=\"\"><br><br>英文名：&lt; Act like a leader and think like a leader &gt;</p>\n<p>核心：先行动后思考，不要被思想局限。</p>\n<p>1、定义自己的工作<br></p>\n<p>不要用自己的技能和特长来定义自己的工作，如果是用技能和特长来定义自己的工作那么就会讨厌生活的变动，工作的变动。<br><br>我觉得我是因为讨厌变动才造成懒惰，不会思考，不会畅想。我会一直点一家外卖直到吃厌才会去找另外的外卖，我不喜欢每次到要点外卖前的选择，不喜欢尝试新的外卖，因为我怕点到我不喜欢的菜，对，因为我怕。<br><br>很多时候害怕变动或者不喜欢变动都是对自己能力的不自信，因为我觉得不够，所以我只会做我自己分内的工作，我不敢接触其他工作内容。<br></p>\n<p>1）由外而内的思考原则<br><br>很多时候我们都在说要吾日三省吾身，每天要多多反省自己，所以对于一时的冲动，就有了犹豫的时间，因为我们的价值观，我们优先考虑的东西都会阻碍我们的行动，“由内而外”产生的想法就会对我们的改变造成阻碍。但是一个人的思维方式是很难改变的，不可能我和你说你不能老是由内而外的思考，你应该多多经历多多像领导一样思考，不要总是局限于自己的能力范围，但是可能一下子改变吗，当然不可能。所以只能慢慢做慢慢去锻炼自己的思维方式，第一就是不要对参与新项目或者新活动产生排斥感，不要排斥和新的人新的事物打交道，不一定要从工作开始，可以先从生活新鲜事开始，因为这些充满挑战的新经历以及它们带来的成就会改变限制我们的固有行为和思维，比如每个周末宅在家里就是一种固有行为，所以首先多出去走走就是一种调整，你会面对去哪儿？去干嘛？行程安排这些挑战，这些就是你首要面对的。<br><br>自省大多时候会让我们只停留在过去，但是过去的就是过去了，有时候想太多，后悔太多是没有用的，我们只有多行动才能学会敏感自如的应对生活的改变。</p>\n<blockquote>\n<p>我何以知道自己在想什么？——只有在看到我做了什么以后才能知道。<br>                        —— 社会心理学家卡尔·韦克（Karl Weick）</p>\n</blockquote>\n<p>由内而外：内在自我认知-过去的经历-思考<br>由外而内：外在能力表现-新的经历-行动</p>\n<p>2）避免能力陷阱<br></p>\n<blockquote>\n<p>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终使得我们一直只会做擅长的那些事。</p>\n</blockquote>\n<p>我们任务我们的价值来源于我们擅长的事，所以会投入大量的精力和时间去做我们会做的事，有可能仅仅只是我们会而已。久而久之就会忽略其他的事情，总觉得自己没有时间，没有精力。上大学的时候，就总觉得课被排得满满的，难以有整块的时间让我去做自己想要做的事，可以要做的事难道真的需要那么多整块的时间吗。<br><br>前几天刚刚正好经历了跨年，所以年度总结是必不可少的，leader给了一组数据问我们满意吗，其实我们心里的第一想法就是我们满不满意有什么关系，老板满意就行，反正我们做到了自己应该做的，按时完成了项目需求，按时上线，及时处理bug，并没有延期，我们为什么要去觉得满不满意，这就是“能力陷阱”。当我们非常优秀完美的完成了上级指派的任务时，表现良好且无可取代，所以我们也会越来越离不开这个岗位，第一、leader觉得我们太厉害了所以离不开，第二自己觉得自己太厉害了所以离不开。<br><br>于是我们就被自己的优势禁锢了。</p>\n<p>3）领导者的特征<br><br>首先沟通能力是一件很重要的事情，无论是否为一个领导者，如果连基本的表达能力都不足的话万事皆不能成。<br><br>我们总在说如何正确表达自己是一件能难的事情，需要有良好的思维逻辑和优秀的表达能力。<br><br>我们在周五会有一个例行分享会，可以分享一切自己觉得有趣值得讨论的事情，我之前一直没有明确这个分享会存在的意义是什么，拓展大家的见识？了解不一样的想法？其实更多的是在于学会表达自己，每次说到指定下周分享者的时候，大家都默默低下了头心里默念不要是我不要是我，因为我们不会或者不愿表达，也因为表达是一件很难的事情，比如我在写下这几段话的时候其实我并不知道该用怎样的语言逻辑去表达我想要表达的意思，比如上周的分享，我明明准备了两周，准备了PPT但是我在分享时依旧脑袋一片空白，只能想到什么说什么。我们老大说，几十个人面前讲话的机会是很难得的，有这个表达分享的机会是需要好好把握的，习惯了在几十个人面前说话之后怎么会害怕面试时的那么几个面试官呢。<br></p>\n<p>a. 像桥梁一样连接不同的人或组织<br><br>对于领导这个角色来说对内做的完美无瑕是一件重要的事情，他能更好的提高团队效率和凝聚力，但是能够将内外对接起来才是最不容易的事情，需要长于从外部获取想法，给团队带来新的观点，能从大局上看待问题，展望发展方向。<br><br>b. 有远见<br><br>我们在生活工作中总会遇到的一个问题就是未来规划，但是往往我们对于自己的未来规划都是局限于自己的能力，我是一个程序员我以后就要做全栈，就要研究算法等等，其实都是被我们自己的技能局限了。<br><br>我们不要做一个只会工作其他什么也不会的技能者，更多的区分发现生活中的机遇和危险。<br><br>c. 提升影响力<br><br>如何展示我们的想法以及这个过程中的交互都决定了其他人是否愿意采纳自己的想法意见，能被采纳就说明我们是带有一定影响力的，所以不要吝啬于表达，多表达是一件很重要的事情（当然除了抬杠），我上一年的年度报告写得就是我不要沉默我要多多能和别人表达自己的想法意见，而我今年的年度报告就是减少无意义的想法讨论，过犹不及，所以要锻炼自己的表达能力，能更加正确的表述自己的想法。<br><br>d. 提升领导气质<br><br>需要有丰富的人生阅历，良好的交流行为，做到知行合一。<br><br>e. 改变日程安排<br><br>需要将更多的时间精力放在更加有价值的事情上反而能提高自己的做事效率。<br><br>越是忙碌的时候越需要空出一些时间来应对一些意想不到的事情，当然同时不要过多的减少旧工作，当新角色开始发灰效果才会有更多的动力放手以前阻碍我们进步的日常工作。<br><br>同时克服拖延也是一件非常困难的事情，其实拖延的主要原因就是懒，没有动力，没有更多的想法和兴趣，所以分散对日常工作的注意力不妨是一个好的解决方法。<br></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578310667973-af3dc6c7-374d-4c77-aad3-140d4c9930cd.png\" alt=\"\"><br><br>英文名：&lt; Act like a leader and think like a leader &gt;</p>\n<p>核心：先行动后思考，不要被思想局限。</p>\n<p>1、定义自己的工作<br></p>\n<p>不要用自己的技能和特长来定义自己的工作，如果是用技能和特长来定义自己的工作那么就会讨厌生活的变动，工作的变动。<br><br>我觉得我是因为讨厌变动才造成懒惰，不会思考，不会畅想。我会一直点一家外卖直到吃厌才会去找另外的外卖，我不喜欢每次到要点外卖前的选择，不喜欢尝试新的外卖，因为我怕点到我不喜欢的菜，对，因为我怕。<br><br>很多时候害怕变动或者不喜欢变动都是对自己能力的不自信，因为我觉得不够，所以我只会做我自己分内的工作，我不敢接触其他工作内容。<br></p>\n<p>1）由外而内的思考原则<br><br>很多时候我们都在说要吾日三省吾身，每天要多多反省自己，所以对于一时的冲动，就有了犹豫的时间，因为我们的价值观，我们优先考虑的东西都会阻碍我们的行动，“由内而外”产生的想法就会对我们的改变造成阻碍。但是一个人的思维方式是很难改变的，不可能我和你说你不能老是由内而外的思考，你应该多多经历多多像领导一样思考，不要总是局限于自己的能力范围，但是可能一下子改变吗，当然不可能。所以只能慢慢做慢慢去锻炼自己的思维方式，第一就是不要对参与新项目或者新活动产生排斥感，不要排斥和新的人新的事物打交道，不一定要从工作开始，可以先从生活新鲜事开始，因为这些充满挑战的新经历以及它们带来的成就会改变限制我们的固有行为和思维，比如每个周末宅在家里就是一种固有行为，所以首先多出去走走就是一种调整，你会面对去哪儿？去干嘛？行程安排这些挑战，这些就是你首要面对的。<br><br>自省大多时候会让我们只停留在过去，但是过去的就是过去了，有时候想太多，后悔太多是没有用的，我们只有多行动才能学会敏感自如的应对生活的改变。</p>\n<blockquote>\n<p>我何以知道自己在想什么？——只有在看到我做了什么以后才能知道。<br>                        —— 社会心理学家卡尔·韦克（Karl Weick）</p>\n</blockquote>\n<p>由内而外：内在自我认知-过去的经历-思考<br>由外而内：外在能力表现-新的经历-行动</p>\n<p>2）避免能力陷阱<br></p>\n<blockquote>\n<p>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终使得我们一直只会做擅长的那些事。</p>\n</blockquote>\n<p>我们任务我们的价值来源于我们擅长的事，所以会投入大量的精力和时间去做我们会做的事，有可能仅仅只是我们会而已。久而久之就会忽略其他的事情，总觉得自己没有时间，没有精力。上大学的时候，就总觉得课被排得满满的，难以有整块的时间让我去做自己想要做的事，可以要做的事难道真的需要那么多整块的时间吗。<br><br>前几天刚刚正好经历了跨年，所以年度总结是必不可少的，leader给了一组数据问我们满意吗，其实我们心里的第一想法就是我们满不满意有什么关系，老板满意就行，反正我们做到了自己应该做的，按时完成了项目需求，按时上线，及时处理bug，并没有延期，我们为什么要去觉得满不满意，这就是“能力陷阱”。当我们非常优秀完美的完成了上级指派的任务时，表现良好且无可取代，所以我们也会越来越离不开这个岗位，第一、leader觉得我们太厉害了所以离不开，第二自己觉得自己太厉害了所以离不开。<br><br>于是我们就被自己的优势禁锢了。</p>\n<p>3）领导者的特征<br><br>首先沟通能力是一件很重要的事情，无论是否为一个领导者，如果连基本的表达能力都不足的话万事皆不能成。<br><br>我们总在说如何正确表达自己是一件能难的事情，需要有良好的思维逻辑和优秀的表达能力。<br><br>我们在周五会有一个例行分享会，可以分享一切自己觉得有趣值得讨论的事情，我之前一直没有明确这个分享会存在的意义是什么，拓展大家的见识？了解不一样的想法？其实更多的是在于学会表达自己，每次说到指定下周分享者的时候，大家都默默低下了头心里默念不要是我不要是我，因为我们不会或者不愿表达，也因为表达是一件很难的事情，比如我在写下这几段话的时候其实我并不知道该用怎样的语言逻辑去表达我想要表达的意思，比如上周的分享，我明明准备了两周，准备了PPT但是我在分享时依旧脑袋一片空白，只能想到什么说什么。我们老大说，几十个人面前讲话的机会是很难得的，有这个表达分享的机会是需要好好把握的，习惯了在几十个人面前说话之后怎么会害怕面试时的那么几个面试官呢。<br></p>\n<p>a. 像桥梁一样连接不同的人或组织<br><br>对于领导这个角色来说对内做的完美无瑕是一件重要的事情，他能更好的提高团队效率和凝聚力，但是能够将内外对接起来才是最不容易的事情，需要长于从外部获取想法，给团队带来新的观点，能从大局上看待问题，展望发展方向。<br><br>b. 有远见<br><br>我们在生活工作中总会遇到的一个问题就是未来规划，但是往往我们对于自己的未来规划都是局限于自己的能力，我是一个程序员我以后就要做全栈，就要研究算法等等，其实都是被我们自己的技能局限了。<br><br>我们不要做一个只会工作其他什么也不会的技能者，更多的区分发现生活中的机遇和危险。<br><br>c. 提升影响力<br><br>如何展示我们的想法以及这个过程中的交互都决定了其他人是否愿意采纳自己的想法意见，能被采纳就说明我们是带有一定影响力的，所以不要吝啬于表达，多表达是一件很重要的事情（当然除了抬杠），我上一年的年度报告写得就是我不要沉默我要多多能和别人表达自己的想法意见，而我今年的年度报告就是减少无意义的想法讨论，过犹不及，所以要锻炼自己的表达能力，能更加正确的表述自己的想法。<br><br>d. 提升领导气质<br><br>需要有丰富的人生阅历，良好的交流行为，做到知行合一。<br><br>e. 改变日程安排<br><br>需要将更多的时间精力放在更加有价值的事情上反而能提高自己的做事效率。<br><br>越是忙碌的时候越需要空出一些时间来应对一些意想不到的事情，当然同时不要过多的减少旧工作，当新角色开始发灰效果才会有更多的动力放手以前阻碍我们进步的日常工作。<br><br>同时克服拖延也是一件非常困难的事情，其实拖延的主要原因就是懒，没有动力，没有更多的想法和兴趣，所以分散对日常工作的注意力不妨是一个好的解决方法。<br></p>\n"},{"title":"搭建Android开发环境","date":"2020-03-24T01:44:21.000Z","_content":"\n为了配合React Native端开发, 且处于Windows, 所以需要搭建Android开发环境. \n\n需要安装: Node, Watchman, 命令行工具, JDK, Android Studio. \n\n### Java Development Kit\n> React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）. \n\n[JDK下载地址](https://www.oracle.com/java/technologies/javase-jdk8-downloads.html)\n\n### Android 开发环境\n> 国内用户必须必须必须有稳定的翻墙工具, 否则在下载、安装、配置过程中会不断遭遇链接超时或断开, 无法进行开发工作. 若安装过程中出现报错等99%是无法正常翻墙造成. \n\n[购买服务并配置可看前一篇文章](./vultr-ss)\n\n- #### 安装 Android Studio\n\n    [下载安装 Android Studio](https://developer.android.com/studio/index.html)\n\n    安装界面中选择\"Custom\"选项, 确保选中了以下几项: \n    1) Android SDK\n    2) Android SDK Platform\n    3) Performance (Intel ® HAXM) ([AMD 处理器看这里](https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html))\n    4) Android Virtual Device\n\n    问题:\n\n    1) HAXM installation failed\n    ![HAXM安装失败](android-dev-env/HAXM-error.png)\n    Intel Virtualization Technology（VT-x）没有开启, 所以需要进入bios进行开启Intel Virtualization Technology（VT-x）的操作.\n    2) Unable to run Intel HAXM installer: Cannot start process, the working directory \n\n        Download HAXM directly from Intel website, [here](https://github.com/intel/haxm/releases/tag/v7.5.6)\n\n        因为在原来的开发中使用到了docker, 所以电脑已安装Hyper-v, 但是vt-x和Hyper-v不能共存所以会导致HAXM安装失败, 所以需要开发Android时需要关闭Hyper-v. [操作方法](https://blog.csdn.net/Coco_chun/article/details/90261678)\n\n        ```bash\n        bcdedit /set hypervisorlaunchtype off \n\n        // 之后重启电脑，这时候你再去安装haxm就可以了\n\n        // 重启hyper-v \n        bcdedit / set hypervisorlaunchtype auto\n        ```\n\n\n- #### 安装 Android SDK\n\n    Android Studio 默认会安装最新版本的 Android SDK. 目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本, RN 目前支持 android 4.1 以上设备）. 可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK. \n\n    可以在 Android Studio 的欢迎界面中找到 SDK Manager. 点击 \"Configure\", 然后就能看到 \"SDK Manager\". \n\n    ![Android Studio欢迎界面](android-dev-env/sdk-manager.png)\n\n    > SDK Manager 还可以在 Android Studio 的 \"Preferences\" 菜单中找到. 具体路径是 Appearance & Behavior → System Settings → Android SDK. \n\n    ![Android 6.0](android-dev-env/Android-6.png)\n\n    在 SDK Manager 中选择 \"SDK Platforms\"选项卡, 然后在右下角勾选 \"Show Package Details\". 展开 Android 6.0 (Marshmallow) 选项, 确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具, 否则可能都看不到这个界面）: \n\n    - Android SDK Platform 28\n    - Intel x86 Atom_64 System Image（官方模拟器镜像文件, 使用非官方模拟器不需要安装此组件）\n\n    然后点击\"SDK Tools\"选项卡, 同样勾中右下角的\"Show Package Details\". 展开\"Android SDK Build-Tools\"选项, 确保选中了 React Native 所必须的 23.0.1 版本. 你可以同时安装多个其他版本, 然后还要勾选最底部的 Android Support Repository. \n\n    最后点击\"Apply\"来下载和安装这些组件. \n\n- #### 配置 ANDROID_HOME 环境变量\n\n    React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径, 从而正常进行编译. \n\n    具体的做法是把下面的命令加入到 ~/.bash_profile 文件中(使用bash在终端下使用`vi ~/.bash_profile`命令创建或编辑): \n    ```bash\n    # Windows\n    export ANDROID_HOME=$HOME/AppData/Local/Android/Sdk # 在 Android Studio 的 \"Preferences\" 菜单中查看 SDK 的真实路径, 具体是Appearance & Behavior → System Settings → Android SDK. \n    export PATH=$PATH:$ANDROID_HOME/build-tools\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    ```\n\n    保存后:\n    ```bash\n    source $HOME/.bash_profile # 使环境变量设置立即生效\n\n    echo $ANDROID_HOME # 检查此变量是否已正确设置\n    ```\n\n    ![](android-dev-env/SDK-HOME.png)\n\n- #### 最后可以通过Androd真机或者模拟器进行调试\n\n    1) 将真机用 usb 数据线连接到电脑, 然后遵照[在设备上运行](https://reactnative.cn/docs/0.55/running-on-device)这篇文档的说明操作即可.\n\n    2) 在 Android Studi 打开 \"AVD Manager\" 来查看可用的虚拟设备, 可点击\"Create Virtual Device...\", 然后选择所需的设备类型并点击\"Next\"来创建新的模拟设备\n\n\n\n[本文教程参考: Taro 搭建Android开发环境](https://nervjs.github.io/taro/docs/react-native.html#%E6%90%AD%E5%BB%BA-android-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83)","source":"_posts/android-dev-env.md","raw":"---\ntitle: 搭建Android开发环境\ndate: 2020-03-24 09:44:21\ntags:\n    - '配置'\n    - 'React Native'\ncategories: android\n---\n\n为了配合React Native端开发, 且处于Windows, 所以需要搭建Android开发环境. \n\n需要安装: Node, Watchman, 命令行工具, JDK, Android Studio. \n\n### Java Development Kit\n> React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）. \n\n[JDK下载地址](https://www.oracle.com/java/technologies/javase-jdk8-downloads.html)\n\n### Android 开发环境\n> 国内用户必须必须必须有稳定的翻墙工具, 否则在下载、安装、配置过程中会不断遭遇链接超时或断开, 无法进行开发工作. 若安装过程中出现报错等99%是无法正常翻墙造成. \n\n[购买服务并配置可看前一篇文章](./vultr-ss)\n\n- #### 安装 Android Studio\n\n    [下载安装 Android Studio](https://developer.android.com/studio/index.html)\n\n    安装界面中选择\"Custom\"选项, 确保选中了以下几项: \n    1) Android SDK\n    2) Android SDK Platform\n    3) Performance (Intel ® HAXM) ([AMD 处理器看这里](https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html))\n    4) Android Virtual Device\n\n    问题:\n\n    1) HAXM installation failed\n    ![HAXM安装失败](android-dev-env/HAXM-error.png)\n    Intel Virtualization Technology（VT-x）没有开启, 所以需要进入bios进行开启Intel Virtualization Technology（VT-x）的操作.\n    2) Unable to run Intel HAXM installer: Cannot start process, the working directory \n\n        Download HAXM directly from Intel website, [here](https://github.com/intel/haxm/releases/tag/v7.5.6)\n\n        因为在原来的开发中使用到了docker, 所以电脑已安装Hyper-v, 但是vt-x和Hyper-v不能共存所以会导致HAXM安装失败, 所以需要开发Android时需要关闭Hyper-v. [操作方法](https://blog.csdn.net/Coco_chun/article/details/90261678)\n\n        ```bash\n        bcdedit /set hypervisorlaunchtype off \n\n        // 之后重启电脑，这时候你再去安装haxm就可以了\n\n        // 重启hyper-v \n        bcdedit / set hypervisorlaunchtype auto\n        ```\n\n\n- #### 安装 Android SDK\n\n    Android Studio 默认会安装最新版本的 Android SDK. 目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本, RN 目前支持 android 4.1 以上设备）. 可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK. \n\n    可以在 Android Studio 的欢迎界面中找到 SDK Manager. 点击 \"Configure\", 然后就能看到 \"SDK Manager\". \n\n    ![Android Studio欢迎界面](android-dev-env/sdk-manager.png)\n\n    > SDK Manager 还可以在 Android Studio 的 \"Preferences\" 菜单中找到. 具体路径是 Appearance & Behavior → System Settings → Android SDK. \n\n    ![Android 6.0](android-dev-env/Android-6.png)\n\n    在 SDK Manager 中选择 \"SDK Platforms\"选项卡, 然后在右下角勾选 \"Show Package Details\". 展开 Android 6.0 (Marshmallow) 选项, 确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具, 否则可能都看不到这个界面）: \n\n    - Android SDK Platform 28\n    - Intel x86 Atom_64 System Image（官方模拟器镜像文件, 使用非官方模拟器不需要安装此组件）\n\n    然后点击\"SDK Tools\"选项卡, 同样勾中右下角的\"Show Package Details\". 展开\"Android SDK Build-Tools\"选项, 确保选中了 React Native 所必须的 23.0.1 版本. 你可以同时安装多个其他版本, 然后还要勾选最底部的 Android Support Repository. \n\n    最后点击\"Apply\"来下载和安装这些组件. \n\n- #### 配置 ANDROID_HOME 环境变量\n\n    React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径, 从而正常进行编译. \n\n    具体的做法是把下面的命令加入到 ~/.bash_profile 文件中(使用bash在终端下使用`vi ~/.bash_profile`命令创建或编辑): \n    ```bash\n    # Windows\n    export ANDROID_HOME=$HOME/AppData/Local/Android/Sdk # 在 Android Studio 的 \"Preferences\" 菜单中查看 SDK 的真实路径, 具体是Appearance & Behavior → System Settings → Android SDK. \n    export PATH=$PATH:$ANDROID_HOME/build-tools\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    ```\n\n    保存后:\n    ```bash\n    source $HOME/.bash_profile # 使环境变量设置立即生效\n\n    echo $ANDROID_HOME # 检查此变量是否已正确设置\n    ```\n\n    ![](android-dev-env/SDK-HOME.png)\n\n- #### 最后可以通过Androd真机或者模拟器进行调试\n\n    1) 将真机用 usb 数据线连接到电脑, 然后遵照[在设备上运行](https://reactnative.cn/docs/0.55/running-on-device)这篇文档的说明操作即可.\n\n    2) 在 Android Studi 打开 \"AVD Manager\" 来查看可用的虚拟设备, 可点击\"Create Virtual Device...\", 然后选择所需的设备类型并点击\"Next\"来创建新的模拟设备\n\n\n\n[本文教程参考: Taro 搭建Android开发环境](https://nervjs.github.io/taro/docs/react-native.html#%E6%90%AD%E5%BB%BA-android-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83)","slug":"android-dev-env","published":1,"updated":"2020-04-21T08:53:30.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrou0002e36k9v5qekvq","content":"<p>为了配合React Native端开发, 且处于Windows, 所以需要搭建Android开发环境. </p>\n<p>需要安装: Node, Watchman, 命令行工具, JDK, Android Studio. </p>\n<h3 id=\"Java-Development-Kit\"><a href=\"#Java-Development-Kit\" class=\"headerlink\" title=\"Java Development Kit\"></a>Java Development Kit</h3><blockquote>\n<p>React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）. </p>\n</blockquote>\n<p><a href=\"https://www.oracle.com/java/technologies/javase-jdk8-downloads.html\" target=\"_blank\" rel=\"noopener\">JDK下载地址</a></p>\n<h3 id=\"Android-开发环境\"><a href=\"#Android-开发环境\" class=\"headerlink\" title=\"Android 开发环境\"></a>Android 开发环境</h3><blockquote>\n<p>国内用户必须必须必须有稳定的翻墙工具, 否则在下载、安装、配置过程中会不断遭遇链接超时或断开, 无法进行开发工作. 若安装过程中出现报错等99%是无法正常翻墙造成. </p>\n</blockquote>\n<p><a href=\"./vultr-ss\">购买服务并配置可看前一篇文章</a></p>\n<ul>\n<li><h4 id=\"安装-Android-Studio\"><a href=\"#安装-Android-Studio\" class=\"headerlink\" title=\"安装 Android Studio\"></a>安装 Android Studio</h4><p>  <a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"noopener\">下载安装 Android Studio</a></p>\n<p>  安装界面中选择”Custom”选项, 确保选中了以下几项:<br>  1) Android SDK<br>  2) Android SDK Platform<br>  3) Performance (Intel ® HAXM) (<a href=\"https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html\" target=\"_blank\" rel=\"noopener\">AMD 处理器看这里</a>)<br>  4) Android Virtual Device</p>\n<p>  问题:</p>\n<p>  1) HAXM installation failed<br>  <img src=\"/2020/03/24/android-dev-env/HAXM-error.png\" alt=\"HAXM安装失败\"><br>  Intel Virtualization Technology（VT-x）没有开启, 所以需要进入bios进行开启Intel Virtualization Technology（VT-x）的操作.<br>  2) Unable to run Intel HAXM installer: Cannot start process, the working directory </p>\n<pre><code>Download HAXM directly from Intel website, [here](https://github.com/intel/haxm/releases/tag/v7.5.6)\n\n因为在原来的开发中使用到了docker, 所以电脑已安装Hyper-v, 但是vt-x和Hyper-v不能共存所以会导致HAXM安装失败, 所以需要开发Android时需要关闭Hyper-v. [操作方法](https://blog.csdn.net/Coco_chun/article/details/90261678)\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bcdedit /<span class=\"built_in\">set</span> hypervisorlaunchtype off </span><br><span class=\"line\"></span><br><span class=\"line\">// 之后重启电脑，这时候你再去安装haxm就可以了</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启hyper-v </span><br><span class=\"line\">bcdedit / <span class=\"built_in\">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><h4 id=\"安装-Android-SDK\"><a href=\"#安装-Android-SDK\" class=\"headerlink\" title=\"安装 Android SDK\"></a>安装 Android SDK</h4><p>  Android Studio 默认会安装最新版本的 Android SDK. 目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本, RN 目前支持 android 4.1 以上设备）. 可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK. </p>\n<p>  可以在 Android Studio 的欢迎界面中找到 SDK Manager. 点击 “Configure”, 然后就能看到 “SDK Manager”. </p>\n<p>  <img src=\"/2020/03/24/android-dev-env/sdk-manager.png\" alt=\"Android Studio欢迎界面\"></p>\n<blockquote>\n<p>SDK Manager 还可以在 Android Studio 的 “Preferences” 菜单中找到. 具体路径是 Appearance &amp; Behavior → System Settings → Android SDK. </p>\n</blockquote>\n<p>  <img src=\"/2020/03/24/android-dev-env/Android-6.png\" alt=\"Android 6.0\"></p>\n<p>  在 SDK Manager 中选择 “SDK Platforms”选项卡, 然后在右下角勾选 “Show Package Details”. 展开 Android 6.0 (Marshmallow) 选项, 确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具, 否则可能都看不到这个界面）: </p>\n<ul>\n<li>Android SDK Platform 28</li>\n<li><p>Intel x86 Atom_64 System Image（官方模拟器镜像文件, 使用非官方模拟器不需要安装此组件）</p>\n<p>然后点击”SDK Tools”选项卡, 同样勾中右下角的”Show Package Details”. 展开”Android SDK Build-Tools”选项, 确保选中了 React Native 所必须的 23.0.1 版本. 你可以同时安装多个其他版本, 然后还要勾选最底部的 Android Support Repository. </p>\n<p>最后点击”Apply”来下载和安装这些组件. </p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"配置-ANDROID-HOME-环境变量\"><a href=\"#配置-ANDROID-HOME-环境变量\" class=\"headerlink\" title=\"配置 ANDROID_HOME 环境变量\"></a>配置 ANDROID_HOME 环境变量</h4><p>  React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径, 从而正常进行编译. </p>\n<p>  具体的做法是把下面的命令加入到 ~/.bash_profile 文件中(使用bash在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑): </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=<span class=\"variable\">$HOME</span>/AppData/Local/Android/Sdk <span class=\"comment\"># 在 Android Studio 的 \"Preferences\" 菜单中查看 SDK 的真实路径, 具体是Appearance &amp; Behavior → System Settings → Android SDK. </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span>/build-tools</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure>\n<p>  保存后:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$HOME</span>/.bash_profile <span class=\"comment\"># 使环境变量设置立即生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ANDROID_HOME</span> <span class=\"comment\"># 检查此变量是否已正确设置</span></span><br></pre></td></tr></table></figure>\n<p>  <img src=\"/2020/03/24/android-dev-env/SDK-HOME.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"最后可以通过Androd真机或者模拟器进行调试\"><a href=\"#最后可以通过Androd真机或者模拟器进行调试\" class=\"headerlink\" title=\"最后可以通过Androd真机或者模拟器进行调试\"></a>最后可以通过Androd真机或者模拟器进行调试</h4><p>  1) 将真机用 usb 数据线连接到电脑, 然后遵照<a href=\"https://reactnative.cn/docs/0.55/running-on-device\" target=\"_blank\" rel=\"noopener\">在设备上运行</a>这篇文档的说明操作即可.</p>\n<p>  2) 在 Android Studi 打开 “AVD Manager” 来查看可用的虚拟设备, 可点击”Create Virtual Device…”, 然后选择所需的设备类型并点击”Next”来创建新的模拟设备</p>\n</li>\n</ul>\n<p><a href=\"https://nervjs.github.io/taro/docs/react-native.html#%E6%90%AD%E5%BB%BA-android-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\" target=\"_blank\" rel=\"noopener\">本文教程参考: Taro 搭建Android开发环境</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了配合React Native端开发, 且处于Windows, 所以需要搭建Android开发环境. </p>\n<p>需要安装: Node, Watchman, 命令行工具, JDK, Android Studio. </p>\n<h3 id=\"Java-Development-Kit\"><a href=\"#Java-Development-Kit\" class=\"headerlink\" title=\"Java Development Kit\"></a>Java Development Kit</h3><blockquote>\n<p>React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）. </p>\n</blockquote>\n<p><a href=\"https://www.oracle.com/java/technologies/javase-jdk8-downloads.html\" target=\"_blank\" rel=\"noopener\">JDK下载地址</a></p>\n<h3 id=\"Android-开发环境\"><a href=\"#Android-开发环境\" class=\"headerlink\" title=\"Android 开发环境\"></a>Android 开发环境</h3><blockquote>\n<p>国内用户必须必须必须有稳定的翻墙工具, 否则在下载、安装、配置过程中会不断遭遇链接超时或断开, 无法进行开发工作. 若安装过程中出现报错等99%是无法正常翻墙造成. </p>\n</blockquote>\n<p><a href=\"./vultr-ss\">购买服务并配置可看前一篇文章</a></p>\n<ul>\n<li><h4 id=\"安装-Android-Studio\"><a href=\"#安装-Android-Studio\" class=\"headerlink\" title=\"安装 Android Studio\"></a>安装 Android Studio</h4><p>  <a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"noopener\">下载安装 Android Studio</a></p>\n<p>  安装界面中选择”Custom”选项, 确保选中了以下几项:<br>  1) Android SDK<br>  2) Android SDK Platform<br>  3) Performance (Intel ® HAXM) (<a href=\"https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html\" target=\"_blank\" rel=\"noopener\">AMD 处理器看这里</a>)<br>  4) Android Virtual Device</p>\n<p>  问题:</p>\n<p>  1) HAXM installation failed<br>  <img src=\"/2020/03/24/android-dev-env/HAXM-error.png\" alt=\"HAXM安装失败\"><br>  Intel Virtualization Technology（VT-x）没有开启, 所以需要进入bios进行开启Intel Virtualization Technology（VT-x）的操作.<br>  2) Unable to run Intel HAXM installer: Cannot start process, the working directory </p>\n<pre><code>Download HAXM directly from Intel website, [here](https://github.com/intel/haxm/releases/tag/v7.5.6)\n\n因为在原来的开发中使用到了docker, 所以电脑已安装Hyper-v, 但是vt-x和Hyper-v不能共存所以会导致HAXM安装失败, 所以需要开发Android时需要关闭Hyper-v. [操作方法](https://blog.csdn.net/Coco_chun/article/details/90261678)\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bcdedit /<span class=\"built_in\">set</span> hypervisorlaunchtype off </span><br><span class=\"line\"></span><br><span class=\"line\">// 之后重启电脑，这时候你再去安装haxm就可以了</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启hyper-v </span><br><span class=\"line\">bcdedit / <span class=\"built_in\">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><h4 id=\"安装-Android-SDK\"><a href=\"#安装-Android-SDK\" class=\"headerlink\" title=\"安装 Android SDK\"></a>安装 Android SDK</h4><p>  Android Studio 默认会安装最新版本的 Android SDK. 目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本, RN 目前支持 android 4.1 以上设备）. 可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK. </p>\n<p>  可以在 Android Studio 的欢迎界面中找到 SDK Manager. 点击 “Configure”, 然后就能看到 “SDK Manager”. </p>\n<p>  <img src=\"/2020/03/24/android-dev-env/sdk-manager.png\" alt=\"Android Studio欢迎界面\"></p>\n<blockquote>\n<p>SDK Manager 还可以在 Android Studio 的 “Preferences” 菜单中找到. 具体路径是 Appearance &amp; Behavior → System Settings → Android SDK. </p>\n</blockquote>\n<p>  <img src=\"/2020/03/24/android-dev-env/Android-6.png\" alt=\"Android 6.0\"></p>\n<p>  在 SDK Manager 中选择 “SDK Platforms”选项卡, 然后在右下角勾选 “Show Package Details”. 展开 Android 6.0 (Marshmallow) 选项, 确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具, 否则可能都看不到这个界面）: </p>\n<ul>\n<li>Android SDK Platform 28</li>\n<li><p>Intel x86 Atom_64 System Image（官方模拟器镜像文件, 使用非官方模拟器不需要安装此组件）</p>\n<p>然后点击”SDK Tools”选项卡, 同样勾中右下角的”Show Package Details”. 展开”Android SDK Build-Tools”选项, 确保选中了 React Native 所必须的 23.0.1 版本. 你可以同时安装多个其他版本, 然后还要勾选最底部的 Android Support Repository. </p>\n<p>最后点击”Apply”来下载和安装这些组件. </p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"配置-ANDROID-HOME-环境变量\"><a href=\"#配置-ANDROID-HOME-环境变量\" class=\"headerlink\" title=\"配置 ANDROID_HOME 环境变量\"></a>配置 ANDROID_HOME 环境变量</h4><p>  React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径, 从而正常进行编译. </p>\n<p>  具体的做法是把下面的命令加入到 ~/.bash_profile 文件中(使用bash在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑): </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=<span class=\"variable\">$HOME</span>/AppData/Local/Android/Sdk <span class=\"comment\"># 在 Android Studio 的 \"Preferences\" 菜单中查看 SDK 的真实路径, 具体是Appearance &amp; Behavior → System Settings → Android SDK. </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span>/build-tools</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure>\n<p>  保存后:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$HOME</span>/.bash_profile <span class=\"comment\"># 使环境变量设置立即生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ANDROID_HOME</span> <span class=\"comment\"># 检查此变量是否已正确设置</span></span><br></pre></td></tr></table></figure>\n<p>  <img src=\"/2020/03/24/android-dev-env/SDK-HOME.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"最后可以通过Androd真机或者模拟器进行调试\"><a href=\"#最后可以通过Androd真机或者模拟器进行调试\" class=\"headerlink\" title=\"最后可以通过Androd真机或者模拟器进行调试\"></a>最后可以通过Androd真机或者模拟器进行调试</h4><p>  1) 将真机用 usb 数据线连接到电脑, 然后遵照<a href=\"https://reactnative.cn/docs/0.55/running-on-device\" target=\"_blank\" rel=\"noopener\">在设备上运行</a>这篇文档的说明操作即可.</p>\n<p>  2) 在 Android Studi 打开 “AVD Manager” 来查看可用的虚拟设备, 可点击”Create Virtual Device…”, 然后选择所需的设备类型并点击”Next”来创建新的模拟设备</p>\n</li>\n</ul>\n<p><a href=\"https://nervjs.github.io/taro/docs/react-native.html#%E6%90%AD%E5%BB%BA-android-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\" target=\"_blank\" rel=\"noopener\">本文教程参考: Taro 搭建Android开发环境</a></p>\n"},{"title":"constructor & prototype","date":"2019-01-22T02:08:03.000Z","_content":"\n> 定义：constructor 是一个对象的属性，这个属性存在在此对象的 prototype 中, 指向此对象的构造函数。\n\n- constructor 是一个对象属性；\n- constructor 在 prototype 中；\n- constructor 指向构造函数；\n\n> prototype 是一个函数属性, 此属性同时也是一个对象, 保存着对象实例所共有的属性和方法。\n\n- prototype 是函数属性, 只要是函数, 就有 prototype 属性. 而不管是构造函数还是普通函数.\n- prototype 同时也是对象.\n- prototype 放的是公共的东西, 包括属性和方法.\n\n在 JavaScript 内将使用 function 定义的称为函数：\n\n```\nfunction Person(name) {\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\n```\n\n而对于 Person 还可以使用 new 操作符进行实例化，`var Lilei = new Person('Lilei');`，于是此时 Person 就类似于类，但是其没有关键字 class，所以就称之为类的构造函数。\n按照 javascript 的说法，function 定义的这个 Person 就是一个 Object（对象），而使用 function 生成的对象和使用 new 操作符生成的对象是不同的，function 定义的对象有 prototype（原型）属性，而 new 生成的对象没有该属性。\nprototype 属性是指向一个 prototype 对象的。\nprototype 对象中又有一个 constructor 属性，这个 constructor 属性同样指向一个 constructor 对象，而这个 constructor 对象恰恰就是这个 function 函数本身。\n\n```\nfunction Person(name) {\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\nvar Lilei = new Person('Lilei');\nconsole.log(Lilei.prototype); // undefined\nconsole.log(typeof Person.prototype); // Object\nconsole.log(Person.prototype.constructor);// function Person(name) {...}\n```\n\n```\n// type 1 （所有对象实例共享）\nPerson.prototype.getName = function(){\n    alert(this.name);\n}\nvar Meimei = new Person('Meimei');\nalert(obj.constructor == Person);// true\n// type 2\nPerson.prototype = {\n    getName: function(){\n        alert(this.name);\n    }\n}\nvar Meimei = new Person('Meimei');\nalert(obj.constructor == Person);// false\n// type2情况下就是将Person的prototype进行重写，导致原来的constructor被覆盖\nPerson.prototype = {\n    constructor: Person, // 强制指回Person\n    getName: function(){\n        alert(this.name);\n    }\n}\nvar Lilei = new Person('Lilei');\nvar Meimei = new Person('Meimei');\nLilei.getName(); // 'Lilei'\nMeimei.getName(); // 'Meimei'\nLilei.getName() == Meimei.getName(); // true\n```\n\n> 同时说说 this，定义是`this`就是函数赖以执行的对象：\n\n- this 是对象；\n- this 以来函数执行的上下文环境；\n- this 存在于函数内；\n\n```\nalert(this); // 全局环境，此时this指向window\nfunction Person(name) {\n    console.log(this);\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\nPerson('Lilei'); // 全局环境执行Person函数，this指向window\nvar Lilei = new Person('Lilei'); // 将Person作为构造函数实例化对象\n                                 // 此时this指向Object\n```\n\n```\nfunction Person2(){\n    alert(this.name);\n}\nPerson2(); // this指向window，所以输出了也就是window.name，此时未在窗口内定义name，所以为undefined\nfunction Person(name) {\n    this.name = name;\n    alert(this.name);\n}\nPerson('Lilei'); // 'Lilei'\nPerson2(); // 'Lilei'，两个函数都是对window.name进行操作，所以会互相影响\nvar person = new Person2();\nconsole.log(person); // undefined，this.name = Object.name\n```\n\n```\n// 综合例子\nvar Tinker = function(){\n    this.elements = [];\n};\n// 对Tinker定义一个对象，动态为对象原型增加方法\nTinker.fn = Tinker.prototype = {\n    constructor: Tinker,\n    extend: function(obj){\n        var p;\n        for(p in obj){\n            this.constructor.prototype[p] = obj[p];\n        }\n    }\n}\n// 为原型增加了get和each方法\nTinker.fn.extend({\n    get: function(){ // 查找页面内id元素\n        var length = arguments.length, i = 0;\n        for(; i < length; i++){\n            this.elements.push(document.getElementById(arguments[i])); \n        }\n        return this;\n    },\n    each: function(fn){ // 对所查找到的元素绑定方法\n        var i = 0, length = this.elements.length;\n        for(; i < length; i++){\n            fn.call(this.elements[i], i, this.elements[i]);\n        }\n        return this;\n    }\n});\n//假设有id = 'data', id = 'message'\nvar obj = new Tinker();\nobj.get('data', 'message').each(function(i, item){\n    this.style.color = 'red';\n})\n```\n","source":"_posts/constructor & prototype.md","raw":"---\ntitle: constructor & prototype\ndate: 2019-01-22 10:08:03 +0800\ntags: \n    - 'js基础'\ncategories: js\n---\n\n> 定义：constructor 是一个对象的属性，这个属性存在在此对象的 prototype 中, 指向此对象的构造函数。\n\n- constructor 是一个对象属性；\n- constructor 在 prototype 中；\n- constructor 指向构造函数；\n\n> prototype 是一个函数属性, 此属性同时也是一个对象, 保存着对象实例所共有的属性和方法。\n\n- prototype 是函数属性, 只要是函数, 就有 prototype 属性. 而不管是构造函数还是普通函数.\n- prototype 同时也是对象.\n- prototype 放的是公共的东西, 包括属性和方法.\n\n在 JavaScript 内将使用 function 定义的称为函数：\n\n```\nfunction Person(name) {\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\n```\n\n而对于 Person 还可以使用 new 操作符进行实例化，`var Lilei = new Person('Lilei');`，于是此时 Person 就类似于类，但是其没有关键字 class，所以就称之为类的构造函数。\n按照 javascript 的说法，function 定义的这个 Person 就是一个 Object（对象），而使用 function 生成的对象和使用 new 操作符生成的对象是不同的，function 定义的对象有 prototype（原型）属性，而 new 生成的对象没有该属性。\nprototype 属性是指向一个 prototype 对象的。\nprototype 对象中又有一个 constructor 属性，这个 constructor 属性同样指向一个 constructor 对象，而这个 constructor 对象恰恰就是这个 function 函数本身。\n\n```\nfunction Person(name) {\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\nvar Lilei = new Person('Lilei');\nconsole.log(Lilei.prototype); // undefined\nconsole.log(typeof Person.prototype); // Object\nconsole.log(Person.prototype.constructor);// function Person(name) {...}\n```\n\n```\n// type 1 （所有对象实例共享）\nPerson.prototype.getName = function(){\n    alert(this.name);\n}\nvar Meimei = new Person('Meimei');\nalert(obj.constructor == Person);// true\n// type 2\nPerson.prototype = {\n    getName: function(){\n        alert(this.name);\n    }\n}\nvar Meimei = new Person('Meimei');\nalert(obj.constructor == Person);// false\n// type2情况下就是将Person的prototype进行重写，导致原来的constructor被覆盖\nPerson.prototype = {\n    constructor: Person, // 强制指回Person\n    getName: function(){\n        alert(this.name);\n    }\n}\nvar Lilei = new Person('Lilei');\nvar Meimei = new Person('Meimei');\nLilei.getName(); // 'Lilei'\nMeimei.getName(); // 'Meimei'\nLilei.getName() == Meimei.getName(); // true\n```\n\n> 同时说说 this，定义是`this`就是函数赖以执行的对象：\n\n- this 是对象；\n- this 以来函数执行的上下文环境；\n- this 存在于函数内；\n\n```\nalert(this); // 全局环境，此时this指向window\nfunction Person(name) {\n    console.log(this);\n    this.name = name;\n    this.showMyName = function() {\n        alert(this.name);\n    }\n}\nPerson('Lilei'); // 全局环境执行Person函数，this指向window\nvar Lilei = new Person('Lilei'); // 将Person作为构造函数实例化对象\n                                 // 此时this指向Object\n```\n\n```\nfunction Person2(){\n    alert(this.name);\n}\nPerson2(); // this指向window，所以输出了也就是window.name，此时未在窗口内定义name，所以为undefined\nfunction Person(name) {\n    this.name = name;\n    alert(this.name);\n}\nPerson('Lilei'); // 'Lilei'\nPerson2(); // 'Lilei'，两个函数都是对window.name进行操作，所以会互相影响\nvar person = new Person2();\nconsole.log(person); // undefined，this.name = Object.name\n```\n\n```\n// 综合例子\nvar Tinker = function(){\n    this.elements = [];\n};\n// 对Tinker定义一个对象，动态为对象原型增加方法\nTinker.fn = Tinker.prototype = {\n    constructor: Tinker,\n    extend: function(obj){\n        var p;\n        for(p in obj){\n            this.constructor.prototype[p] = obj[p];\n        }\n    }\n}\n// 为原型增加了get和each方法\nTinker.fn.extend({\n    get: function(){ // 查找页面内id元素\n        var length = arguments.length, i = 0;\n        for(; i < length; i++){\n            this.elements.push(document.getElementById(arguments[i])); \n        }\n        return this;\n    },\n    each: function(fn){ // 对所查找到的元素绑定方法\n        var i = 0, length = this.elements.length;\n        for(; i < length; i++){\n            fn.call(this.elements[i], i, this.elements[i]);\n        }\n        return this;\n    }\n});\n//假设有id = 'data', id = 'message'\nvar obj = new Tinker();\nobj.get('data', 'message').each(function(i, item){\n    this.style.color = 'red';\n})\n```\n","slug":"constructor & prototype","published":1,"updated":"2020-04-21T08:53:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrox0006e36kteybpmsb","content":"<blockquote>\n<p>定义：constructor 是一个对象的属性，这个属性存在在此对象的 prototype 中, 指向此对象的构造函数。</p>\n</blockquote>\n<ul>\n<li>constructor 是一个对象属性；</li>\n<li>constructor 在 prototype 中；</li>\n<li>constructor 指向构造函数；</li>\n</ul>\n<blockquote>\n<p>prototype 是一个函数属性, 此属性同时也是一个对象, 保存着对象实例所共有的属性和方法。</p>\n</blockquote>\n<ul>\n<li>prototype 是函数属性, 只要是函数, 就有 prototype 属性. 而不管是构造函数还是普通函数.</li>\n<li>prototype 同时也是对象.</li>\n<li>prototype 放的是公共的东西, 包括属性和方法.</li>\n</ul>\n<p>在 JavaScript 内将使用 function 定义的称为函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而对于 Person 还可以使用 new 操作符进行实例化，<code>var Lilei = new Person(&#39;Lilei&#39;);</code>，于是此时 Person 就类似于类，但是其没有关键字 class，所以就称之为类的构造函数。<br>按照 javascript 的说法，function 定义的这个 Person 就是一个 Object（对象），而使用 function 生成的对象和使用 new 操作符生成的对象是不同的，function 定义的对象有 prototype（原型）属性，而 new 生成的对象没有该属性。<br>prototype 属性是指向一个 prototype 对象的。<br>prototype 对象中又有一个 constructor 属性，这个 constructor 属性同样指向一个 constructor 对象，而这个 constructor 对象恰恰就是这个 function 函数本身。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;);</span><br><span class=\"line\">console.log(Lilei.prototype); // undefined</span><br><span class=\"line\">console.log(typeof Person.prototype); // Object</span><br><span class=\"line\">console.log(Person.prototype.constructor);// function Person(name) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type 1 （所有对象实例共享）</span><br><span class=\"line\">Person.prototype.getName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">alert(obj.constructor == Person);// true</span><br><span class=\"line\">// type 2</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    getName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">alert(obj.constructor == Person);// false</span><br><span class=\"line\">// type2情况下就是将Person的prototype进行重写，导致原来的constructor被覆盖</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person, // 强制指回Person</span><br><span class=\"line\">    getName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;);</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">Lilei.getName(); // &apos;Lilei&apos;</span><br><span class=\"line\">Meimei.getName(); // &apos;Meimei&apos;</span><br><span class=\"line\">Lilei.getName() == Meimei.getName(); // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同时说说 this，定义是<code>this</code>就是函数赖以执行的对象：</p>\n</blockquote>\n<ul>\n<li>this 是对象；</li>\n<li>this 以来函数执行的上下文环境；</li>\n<li>this 存在于函数内；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(this); // 全局环境，此时this指向window</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(&apos;Lilei&apos;); // 全局环境执行Person函数，this指向window</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;); // 将Person作为构造函数实例化对象</span><br><span class=\"line\">                                 // 此时this指向Object</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person2()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person2(); // this指向window，所以输出了也就是window.name，此时未在窗口内定义name，所以为undefined</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(&apos;Lilei&apos;); // &apos;Lilei&apos;</span><br><span class=\"line\">Person2(); // &apos;Lilei&apos;，两个函数都是对window.name进行操作，所以会互相影响</span><br><span class=\"line\">var person = new Person2();</span><br><span class=\"line\">console.log(person); // undefined，this.name = Object.name</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 综合例子</span><br><span class=\"line\">var Tinker = function()&#123;</span><br><span class=\"line\">    this.elements = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 对Tinker定义一个对象，动态为对象原型增加方法</span><br><span class=\"line\">Tinker.fn = Tinker.prototype = &#123;</span><br><span class=\"line\">    constructor: Tinker,</span><br><span class=\"line\">    extend: function(obj)&#123;</span><br><span class=\"line\">        var p;</span><br><span class=\"line\">        for(p in obj)&#123;</span><br><span class=\"line\">            this.constructor.prototype[p] = obj[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为原型增加了get和each方法</span><br><span class=\"line\">Tinker.fn.extend(&#123;</span><br><span class=\"line\">    get: function()&#123; // 查找页面内id元素</span><br><span class=\"line\">        var length = arguments.length, i = 0;</span><br><span class=\"line\">        for(; i &lt; length; i++)&#123;</span><br><span class=\"line\">            this.elements.push(document.getElementById(arguments[i])); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    each: function(fn)&#123; // 对所查找到的元素绑定方法</span><br><span class=\"line\">        var i = 0, length = this.elements.length;</span><br><span class=\"line\">        for(; i &lt; length; i++)&#123;</span><br><span class=\"line\">            fn.call(this.elements[i], i, this.elements[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//假设有id = &apos;data&apos;, id = &apos;message&apos;</span><br><span class=\"line\">var obj = new Tinker();</span><br><span class=\"line\">obj.get(&apos;data&apos;, &apos;message&apos;).each(function(i, item)&#123;</span><br><span class=\"line\">    this.style.color = &apos;red&apos;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>定义：constructor 是一个对象的属性，这个属性存在在此对象的 prototype 中, 指向此对象的构造函数。</p>\n</blockquote>\n<ul>\n<li>constructor 是一个对象属性；</li>\n<li>constructor 在 prototype 中；</li>\n<li>constructor 指向构造函数；</li>\n</ul>\n<blockquote>\n<p>prototype 是一个函数属性, 此属性同时也是一个对象, 保存着对象实例所共有的属性和方法。</p>\n</blockquote>\n<ul>\n<li>prototype 是函数属性, 只要是函数, 就有 prototype 属性. 而不管是构造函数还是普通函数.</li>\n<li>prototype 同时也是对象.</li>\n<li>prototype 放的是公共的东西, 包括属性和方法.</li>\n</ul>\n<p>在 JavaScript 内将使用 function 定义的称为函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而对于 Person 还可以使用 new 操作符进行实例化，<code>var Lilei = new Person(&#39;Lilei&#39;);</code>，于是此时 Person 就类似于类，但是其没有关键字 class，所以就称之为类的构造函数。<br>按照 javascript 的说法，function 定义的这个 Person 就是一个 Object（对象），而使用 function 生成的对象和使用 new 操作符生成的对象是不同的，function 定义的对象有 prototype（原型）属性，而 new 生成的对象没有该属性。<br>prototype 属性是指向一个 prototype 对象的。<br>prototype 对象中又有一个 constructor 属性，这个 constructor 属性同样指向一个 constructor 对象，而这个 constructor 对象恰恰就是这个 function 函数本身。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;);</span><br><span class=\"line\">console.log(Lilei.prototype); // undefined</span><br><span class=\"line\">console.log(typeof Person.prototype); // Object</span><br><span class=\"line\">console.log(Person.prototype.constructor);// function Person(name) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type 1 （所有对象实例共享）</span><br><span class=\"line\">Person.prototype.getName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">alert(obj.constructor == Person);// true</span><br><span class=\"line\">// type 2</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    getName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">alert(obj.constructor == Person);// false</span><br><span class=\"line\">// type2情况下就是将Person的prototype进行重写，导致原来的constructor被覆盖</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person, // 强制指回Person</span><br><span class=\"line\">    getName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;);</span><br><span class=\"line\">var Meimei = new Person(&apos;Meimei&apos;);</span><br><span class=\"line\">Lilei.getName(); // &apos;Lilei&apos;</span><br><span class=\"line\">Meimei.getName(); // &apos;Meimei&apos;</span><br><span class=\"line\">Lilei.getName() == Meimei.getName(); // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同时说说 this，定义是<code>this</code>就是函数赖以执行的对象：</p>\n</blockquote>\n<ul>\n<li>this 是对象；</li>\n<li>this 以来函数执行的上下文环境；</li>\n<li>this 存在于函数内；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(this); // 全局环境，此时this指向window</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.showMyName = function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(&apos;Lilei&apos;); // 全局环境执行Person函数，this指向window</span><br><span class=\"line\">var Lilei = new Person(&apos;Lilei&apos;); // 将Person作为构造函数实例化对象</span><br><span class=\"line\">                                 // 此时this指向Object</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person2()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person2(); // this指向window，所以输出了也就是window.name，此时未在窗口内定义name，所以为undefined</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(&apos;Lilei&apos;); // &apos;Lilei&apos;</span><br><span class=\"line\">Person2(); // &apos;Lilei&apos;，两个函数都是对window.name进行操作，所以会互相影响</span><br><span class=\"line\">var person = new Person2();</span><br><span class=\"line\">console.log(person); // undefined，this.name = Object.name</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 综合例子</span><br><span class=\"line\">var Tinker = function()&#123;</span><br><span class=\"line\">    this.elements = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 对Tinker定义一个对象，动态为对象原型增加方法</span><br><span class=\"line\">Tinker.fn = Tinker.prototype = &#123;</span><br><span class=\"line\">    constructor: Tinker,</span><br><span class=\"line\">    extend: function(obj)&#123;</span><br><span class=\"line\">        var p;</span><br><span class=\"line\">        for(p in obj)&#123;</span><br><span class=\"line\">            this.constructor.prototype[p] = obj[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为原型增加了get和each方法</span><br><span class=\"line\">Tinker.fn.extend(&#123;</span><br><span class=\"line\">    get: function()&#123; // 查找页面内id元素</span><br><span class=\"line\">        var length = arguments.length, i = 0;</span><br><span class=\"line\">        for(; i &lt; length; i++)&#123;</span><br><span class=\"line\">            this.elements.push(document.getElementById(arguments[i])); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    each: function(fn)&#123; // 对所查找到的元素绑定方法</span><br><span class=\"line\">        var i = 0, length = this.elements.length;</span><br><span class=\"line\">        for(; i &lt; length; i++)&#123;</span><br><span class=\"line\">            fn.call(this.elements[i], i, this.elements[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//假设有id = &apos;data&apos;, id = &apos;message&apos;</span><br><span class=\"line\">var obj = new Tinker();</span><br><span class=\"line\">obj.get(&apos;data&apos;, &apos;message&apos;).each(function(i, item)&#123;</span><br><span class=\"line\">    this.style.color = &apos;red&apos;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"canvas 基础","date":"2019-02-19T02:35:44.000Z","_content":"\n### Canvas\n\n- 画布栅格\ncanvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。\n![](https://mdn.mozillademos.org/files/224/Canvas_default_grid.png)\n\n- 绘制矩形\n`fillRect(x, y, width, height)`: 绘制一个填充的矩形;\n`strokeRect(x, y, width, height)`: 绘制一个矩形的边框;\n`clearRect(x, y, width, height)`: 清除指定矩形区域，让清除部分完全透明;\nx与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标，width和height设置矩形的尺寸。\n\n- 绘制路径\n需要创建起点，绘制出路径，封闭路径，渲染路径区域。\n`beginPath()`: 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`: 闭合路径之后图形绘制命令又重新指向到上下文中。\n`stroke()`: 通过线条来绘制图形轮廓。\n`fill()`: 通过填充路径的内容区域生成实心的图形。","source":"_posts/canvas.md","raw":"---\ntitle: canvas 基础\ndate: 2019-02-19 10:35:44\ntags: \n    - 'canvas'\ncategories: HTML\n---\n\n### Canvas\n\n- 画布栅格\ncanvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。\n![](https://mdn.mozillademos.org/files/224/Canvas_default_grid.png)\n\n- 绘制矩形\n`fillRect(x, y, width, height)`: 绘制一个填充的矩形;\n`strokeRect(x, y, width, height)`: 绘制一个矩形的边框;\n`clearRect(x, y, width, height)`: 清除指定矩形区域，让清除部分完全透明;\nx与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标，width和height设置矩形的尺寸。\n\n- 绘制路径\n需要创建起点，绘制出路径，封闭路径，渲染路径区域。\n`beginPath()`: 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`: 闭合路径之后图形绘制命令又重新指向到上下文中。\n`stroke()`: 通过线条来绘制图形轮廓。\n`fill()`: 通过填充路径的内容区域生成实心的图形。","slug":"canvas","published":1,"updated":"2020-04-21T08:53:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxroz0008e36kcd4x86i4","content":"<h3 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h3><ul>\n<li><p>画布栅格<br>canvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。<br><img src=\"https://mdn.mozillademos.org/files/224/Canvas_default_grid.png\" alt=\"\"></p>\n</li>\n<li><p>绘制矩形<br><code>fillRect(x, y, width, height)</code>: 绘制一个填充的矩形;<br><code>strokeRect(x, y, width, height)</code>: 绘制一个矩形的边框;<br><code>clearRect(x, y, width, height)</code>: 清除指定矩形区域，让清除部分完全透明;<br>x与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标，width和height设置矩形的尺寸。</p>\n</li>\n<li><p>绘制路径<br>需要创建起点，绘制出路径，封闭路径，渲染路径区域。<br><code>beginPath()</code>: 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>: 闭合路径之后图形绘制命令又重新指向到上下文中。<br><code>stroke()</code>: 通过线条来绘制图形轮廓。<br><code>fill()</code>: 通过填充路径的内容区域生成实心的图形。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h3><ul>\n<li><p>画布栅格<br>canvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。<br><img src=\"https://mdn.mozillademos.org/files/224/Canvas_default_grid.png\" alt=\"\"></p>\n</li>\n<li><p>绘制矩形<br><code>fillRect(x, y, width, height)</code>: 绘制一个填充的矩形;<br><code>strokeRect(x, y, width, height)</code>: 绘制一个矩形的边框;<br><code>clearRect(x, y, width, height)</code>: 清除指定矩形区域，让清除部分完全透明;<br>x与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标，width和height设置矩形的尺寸。</p>\n</li>\n<li><p>绘制路径<br>需要创建起点，绘制出路径，封闭路径，渲染路径区域。<br><code>beginPath()</code>: 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>: 闭合路径之后图形绘制命令又重新指向到上下文中。<br><code>stroke()</code>: 通过线条来绘制图形轮廓。<br><code>fill()</code>: 通过填充路径的内容区域生成实心的图形。</p>\n</li>\n</ul>\n"},{"title":"easywebpack (yuque easy-team)","date":"2020-04-19T06:17:42.000Z","_content":"\n> 基于 Webpack 的前端构建工程化解决方案 <br>\n> A Simple, Powerful Wepback Front-End Development Solution\n\n### 简单配置\n\n- 基本配置\n\n  ```js\n  // ${app_root}/webpack.config.js\n  module.exports = {\n      // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n      framework: 'html' // 增强配置，告诉 easywebpack 使用 easywebpack-html 方案\n      entry:{\n          home: 'src/home/home.js'\n      }\n  }\n  ```\n\n- 常用模板配置\n\n  ```js\n    // ${app_root}/webpack.config.js\n    module.exports = {\n      // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n      framework: 'html' // 扩展配置\n      entry:{\n          home: 'src/home/home.js'\n      },\n      module:{\n          rules:[] // 默认可以不用配置, 添加或扩展请见配置 loaders 章节\n      },\n      pugins:[], // 默认可以不用配置, 添加或扩展请见配置 plugins 章节\n      done(){\n          // Webpack 编译完成回调, 默认可以不用配置,当你需要编译完成做某某事情(比如上传 cdn)才需要配置\n      },\n      // 结合webpack原生节点\n      externals: {\n          jquery: 'window.$'\n      },\n      resolve:{\n          alias:{},\n          extensions:[]\n      },\n  }\n  ```\n\n### 获取 webpack 原生配置\n\n```js\nconst easy = require(\"easywebpack\");\nconst webpackConfig = easy.getWebpackConfig({\n  env: process.env.BUILD_ENV, // 支持dev, test, prod 模式\n  target: \"web\",\n  entry: {\n    app: \"src/lib.js\",\n  },\n});\n```\n\n根据不同的前端渲染方法:\n\n- `const easy = require('easywebpack-vue');`\n- `const easy = require('easywebpack-react');`\n- `const easy = require('easywebpack-html');`\n- `const easy = require('easywebpack-js');`\n- `const EasyWebpack = require('easywebpack-weex');`\n\n```js\n// ${app_root}/webpack.config.js\nmodule.exports = {\n  // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n  framework: 'html'\n  entry:{\n    index: 'src/app.js'\n  },\n  template: 'src/view/layout.html'\n  loaders:{},\n  pugins:{},\n  customize(webpackConfig){ // 非必须\n    // 此处 webpackConfig 为原生的 webpackconfig, 你可以进行加工处理\n    return webpackConfig;\n  }\n  done(){}\n}\n```\n\n上述配置就可以支持一下功能:\n\n- 支持 `easy start` 方式启动 Webpack dev server\n- 支持 easy build dev/test/prod 三种环境构建\n- 支持纯静态 HTML Webpack 构建\n- 支持 es6, babel, sass, postcss, eslint 能力\n- 支持开发期热更新能力,同时 Webpack 构建文件不落地磁盘\n- 支持编译结果 UI 展示和访问\n- 支持图片压缩, js 压缩, css 压缩, extract 能力\n- 通过 `easy build` 即可构建发布模式\n\n在使用`webpack`时经常还会用到`babel, postcss`等:\n\n```js\n// ${app_root}/.babelrc\n{\n  \"presets\": [[\"env\",{ \"modules\": false }]],\n  \"plugins\": [\n    \"transform-object-rest-spread\",\n    \"syntax-dynamic-import\",\n    \"transform-object-assign\"\n  ],\n  \"comments\": false\n}\n```\n\n```js\n// ${app_root}/postcss.config.js\n'use strict';\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')({ browsers: ['iOS >= 7', 'Android >= 4.0'] })\n  ]\n};\n```\n\n#### entry\n\n> `config.entry` webpack构建入口配置\n\n### 脚手架\n\n使用基于 easywebpack 前端工程化解决方案构建的脚手架 [easywebpack-cli](https://github.com/easy-team/easywebpack-cli) 初始化各种项目, 目前支持如下骨架项目:\n\n- [multiple-html-boilerplate](https://github.com/hubcarl/easywebpack-multiple-html-boilerplate)  纯静态 Webpack + HTML + 页面构建项目骨架\n\n- [vue-client-render-boilerplate](https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/vue)  基于 Vue + Webpack 前端渲染的项目骨架\n\n- [react-client-render-boilerplate](https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/react)  基于 React + Webpack 前端渲染的项目骨架\n\n- [egg-vue-webpack-boilerplate](https://github.com/hubcarl/egg-vue-webpack-boilerplate)  基于 Egg + Vue + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-react-webpack-boilerplate](https://github.com/hubcarl/egg-react-webpack-boilerplate) Egg + React + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-vue-typescript-boilerplate](https://github.com/hubcarl/egg-vue-webpack-boilerplate)  基于 Egg + Vue + TypesScript + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-react-typescript-boilerplate](https://github.com/hubcarl/egg-react-webpack-boilerplate) Egg + React + TypesScript + Webpack 服务端和客户端渲染项目骨架\n\n- [easywebpack-weex-boilerplate](https://github.com/hubcarl/easywebpack-weex-boilerplate)  基于 Weex Native 端和 Web 端构建解决方案渲染项目骨架\n","source":"_posts/easy-study.md","raw":"---\ntitle: easywebpack (yuque easy-team)\ndate: 2020-04-19 14:17:42\ntags:\n  - 从入门到放弃\n  - js\ncategories:\n  - webpack\n---\n\n> 基于 Webpack 的前端构建工程化解决方案 <br>\n> A Simple, Powerful Wepback Front-End Development Solution\n\n### 简单配置\n\n- 基本配置\n\n  ```js\n  // ${app_root}/webpack.config.js\n  module.exports = {\n      // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n      framework: 'html' // 增强配置，告诉 easywebpack 使用 easywebpack-html 方案\n      entry:{\n          home: 'src/home/home.js'\n      }\n  }\n  ```\n\n- 常用模板配置\n\n  ```js\n    // ${app_root}/webpack.config.js\n    module.exports = {\n      // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n      framework: 'html' // 扩展配置\n      entry:{\n          home: 'src/home/home.js'\n      },\n      module:{\n          rules:[] // 默认可以不用配置, 添加或扩展请见配置 loaders 章节\n      },\n      pugins:[], // 默认可以不用配置, 添加或扩展请见配置 plugins 章节\n      done(){\n          // Webpack 编译完成回调, 默认可以不用配置,当你需要编译完成做某某事情(比如上传 cdn)才需要配置\n      },\n      // 结合webpack原生节点\n      externals: {\n          jquery: 'window.$'\n      },\n      resolve:{\n          alias:{},\n          extensions:[]\n      },\n  }\n  ```\n\n### 获取 webpack 原生配置\n\n```js\nconst easy = require(\"easywebpack\");\nconst webpackConfig = easy.getWebpackConfig({\n  env: process.env.BUILD_ENV, // 支持dev, test, prod 模式\n  target: \"web\",\n  entry: {\n    app: \"src/lib.js\",\n  },\n});\n```\n\n根据不同的前端渲染方法:\n\n- `const easy = require('easywebpack-vue');`\n- `const easy = require('easywebpack-react');`\n- `const easy = require('easywebpack-html');`\n- `const easy = require('easywebpack-js');`\n- `const EasyWebpack = require('easywebpack-weex');`\n\n```js\n// ${app_root}/webpack.config.js\nmodule.exports = {\n  // framework 支持 `js`,`html`, `vue`, `react`, `weex`\n  framework: 'html'\n  entry:{\n    index: 'src/app.js'\n  },\n  template: 'src/view/layout.html'\n  loaders:{},\n  pugins:{},\n  customize(webpackConfig){ // 非必须\n    // 此处 webpackConfig 为原生的 webpackconfig, 你可以进行加工处理\n    return webpackConfig;\n  }\n  done(){}\n}\n```\n\n上述配置就可以支持一下功能:\n\n- 支持 `easy start` 方式启动 Webpack dev server\n- 支持 easy build dev/test/prod 三种环境构建\n- 支持纯静态 HTML Webpack 构建\n- 支持 es6, babel, sass, postcss, eslint 能力\n- 支持开发期热更新能力,同时 Webpack 构建文件不落地磁盘\n- 支持编译结果 UI 展示和访问\n- 支持图片压缩, js 压缩, css 压缩, extract 能力\n- 通过 `easy build` 即可构建发布模式\n\n在使用`webpack`时经常还会用到`babel, postcss`等:\n\n```js\n// ${app_root}/.babelrc\n{\n  \"presets\": [[\"env\",{ \"modules\": false }]],\n  \"plugins\": [\n    \"transform-object-rest-spread\",\n    \"syntax-dynamic-import\",\n    \"transform-object-assign\"\n  ],\n  \"comments\": false\n}\n```\n\n```js\n// ${app_root}/postcss.config.js\n'use strict';\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')({ browsers: ['iOS >= 7', 'Android >= 4.0'] })\n  ]\n};\n```\n\n#### entry\n\n> `config.entry` webpack构建入口配置\n\n### 脚手架\n\n使用基于 easywebpack 前端工程化解决方案构建的脚手架 [easywebpack-cli](https://github.com/easy-team/easywebpack-cli) 初始化各种项目, 目前支持如下骨架项目:\n\n- [multiple-html-boilerplate](https://github.com/hubcarl/easywebpack-multiple-html-boilerplate)  纯静态 Webpack + HTML + 页面构建项目骨架\n\n- [vue-client-render-boilerplate](https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/vue)  基于 Vue + Webpack 前端渲染的项目骨架\n\n- [react-client-render-boilerplate](https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/react)  基于 React + Webpack 前端渲染的项目骨架\n\n- [egg-vue-webpack-boilerplate](https://github.com/hubcarl/egg-vue-webpack-boilerplate)  基于 Egg + Vue + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-react-webpack-boilerplate](https://github.com/hubcarl/egg-react-webpack-boilerplate) Egg + React + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-vue-typescript-boilerplate](https://github.com/hubcarl/egg-vue-webpack-boilerplate)  基于 Egg + Vue + TypesScript + Webpack 服务端和客户端渲染项目骨架\n\n- [egg-react-typescript-boilerplate](https://github.com/hubcarl/egg-react-webpack-boilerplate) Egg + React + TypesScript + Webpack 服务端和客户端渲染项目骨架\n\n- [easywebpack-weex-boilerplate](https://github.com/hubcarl/easywebpack-weex-boilerplate)  基于 Weex Native 端和 Web 端构建解决方案渲染项目骨架\n","slug":"easy-study","published":1,"updated":"2020-04-22T02:15:01.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp0000ae36k2puv5f7j","content":"<blockquote>\n<p>基于 Webpack 的前端构建工程化解决方案 <br><br>A Simple, Powerful Wepback Front-End Development Solution</p>\n</blockquote>\n<h3 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h3><ul>\n<li><p>基本配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">    framework: <span class=\"string\">'html'</span> <span class=\"comment\">// 增强配置，告诉 easywebpack 使用 easywebpack-html 方案</span></span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        home: <span class=\"string\">'src/home/home.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用模板配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">    framework: <span class=\"string\">'html'</span> <span class=\"comment\">// 扩展配置</span></span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        home: <span class=\"string\">'src/home/home.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[] <span class=\"comment\">// 默认可以不用配置, 添加或扩展请见配置 loaders 章节</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pugins:[], <span class=\"comment\">// 默认可以不用配置, 添加或扩展请见配置 plugins 章节</span></span><br><span class=\"line\">    done()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Webpack 编译完成回调, 默认可以不用配置,当你需要编译完成做某某事情(比如上传 cdn)才需要配置</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 结合webpack原生节点</span></span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">'window.$'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        alias:&#123;&#125;,</span><br><span class=\"line\">        extensions:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"获取-webpack-原生配置\"><a href=\"#获取-webpack-原生配置\" class=\"headerlink\" title=\"获取 webpack 原生配置\"></a>获取 webpack 原生配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> easy = <span class=\"built_in\">require</span>(<span class=\"string\">\"easywebpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = easy.getWebpackConfig(&#123;</span><br><span class=\"line\">  env: process.env.BUILD_ENV, <span class=\"comment\">// 支持dev, test, prod 模式</span></span><br><span class=\"line\">  target: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">\"src/lib.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据不同的前端渲染方法:</p>\n<ul>\n<li><code>const easy = require(&#39;easywebpack-vue&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-react&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-html&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-js&#39;);</code></li>\n<li><code>const EasyWebpack = require(&#39;easywebpack-weex&#39;);</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">  framework: <span class=\"string\">'html'</span></span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    index: <span class=\"string\">'src/app.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'src/view/layout.html'</span></span><br><span class=\"line\">  loaders:&#123;&#125;,</span><br><span class=\"line\">  pugins:&#123;&#125;,</span><br><span class=\"line\">  customize(webpackConfig)&#123; <span class=\"comment\">// 非必须</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处 webpackConfig 为原生的 webpackconfig, 你可以进行加工处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> webpackConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  done()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述配置就可以支持一下功能:</p>\n<ul>\n<li>支持 <code>easy start</code> 方式启动 Webpack dev server</li>\n<li>支持 easy build dev/test/prod 三种环境构建</li>\n<li>支持纯静态 HTML Webpack 构建</li>\n<li>支持 es6, babel, sass, postcss, eslint 能力</li>\n<li>支持开发期热更新能力,同时 Webpack 构建文件不落地磁盘</li>\n<li>支持编译结果 UI 展示和访问</li>\n<li>支持图片压缩, js 压缩, css 压缩, extract 能力</li>\n<li>通过 <code>easy build</code> 即可构建发布模式</li>\n</ul>\n<p>在使用<code>webpack</code>时经常还会用到<code>babel, postcss</code>等:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/.babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [[<span class=\"string\">\"env\"</span>,&#123; <span class=\"string\">\"modules\"</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"transform-object-rest-spread\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"syntax-dynamic-import\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transform-object-assign\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"comments\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/postcss.config.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)(&#123; <span class=\"attr\">browsers</span>: [<span class=\"string\">'iOS &gt;= 7'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>] &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h4><blockquote>\n<p><code>config.entry</code> webpack构建入口配置</p>\n</blockquote>\n<h3 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h3><p>使用基于 easywebpack 前端工程化解决方案构建的脚手架 <a href=\"https://github.com/easy-team/easywebpack-cli\" target=\"_blank\" rel=\"noopener\">easywebpack-cli</a> 初始化各种项目, 目前支持如下骨架项目:</p>\n<ul>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-multiple-html-boilerplate\" target=\"_blank\" rel=\"noopener\">multiple-html-boilerplate</a>  纯静态 Webpack + HTML + 页面构建项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/vue\" target=\"_blank\" rel=\"noopener\">vue-client-render-boilerplate</a>  基于 Vue + Webpack 前端渲染的项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/react\" target=\"_blank\" rel=\"noopener\">react-client-render-boilerplate</a>  基于 React + Webpack 前端渲染的项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-vue-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-vue-webpack-boilerplate</a>  基于 Egg + Vue + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-react-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-react-webpack-boilerplate</a> Egg + React + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-vue-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-vue-typescript-boilerplate</a>  基于 Egg + Vue + TypesScript + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-react-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-react-typescript-boilerplate</a> Egg + React + TypesScript + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-weex-boilerplate\" target=\"_blank\" rel=\"noopener\">easywebpack-weex-boilerplate</a>  基于 Weex Native 端和 Web 端构建解决方案渲染项目骨架</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>基于 Webpack 的前端构建工程化解决方案 <br><br>A Simple, Powerful Wepback Front-End Development Solution</p>\n</blockquote>\n<h3 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h3><ul>\n<li><p>基本配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">    framework: <span class=\"string\">'html'</span> <span class=\"comment\">// 增强配置，告诉 easywebpack 使用 easywebpack-html 方案</span></span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        home: <span class=\"string\">'src/home/home.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用模板配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">    framework: <span class=\"string\">'html'</span> <span class=\"comment\">// 扩展配置</span></span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        home: <span class=\"string\">'src/home/home.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[] <span class=\"comment\">// 默认可以不用配置, 添加或扩展请见配置 loaders 章节</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pugins:[], <span class=\"comment\">// 默认可以不用配置, 添加或扩展请见配置 plugins 章节</span></span><br><span class=\"line\">    done()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Webpack 编译完成回调, 默认可以不用配置,当你需要编译完成做某某事情(比如上传 cdn)才需要配置</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 结合webpack原生节点</span></span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">'window.$'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        alias:&#123;&#125;,</span><br><span class=\"line\">        extensions:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"获取-webpack-原生配置\"><a href=\"#获取-webpack-原生配置\" class=\"headerlink\" title=\"获取 webpack 原生配置\"></a>获取 webpack 原生配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> easy = <span class=\"built_in\">require</span>(<span class=\"string\">\"easywebpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = easy.getWebpackConfig(&#123;</span><br><span class=\"line\">  env: process.env.BUILD_ENV, <span class=\"comment\">// 支持dev, test, prod 模式</span></span><br><span class=\"line\">  target: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">\"src/lib.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据不同的前端渲染方法:</p>\n<ul>\n<li><code>const easy = require(&#39;easywebpack-vue&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-react&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-html&#39;);</code></li>\n<li><code>const easy = require(&#39;easywebpack-js&#39;);</code></li>\n<li><code>const EasyWebpack = require(&#39;easywebpack-weex&#39;);</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// framework 支持 `js`,`html`, `vue`, `react`, `weex`</span></span><br><span class=\"line\">  framework: <span class=\"string\">'html'</span></span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    index: <span class=\"string\">'src/app.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'src/view/layout.html'</span></span><br><span class=\"line\">  loaders:&#123;&#125;,</span><br><span class=\"line\">  pugins:&#123;&#125;,</span><br><span class=\"line\">  customize(webpackConfig)&#123; <span class=\"comment\">// 非必须</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处 webpackConfig 为原生的 webpackconfig, 你可以进行加工处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> webpackConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  done()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述配置就可以支持一下功能:</p>\n<ul>\n<li>支持 <code>easy start</code> 方式启动 Webpack dev server</li>\n<li>支持 easy build dev/test/prod 三种环境构建</li>\n<li>支持纯静态 HTML Webpack 构建</li>\n<li>支持 es6, babel, sass, postcss, eslint 能力</li>\n<li>支持开发期热更新能力,同时 Webpack 构建文件不落地磁盘</li>\n<li>支持编译结果 UI 展示和访问</li>\n<li>支持图片压缩, js 压缩, css 压缩, extract 能力</li>\n<li>通过 <code>easy build</code> 即可构建发布模式</li>\n</ul>\n<p>在使用<code>webpack</code>时经常还会用到<code>babel, postcss</code>等:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/.babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [[<span class=\"string\">\"env\"</span>,&#123; <span class=\"string\">\"modules\"</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"transform-object-rest-spread\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"syntax-dynamic-import\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transform-object-assign\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"comments\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $&#123;app_root&#125;/postcss.config.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)(&#123; <span class=\"attr\">browsers</span>: [<span class=\"string\">'iOS &gt;= 7'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>] &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h4><blockquote>\n<p><code>config.entry</code> webpack构建入口配置</p>\n</blockquote>\n<h3 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h3><p>使用基于 easywebpack 前端工程化解决方案构建的脚手架 <a href=\"https://github.com/easy-team/easywebpack-cli\" target=\"_blank\" rel=\"noopener\">easywebpack-cli</a> 初始化各种项目, 目前支持如下骨架项目:</p>\n<ul>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-multiple-html-boilerplate\" target=\"_blank\" rel=\"noopener\">multiple-html-boilerplate</a>  纯静态 Webpack + HTML + 页面构建项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/vue\" target=\"_blank\" rel=\"noopener\">vue-client-render-boilerplate</a>  基于 Vue + Webpack 前端渲染的项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-cli-template/tree/master/boilerplate/react\" target=\"_blank\" rel=\"noopener\">react-client-render-boilerplate</a>  基于 React + Webpack 前端渲染的项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-vue-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-vue-webpack-boilerplate</a>  基于 Egg + Vue + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-react-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-react-webpack-boilerplate</a> Egg + React + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-vue-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-vue-typescript-boilerplate</a>  基于 Egg + Vue + TypesScript + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/egg-react-webpack-boilerplate\" target=\"_blank\" rel=\"noopener\">egg-react-typescript-boilerplate</a> Egg + React + TypesScript + Webpack 服务端和客户端渲染项目骨架</p>\n</li>\n<li><p><a href=\"https://github.com/hubcarl/easywebpack-weex-boilerplate\" target=\"_blank\" rel=\"noopener\">easywebpack-weex-boilerplate</a>  基于 Weex Native 端和 Web 端构建解决方案渲染项目骨架</p>\n</li>\n</ul>\n"},{"title":"egg-vue-webpack-boilerplate (yuque easy-team)","date":"2020-04-19T07:08:31.000Z","_content":"\n参考: [Egg Vue SSR/CSR 工程化](https://www.yuque.com/easy-team/egg-vue)\n\n> 基于 Egg + Vue + Webpack SSR 服务端渲染和 CSR 前端渲染工程骨架项目，包括前台系统(SSR MPA)和后台管理系统(SSR SPA)\n\n- Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。\n- 使用 TypeScript 或 JavaScript 编写前端和 Node 端代码，支持 ts-node 无编译 和 Webpack 编译开发模式。\n- 前端基于 Vue 框架，默认支持 Vue 服务端渲染，前端渲染模式，Asset 渲染，HTML 渲染多种渲染模式。\n- 集成 Css/Sass/Less/Stylus 以及 Css Module 多种样式编写构建支持， 可以按需选用。\n- 整合 Egg,  Webpack, TypeScript 构建工具，内置多进程，Webpack DLL 和缓存等编译提速解决方案，并提供强大的 CLI 开发工具。\n\n## Vue 服务端渲染（SSR - Server Side Render)\n\nVue 服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器，用户就能快速的看到内容. 服务端渲染的页面在浏览器里面你右键源代码可以看到完整的 HTML 页面结构, 包括 id='app' 节点里面所有内容； 而目前所说的 Vue 前端渲染你只能看到简单的 html, body, script 结构，id='app' 节点里面的实际内容在浏览器前端渲染出来的。\n\nVue 服务端渲染构建是需要构建两份 JSBundle 文件。SSR 模式开发时，SSR 运行需要 Webapck 单独构建 target: node 和 target: web 的 JSBundle，主要的差异在于 Webpack 需要处理 require 机制以及磨平 Node 和浏览器运行环境的差异。服务端的 JSBundle 用来生产 HTML，客户端的 JSBundle 需要 script 到文档，用来进行事件绑定等操作，也就是 Vue 的 hydrate 机制。\n\n本地构建是 Webpack 内存构建，文件不落地磁盘，所以 app/view 和 public 在本地开发时，是看不到文件的。 只有发布模式(npm run build)才能在这两个目录中看到构建后的内容。\n\n![](egg-vue-webpack-boilerplate/egg-vue_00.png)\n\n## Egg Vue SSR 发布模式渲染方式\n\n1. Webpack 通过本地构建或者 ci 直接构建好服务端文件和客户端资源文件到磁盘\n2. Egg render 直接读取本地文件, 然后渲染成 HTML\n3. 根据 manfifest.json 文件注入 jss/css 资源依赖注入\n4. 模板渲染完成, 服务器输出 HTML 内容给浏览器\n\n## 特性支持\n\n- 支持服务端渲染 SSR(Server Side Render), 前端渲染 CSR(Client Side Render) 方式<br />\n- 支持 Node 和 前端代码修改, Webpack 自动编译和热更新, `npm run dev` 一键启动应用<br />\n- 基于 vue + axios 多页面服务端渲染, 客户端渲染同构实现, 支持 asyncData 渲染<br />\n- 基于 vue + vuex + vue-router + axios 单页面服务器客户端同构实现<br />\n- 支持 js/css/image 资源依赖, 内置支持 CDN 特性, 支持 css/sass/less 样式编写<br />\n- 支持根据 .vue 文件自动创建 Webpack Entry 入口文件<br />\n- 开始支持多进程和缓存编译， 支持 Webpack dll 自动化构建, 与多进程编译结合，构建速度减少 2/3<br />\n- 支持 Vue 组件 import 异步加载, 具体实例请看[app/web/page/dynamic](https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/awesome/app/web/page/dynamic)<br />\n- 支持服务端渲染(SSR)失败时，自动降级为前端渲染(CSR)模式<br />\n- 提供 国际化 i18n 多语言支持方案<br />\n\n## 开发\n\n### easywebpack-cli 脚手架安装并初始化\n\n```bash\nnpm install easywebpack-cli -g\neasy init\nyarn\n```\n\n### 项目运行\n\n```bash\nnpm run dev   // egg-bin dev\n```\n\n- 启动 Egg 应用（读取 config/config.local.js 配置）\n- 启动 Webpack 构建, 构建文件存储在内存不落地磁盘(只在本地启动,  发布模式是提前构建好文件到磁盘)\n- 构建会同时启动两个 Webpack 构建服务, 客户端 js 构建端口 9000, 服务端端口 9001\n- 构建完成，Egg 应用正式可用，自动打开浏览器\n\n### 发布模式\n\n```bash\nnpm run build\n```\n\n1. 启动 Webpack 构建，文件落地磁盘\n2. 服务端构建的文件放到 `app/view` 目录\n3. 前端构建的文件放到 `public` 目录\n4. 生成的 `manifest.json` 放到 `config` 目录\n5. 构建的文件都是 gitignore 的，**部署时请注意把这些文件打包进去**\n\n```bash\nnpm start  // egg-scripts start\n```\n\n    非egg-scripts start方式启动时， 启动应用前， 设置EGG_SERVER_ENV环境变量，测试环境设置 test， 正式环境设置 prod。\n\n### 项目构建\n\n构建会根据 webpackConfigList.length 启动对应个数的 Webpack 编译实例，这里会同时启动两个 Webpack 构建服务, 客户端 jsbundle 构建，端口 9000, 服务端 jsbundle 构建端口 9001。默认端口为 9000, 端口依次递增。\n\n```js\n// config/config.local.js 本地 npm start 使用\nconst EasyWebpack = require(\"easywebpack-vue\");\nexports.webpack = {\n  webpackConfigList: EasyWebpack.getWebpackConfig(),\n};\n```\n\napp/web/page 目录中所有 .vue 文件当作 Webpack 构建入口是采用 app/web/framework/vue/entry 的 client-loader.js 和 server-loader.js 模板实现的，这个需要结合 webpack.config.js 下的 entry.loader 使用。\n\n```js\nentry: {\n   include: ['app/web/page'],\n   exclude: ['app/web/page/[a-z]+/component', 'app/web/page/app'],\n   loader: { // 如果没有配置loader模板，默认使用 .js 文件作为构建入口\n      client: 'app/web/framework/vue/entry/client-loader.js',\n      server: 'app/web/framework/vue/entry/server-loader.js',\n   }\n}\n```\n\nVue 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 vue 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个 vue 文件，vue 关联的组件可以放到 widget 或者 compnent 目录。如果非要放到当前目录，请配置 webpack.config.js entry.exclude 排除 vue 文件。\n\n### 多页面服务端渲染\n\n#### 多页面前端页面实现\n\nWebpack 自动根据.vue 文件创建 entry 入口, webpack.config.js, home.vue 编写界面逻辑。\n\n#### 多页面其他渲染实现\n\n- 创建 controller 文件 home.js\n\n  ```js\n  // 多页面后端渲染实现, 通过 egg-view-vue-ssr 插件 render 方法实现\n  exports.index = function* (ctx) {\n    yield ctx.render(\"home/home.js\", { message: \"vue server side render!\" });\n  };\n\n  // 多页面走前端渲染(后端路由)实现, 通过 egg-view-vue-ssr 插件 renderClient 方法实现\n  exports.client = function* (ctx) {\n    yield ctx.renderClient(\"home/home.js\", {\n      message: \"vue server side render!\",\n    });\n  };\n  ```\n\n  yield 了解: [js 的关键词 yield](/2020/04/19/js-yield/)\n\n- 添加路由配置\n\n  ```js\n  app.get(\"/home\", app.controller.home.index);\n  ```\n\n### HTML 静态页面前端渲染\n\n- 直接有 easywebpack 构建出静态 HTML 文件, 请见 webpack.config.js 配置和 app/web/page/html 代码实现\n- 通过 egg-static 静态文件访问 HTML 文件\n\n### 单页面服务器渲染同构实现\n\n- 单页面前端实现\n\n  在 app/web/page 目录下面创建 app 目录, app.vue, app.js 文件, 引入根页面和 router 等\n\n- 单页面后端实现\n\n  - 创建 controller 文件 app.js\n\n    ```javascript\n    exports.index = function* (ctx) {\n      yield ctx.render(\"app/app.js\", { url: this.url.replace(/\\/app/, \"\") });\n    };\n    ```\n\n  - 添加路由配置\n\n    ```javascript\n    app.get(\"/app(/.+)?\", app.controller.app.app.index);\n    ```\n\n### 构建目录\n\n- Webpack 构建服务端(Node) JSBundle 运行文件, 构建的服务端渲染模板文件位置 `${app_root}/app/view`\n\n- Webpack 构建浏览器 JSBundle 运行文件, 构建的前端资源(js/css/image)文件位置 `${app_root}/public`\n\n- Webpack 构建的 `manifest.json` 文件位置 `${app_root}/config` 目录\n\n- easywebpack-cli 构建配置文件 `webpack.config.js` 放到项目根目录`${app_root}/webpack.config.js`\n\n- Vue 代码文件`${app_root}/app/web` 下面, 主要包括 `asset`, `component`, `framework`, `page`, `store`, `view` 等目录\n\n```\n├── app\n│   ├── controller\n│   │   ├── test\n│   │   │   └── test.js\n│   ├── extend\n│   ├── lib\n│   ├── middleware\n│   ├── mocks\n│   ├── proxy\n│   ├── router.js\n│   ├── view\n│   │   ├── about                         // 服务器编译的jsbundle文件\n│   │   │   └── about.js\n│   │   ├── home\n│   │   │     └── home.js                 // 服务器编译的jsbundle文件\n│   │   └── layout.js                     // 编译的layout文件\n│   └── web                               // 前端工程目录\n│       ├── asset                         // 存放公共js,css资源\n│       ├── framework                     // 前端公共库和第三方库\n│       │   └── entry\n│       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader\n│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir\n│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同\n│       │   │   ├── home.scss\n│       │   │   ├── home.jsx\n│       │   └── hello                      // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同\n│       │       ├── test.css               // 服务器render渲染时, 传入 render('test/test.js', data)\n│       │       └── test.jsx\n│       ├── store\n│       │   ├── app\n│       │   │   ├── actions.js\n│       │   │   ├── getters.js\n│       │   │   ├── index.js\n│       │   │   ├── mutation-type.js\n│       │   │   └── mutations.js\n│       │   └── store.js\n│       └── component                         // 公共业务组件, 比如loading, toast等, 遵循目录名, js文件名, scss文件名, jsx文件名相同\n│           ├── loading\n│           │   ├── loading.scss\n│           │   └── loading.jsx\n│           ├── test\n│           │   ├── test.jsx\n│           │   └── test.scss\n│           └── toast\n│               ├── toast.scss\n│               └── toast.jsx\n├── config\n│   ├── config.default.js\n│   ├── config.local.js\n│   ├── config.prod.js\n│   ├── config.test.js\n│   └── plugin.js\n├── doc\n├── index.js\n├── webpack.config.js                      // easywebpack-cli 构建配置\n├── public                                 // webpack编译目录结构, render文件查找目录\n│   ├── static\n│   │   ├── css\n│   │   │   ├── home\n│   │   │   │   ├── home.07012d33.css\n│   │   │   └── test\n│   │   │       ├── test.4bbb32ce.css\n│   │   ├── img\n│   │   │   ├── change_top.4735c57.png\n│   │   │   └── intro.0e66266.png\n│   ├── test\n│   │   └── test.js\n│   └── vendor.js                         // 生成的公共打包库\n```\n\n## 渲染模式\n\n### 服务端 node 渲染\n\n[egg-view-vue-ssr](https://github.com/easy-team/egg-view-vue-ssr) 支持 **服务端渲染模式** 和 **前端渲染模式** 两种渲染模式。\n\n这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持 SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对 SEO，首屏速度有要求的业务应用。\n\n#### 用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染\n\n```js\n// controller/home.js\nmodule.exports = (app) => {\n  return class HomeController extends app.Controller {\n    async index() {\n      const { ctx } = this;\n      await ctx.render(\"home/home.js\", Model.getPage(1, 10));\n    }\n    async index2() {\n      const { ctx } = this;\n      const html = await ctx.renderToHtml(\"home/home.js\", Model.getPage(1, 10));\n      // 这里可以处理对渲染后的 HTML 进行处理\n      ctx.body = html;\n    }\n  };\n};\n```\n\n- `home/home.js` 是由 Webpack(`target:node`) 把 Vue 变成 Node 服务端运行的运行文件, 默认在 `${app_root}/app/view` 目录下。\n\n- `Model.getPage(1, 10)` 表示在 Node 服务端获取到的业务数据，传给 Vue 组件在 Node 端进行模板编译为 HTML\n\n- Node 编译 HTML 之后会根据 `config/manifest.json` 文件把 css, js 资源依赖注入到 HTML\n\n- 当服务队渲染失败时, `egg-view-vue-ssr` 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。\n\n- 本地开发默认禁用缓存, 线上运行模式默认开启缓存。\n\n- 如果是 SPA SSR 应用, 一般是在 Vue 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见[egg-vue-webpack-boilerplate](https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/master/app/web/page/app/app.js) 功能实现。 **如果是单页面服务端渲染，一定注意 store 的创建时机，否则 store 全局共享，内存泄漏，请见下面 38 行代码。**\n\n```js\nimport Vue from \"vue\";\nimport { sync } from \"vuex-router-sync\";\n\nexport default class App {\n  constructor(config) {\n    this.config = config;\n  }\n\n  bootstrap() {\n    if (EASY_ENV_IS_NODE) {\n      return this.server();\n    }\n    return this.client();\n  }\n\n  create(initState) {\n    const { index, options, createStore, createRouter } = this.config;\n    const store = createStore(initState);\n    const router = createRouter();\n    sync(store, router);\n    return {\n      ...index,\n      ...options,\n      router,\n      store,\n    };\n  }\n\n  client() {\n    Vue.prototype.$http = require(\"axios\");\n    const options = this.create(window.__INITIAL_STATE__);\n    const app = new Vue(options);\n    const root = document.getElementById(\"app\");\n    const hydrate = root.childNodes.length > 0;\n    app.$mount(root, hydrate);\n    return app;\n  }\n\n  server() {\n    return (context) => {\n      // store 和 router 一定要在这里面创建，否则 store 全局共享，内存泄漏\n      const options = this.create();\n      const { store, router } = options;\n      router.push(context.state.url);\n      return new Promise((resolve, reject) => {\n        router.onReady(() => {\n          const matchedComponents = router.getMatchedComponents();\n          if (!matchedComponents) {\n            return reject({ code: \"404\" });\n          }\n          return Promise.all(\n            matchedComponents.map((component) => {\n              if (component.preFetch) {\n                return component.preFetch(store);\n              }\n              return null;\n            })\n          ).then(() => {\n            context.state = {\n              ...store.state,\n              ...context.state,\n            };\n            return resolve(new Vue(options));\n          });\n        });\n      });\n    };\n  }\n}\n```\n\n### 前端渲染模式\n\n**浏览器渲染模式**指的是 Node 端只会根据包含 html, head, body 节点信息的 layout 文件输出骨架内容， 页面的实际内容交给浏览器去渲染。\n\n#### 调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染\n\n在使用上面, 客户端浏览器渲染模式只需要把 render 改成 renderClient。 正常情况下, 能进行 render 运行的,\nrenderClient 方式也能正常运行。\n\n在`${root}/webpack.config.js`文件添加`target: 'web'`配置选项，这样只会构建浏览器运行的 JSBundle 文件，无需构建 Node 运行的 JSBundle 文件(SSR 模式会构建两份结果，一份给 Node 运行，一份给浏览器运行)。\n\n\n","source":"_posts/egg-vue-webpack-boilerplate.md","raw":"---\ntitle: egg-vue-webpack-boilerplate (yuque easy-team)\ndate: 2020-04-19 15:08:31\ntags:\n  - js\n  - 从入门到放弃\ncategories:\n  - vue\n---\n\n参考: [Egg Vue SSR/CSR 工程化](https://www.yuque.com/easy-team/egg-vue)\n\n> 基于 Egg + Vue + Webpack SSR 服务端渲染和 CSR 前端渲染工程骨架项目，包括前台系统(SSR MPA)和后台管理系统(SSR SPA)\n\n- Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。\n- 使用 TypeScript 或 JavaScript 编写前端和 Node 端代码，支持 ts-node 无编译 和 Webpack 编译开发模式。\n- 前端基于 Vue 框架，默认支持 Vue 服务端渲染，前端渲染模式，Asset 渲染，HTML 渲染多种渲染模式。\n- 集成 Css/Sass/Less/Stylus 以及 Css Module 多种样式编写构建支持， 可以按需选用。\n- 整合 Egg,  Webpack, TypeScript 构建工具，内置多进程，Webpack DLL 和缓存等编译提速解决方案，并提供强大的 CLI 开发工具。\n\n## Vue 服务端渲染（SSR - Server Side Render)\n\nVue 服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器，用户就能快速的看到内容. 服务端渲染的页面在浏览器里面你右键源代码可以看到完整的 HTML 页面结构, 包括 id='app' 节点里面所有内容； 而目前所说的 Vue 前端渲染你只能看到简单的 html, body, script 结构，id='app' 节点里面的实际内容在浏览器前端渲染出来的。\n\nVue 服务端渲染构建是需要构建两份 JSBundle 文件。SSR 模式开发时，SSR 运行需要 Webapck 单独构建 target: node 和 target: web 的 JSBundle，主要的差异在于 Webpack 需要处理 require 机制以及磨平 Node 和浏览器运行环境的差异。服务端的 JSBundle 用来生产 HTML，客户端的 JSBundle 需要 script 到文档，用来进行事件绑定等操作，也就是 Vue 的 hydrate 机制。\n\n本地构建是 Webpack 内存构建，文件不落地磁盘，所以 app/view 和 public 在本地开发时，是看不到文件的。 只有发布模式(npm run build)才能在这两个目录中看到构建后的内容。\n\n![](egg-vue-webpack-boilerplate/egg-vue_00.png)\n\n## Egg Vue SSR 发布模式渲染方式\n\n1. Webpack 通过本地构建或者 ci 直接构建好服务端文件和客户端资源文件到磁盘\n2. Egg render 直接读取本地文件, 然后渲染成 HTML\n3. 根据 manfifest.json 文件注入 jss/css 资源依赖注入\n4. 模板渲染完成, 服务器输出 HTML 内容给浏览器\n\n## 特性支持\n\n- 支持服务端渲染 SSR(Server Side Render), 前端渲染 CSR(Client Side Render) 方式<br />\n- 支持 Node 和 前端代码修改, Webpack 自动编译和热更新, `npm run dev` 一键启动应用<br />\n- 基于 vue + axios 多页面服务端渲染, 客户端渲染同构实现, 支持 asyncData 渲染<br />\n- 基于 vue + vuex + vue-router + axios 单页面服务器客户端同构实现<br />\n- 支持 js/css/image 资源依赖, 内置支持 CDN 特性, 支持 css/sass/less 样式编写<br />\n- 支持根据 .vue 文件自动创建 Webpack Entry 入口文件<br />\n- 开始支持多进程和缓存编译， 支持 Webpack dll 自动化构建, 与多进程编译结合，构建速度减少 2/3<br />\n- 支持 Vue 组件 import 异步加载, 具体实例请看[app/web/page/dynamic](https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/awesome/app/web/page/dynamic)<br />\n- 支持服务端渲染(SSR)失败时，自动降级为前端渲染(CSR)模式<br />\n- 提供 国际化 i18n 多语言支持方案<br />\n\n## 开发\n\n### easywebpack-cli 脚手架安装并初始化\n\n```bash\nnpm install easywebpack-cli -g\neasy init\nyarn\n```\n\n### 项目运行\n\n```bash\nnpm run dev   // egg-bin dev\n```\n\n- 启动 Egg 应用（读取 config/config.local.js 配置）\n- 启动 Webpack 构建, 构建文件存储在内存不落地磁盘(只在本地启动,  发布模式是提前构建好文件到磁盘)\n- 构建会同时启动两个 Webpack 构建服务, 客户端 js 构建端口 9000, 服务端端口 9001\n- 构建完成，Egg 应用正式可用，自动打开浏览器\n\n### 发布模式\n\n```bash\nnpm run build\n```\n\n1. 启动 Webpack 构建，文件落地磁盘\n2. 服务端构建的文件放到 `app/view` 目录\n3. 前端构建的文件放到 `public` 目录\n4. 生成的 `manifest.json` 放到 `config` 目录\n5. 构建的文件都是 gitignore 的，**部署时请注意把这些文件打包进去**\n\n```bash\nnpm start  // egg-scripts start\n```\n\n    非egg-scripts start方式启动时， 启动应用前， 设置EGG_SERVER_ENV环境变量，测试环境设置 test， 正式环境设置 prod。\n\n### 项目构建\n\n构建会根据 webpackConfigList.length 启动对应个数的 Webpack 编译实例，这里会同时启动两个 Webpack 构建服务, 客户端 jsbundle 构建，端口 9000, 服务端 jsbundle 构建端口 9001。默认端口为 9000, 端口依次递增。\n\n```js\n// config/config.local.js 本地 npm start 使用\nconst EasyWebpack = require(\"easywebpack-vue\");\nexports.webpack = {\n  webpackConfigList: EasyWebpack.getWebpackConfig(),\n};\n```\n\napp/web/page 目录中所有 .vue 文件当作 Webpack 构建入口是采用 app/web/framework/vue/entry 的 client-loader.js 和 server-loader.js 模板实现的，这个需要结合 webpack.config.js 下的 entry.loader 使用。\n\n```js\nentry: {\n   include: ['app/web/page'],\n   exclude: ['app/web/page/[a-z]+/component', 'app/web/page/app'],\n   loader: { // 如果没有配置loader模板，默认使用 .js 文件作为构建入口\n      client: 'app/web/framework/vue/entry/client-loader.js',\n      server: 'app/web/framework/vue/entry/server-loader.js',\n   }\n}\n```\n\nVue 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 vue 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个 vue 文件，vue 关联的组件可以放到 widget 或者 compnent 目录。如果非要放到当前目录，请配置 webpack.config.js entry.exclude 排除 vue 文件。\n\n### 多页面服务端渲染\n\n#### 多页面前端页面实现\n\nWebpack 自动根据.vue 文件创建 entry 入口, webpack.config.js, home.vue 编写界面逻辑。\n\n#### 多页面其他渲染实现\n\n- 创建 controller 文件 home.js\n\n  ```js\n  // 多页面后端渲染实现, 通过 egg-view-vue-ssr 插件 render 方法实现\n  exports.index = function* (ctx) {\n    yield ctx.render(\"home/home.js\", { message: \"vue server side render!\" });\n  };\n\n  // 多页面走前端渲染(后端路由)实现, 通过 egg-view-vue-ssr 插件 renderClient 方法实现\n  exports.client = function* (ctx) {\n    yield ctx.renderClient(\"home/home.js\", {\n      message: \"vue server side render!\",\n    });\n  };\n  ```\n\n  yield 了解: [js 的关键词 yield](/2020/04/19/js-yield/)\n\n- 添加路由配置\n\n  ```js\n  app.get(\"/home\", app.controller.home.index);\n  ```\n\n### HTML 静态页面前端渲染\n\n- 直接有 easywebpack 构建出静态 HTML 文件, 请见 webpack.config.js 配置和 app/web/page/html 代码实现\n- 通过 egg-static 静态文件访问 HTML 文件\n\n### 单页面服务器渲染同构实现\n\n- 单页面前端实现\n\n  在 app/web/page 目录下面创建 app 目录, app.vue, app.js 文件, 引入根页面和 router 等\n\n- 单页面后端实现\n\n  - 创建 controller 文件 app.js\n\n    ```javascript\n    exports.index = function* (ctx) {\n      yield ctx.render(\"app/app.js\", { url: this.url.replace(/\\/app/, \"\") });\n    };\n    ```\n\n  - 添加路由配置\n\n    ```javascript\n    app.get(\"/app(/.+)?\", app.controller.app.app.index);\n    ```\n\n### 构建目录\n\n- Webpack 构建服务端(Node) JSBundle 运行文件, 构建的服务端渲染模板文件位置 `${app_root}/app/view`\n\n- Webpack 构建浏览器 JSBundle 运行文件, 构建的前端资源(js/css/image)文件位置 `${app_root}/public`\n\n- Webpack 构建的 `manifest.json` 文件位置 `${app_root}/config` 目录\n\n- easywebpack-cli 构建配置文件 `webpack.config.js` 放到项目根目录`${app_root}/webpack.config.js`\n\n- Vue 代码文件`${app_root}/app/web` 下面, 主要包括 `asset`, `component`, `framework`, `page`, `store`, `view` 等目录\n\n```\n├── app\n│   ├── controller\n│   │   ├── test\n│   │   │   └── test.js\n│   ├── extend\n│   ├── lib\n│   ├── middleware\n│   ├── mocks\n│   ├── proxy\n│   ├── router.js\n│   ├── view\n│   │   ├── about                         // 服务器编译的jsbundle文件\n│   │   │   └── about.js\n│   │   ├── home\n│   │   │     └── home.js                 // 服务器编译的jsbundle文件\n│   │   └── layout.js                     // 编译的layout文件\n│   └── web                               // 前端工程目录\n│       ├── asset                         // 存放公共js,css资源\n│       ├── framework                     // 前端公共库和第三方库\n│       │   └── entry\n│       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader\n│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir\n│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同\n│       │   │   ├── home.scss\n│       │   │   ├── home.jsx\n│       │   └── hello                      // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同\n│       │       ├── test.css               // 服务器render渲染时, 传入 render('test/test.js', data)\n│       │       └── test.jsx\n│       ├── store\n│       │   ├── app\n│       │   │   ├── actions.js\n│       │   │   ├── getters.js\n│       │   │   ├── index.js\n│       │   │   ├── mutation-type.js\n│       │   │   └── mutations.js\n│       │   └── store.js\n│       └── component                         // 公共业务组件, 比如loading, toast等, 遵循目录名, js文件名, scss文件名, jsx文件名相同\n│           ├── loading\n│           │   ├── loading.scss\n│           │   └── loading.jsx\n│           ├── test\n│           │   ├── test.jsx\n│           │   └── test.scss\n│           └── toast\n│               ├── toast.scss\n│               └── toast.jsx\n├── config\n│   ├── config.default.js\n│   ├── config.local.js\n│   ├── config.prod.js\n│   ├── config.test.js\n│   └── plugin.js\n├── doc\n├── index.js\n├── webpack.config.js                      // easywebpack-cli 构建配置\n├── public                                 // webpack编译目录结构, render文件查找目录\n│   ├── static\n│   │   ├── css\n│   │   │   ├── home\n│   │   │   │   ├── home.07012d33.css\n│   │   │   └── test\n│   │   │       ├── test.4bbb32ce.css\n│   │   ├── img\n│   │   │   ├── change_top.4735c57.png\n│   │   │   └── intro.0e66266.png\n│   ├── test\n│   │   └── test.js\n│   └── vendor.js                         // 生成的公共打包库\n```\n\n## 渲染模式\n\n### 服务端 node 渲染\n\n[egg-view-vue-ssr](https://github.com/easy-team/egg-view-vue-ssr) 支持 **服务端渲染模式** 和 **前端渲染模式** 两种渲染模式。\n\n这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持 SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对 SEO，首屏速度有要求的业务应用。\n\n#### 用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染\n\n```js\n// controller/home.js\nmodule.exports = (app) => {\n  return class HomeController extends app.Controller {\n    async index() {\n      const { ctx } = this;\n      await ctx.render(\"home/home.js\", Model.getPage(1, 10));\n    }\n    async index2() {\n      const { ctx } = this;\n      const html = await ctx.renderToHtml(\"home/home.js\", Model.getPage(1, 10));\n      // 这里可以处理对渲染后的 HTML 进行处理\n      ctx.body = html;\n    }\n  };\n};\n```\n\n- `home/home.js` 是由 Webpack(`target:node`) 把 Vue 变成 Node 服务端运行的运行文件, 默认在 `${app_root}/app/view` 目录下。\n\n- `Model.getPage(1, 10)` 表示在 Node 服务端获取到的业务数据，传给 Vue 组件在 Node 端进行模板编译为 HTML\n\n- Node 编译 HTML 之后会根据 `config/manifest.json` 文件把 css, js 资源依赖注入到 HTML\n\n- 当服务队渲染失败时, `egg-view-vue-ssr` 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。\n\n- 本地开发默认禁用缓存, 线上运行模式默认开启缓存。\n\n- 如果是 SPA SSR 应用, 一般是在 Vue 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见[egg-vue-webpack-boilerplate](https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/master/app/web/page/app/app.js) 功能实现。 **如果是单页面服务端渲染，一定注意 store 的创建时机，否则 store 全局共享，内存泄漏，请见下面 38 行代码。**\n\n```js\nimport Vue from \"vue\";\nimport { sync } from \"vuex-router-sync\";\n\nexport default class App {\n  constructor(config) {\n    this.config = config;\n  }\n\n  bootstrap() {\n    if (EASY_ENV_IS_NODE) {\n      return this.server();\n    }\n    return this.client();\n  }\n\n  create(initState) {\n    const { index, options, createStore, createRouter } = this.config;\n    const store = createStore(initState);\n    const router = createRouter();\n    sync(store, router);\n    return {\n      ...index,\n      ...options,\n      router,\n      store,\n    };\n  }\n\n  client() {\n    Vue.prototype.$http = require(\"axios\");\n    const options = this.create(window.__INITIAL_STATE__);\n    const app = new Vue(options);\n    const root = document.getElementById(\"app\");\n    const hydrate = root.childNodes.length > 0;\n    app.$mount(root, hydrate);\n    return app;\n  }\n\n  server() {\n    return (context) => {\n      // store 和 router 一定要在这里面创建，否则 store 全局共享，内存泄漏\n      const options = this.create();\n      const { store, router } = options;\n      router.push(context.state.url);\n      return new Promise((resolve, reject) => {\n        router.onReady(() => {\n          const matchedComponents = router.getMatchedComponents();\n          if (!matchedComponents) {\n            return reject({ code: \"404\" });\n          }\n          return Promise.all(\n            matchedComponents.map((component) => {\n              if (component.preFetch) {\n                return component.preFetch(store);\n              }\n              return null;\n            })\n          ).then(() => {\n            context.state = {\n              ...store.state,\n              ...context.state,\n            };\n            return resolve(new Vue(options));\n          });\n        });\n      });\n    };\n  }\n}\n```\n\n### 前端渲染模式\n\n**浏览器渲染模式**指的是 Node 端只会根据包含 html, head, body 节点信息的 layout 文件输出骨架内容， 页面的实际内容交给浏览器去渲染。\n\n#### 调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染\n\n在使用上面, 客户端浏览器渲染模式只需要把 render 改成 renderClient。 正常情况下, 能进行 render 运行的,\nrenderClient 方式也能正常运行。\n\n在`${root}/webpack.config.js`文件添加`target: 'web'`配置选项，这样只会构建浏览器运行的 JSBundle 文件，无需构建 Node 运行的 JSBundle 文件(SSR 模式会构建两份结果，一份给 Node 运行，一份给浏览器运行)。\n\n\n","slug":"egg-vue-webpack-boilerplate","published":1,"updated":"2020-04-21T08:53:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp2000ee36kfukie96g","content":"<p>参考: <a href=\"https://www.yuque.com/easy-team/egg-vue\" target=\"_blank\" rel=\"noopener\">Egg Vue SSR/CSR 工程化</a></p>\n<blockquote>\n<p>基于 Egg + Vue + Webpack SSR 服务端渲染和 CSR 前端渲染工程骨架项目，包括前台系统(SSR MPA)和后台管理系统(SSR SPA)</p>\n</blockquote>\n<ul>\n<li>Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。</li>\n<li>使用 TypeScript 或 JavaScript 编写前端和 Node 端代码，支持 ts-node 无编译 和 Webpack 编译开发模式。</li>\n<li>前端基于 Vue 框架，默认支持 Vue 服务端渲染，前端渲染模式，Asset 渲染，HTML 渲染多种渲染模式。</li>\n<li>集成 Css/Sass/Less/Stylus 以及 Css Module 多种样式编写构建支持， 可以按需选用。</li>\n<li>整合 Egg,  Webpack, TypeScript 构建工具，内置多进程，Webpack DLL 和缓存等编译提速解决方案，并提供强大的 CLI 开发工具。</li>\n</ul>\n<h2 id=\"Vue-服务端渲染（SSR-Server-Side-Render\"><a href=\"#Vue-服务端渲染（SSR-Server-Side-Render\" class=\"headerlink\" title=\"Vue 服务端渲染（SSR - Server Side Render)\"></a>Vue 服务端渲染（SSR - Server Side Render)</h2><p>Vue 服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器，用户就能快速的看到内容. 服务端渲染的页面在浏览器里面你右键源代码可以看到完整的 HTML 页面结构, 包括 id=’app’ 节点里面所有内容； 而目前所说的 Vue 前端渲染你只能看到简单的 html, body, script 结构，id=’app’ 节点里面的实际内容在浏览器前端渲染出来的。</p>\n<p>Vue 服务端渲染构建是需要构建两份 JSBundle 文件。SSR 模式开发时，SSR 运行需要 Webapck 单独构建 target: node 和 target: web 的 JSBundle，主要的差异在于 Webpack 需要处理 require 机制以及磨平 Node 和浏览器运行环境的差异。服务端的 JSBundle 用来生产 HTML，客户端的 JSBundle 需要 script 到文档，用来进行事件绑定等操作，也就是 Vue 的 hydrate 机制。</p>\n<p>本地构建是 Webpack 内存构建，文件不落地磁盘，所以 app/view 和 public 在本地开发时，是看不到文件的。 只有发布模式(npm run build)才能在这两个目录中看到构建后的内容。</p>\n<p><img src=\"/2020/04/19/egg-vue-webpack-boilerplate/egg-vue_00.png\" alt=\"\"></p>\n<h2 id=\"Egg-Vue-SSR-发布模式渲染方式\"><a href=\"#Egg-Vue-SSR-发布模式渲染方式\" class=\"headerlink\" title=\"Egg Vue SSR 发布模式渲染方式\"></a>Egg Vue SSR 发布模式渲染方式</h2><ol>\n<li>Webpack 通过本地构建或者 ci 直接构建好服务端文件和客户端资源文件到磁盘</li>\n<li>Egg render 直接读取本地文件, 然后渲染成 HTML</li>\n<li>根据 manfifest.json 文件注入 jss/css 资源依赖注入</li>\n<li>模板渲染完成, 服务器输出 HTML 内容给浏览器</li>\n</ol>\n<h2 id=\"特性支持\"><a href=\"#特性支持\" class=\"headerlink\" title=\"特性支持\"></a>特性支持</h2><ul>\n<li>支持服务端渲染 SSR(Server Side Render), 前端渲染 CSR(Client Side Render) 方式<br></li>\n<li>支持 Node 和 前端代码修改, Webpack 自动编译和热更新, <code>npm run dev</code> 一键启动应用<br></li>\n<li>基于 vue + axios 多页面服务端渲染, 客户端渲染同构实现, 支持 asyncData 渲染<br></li>\n<li>基于 vue + vuex + vue-router + axios 单页面服务器客户端同构实现<br></li>\n<li>支持 js/css/image 资源依赖, 内置支持 CDN 特性, 支持 css/sass/less 样式编写<br></li>\n<li>支持根据 .vue 文件自动创建 Webpack Entry 入口文件<br></li>\n<li>开始支持多进程和缓存编译， 支持 Webpack dll 自动化构建, 与多进程编译结合，构建速度减少 2/3<br></li>\n<li>支持 Vue 组件 import 异步加载, 具体实例请看<a href=\"https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/awesome/app/web/page/dynamic\" target=\"_blank\" rel=\"noopener\">app/web/page/dynamic</a><br></li>\n<li>支持服务端渲染(SSR)失败时，自动降级为前端渲染(CSR)模式<br></li>\n<li>提供 国际化 i18n 多语言支持方案<br></li>\n</ul>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><h3 id=\"easywebpack-cli-脚手架安装并初始化\"><a href=\"#easywebpack-cli-脚手架安装并初始化\" class=\"headerlink\" title=\"easywebpack-cli 脚手架安装并初始化\"></a>easywebpack-cli 脚手架安装并初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install easywebpack-cli -g</span><br><span class=\"line\">easy init</span><br><span class=\"line\">yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目运行\"><a href=\"#项目运行\" class=\"headerlink\" title=\"项目运行\"></a>项目运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev   // egg-bin dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动 Egg 应用（读取 config/config.local.js 配置）</li>\n<li>启动 Webpack 构建, 构建文件存储在内存不落地磁盘(只在本地启动,  发布模式是提前构建好文件到磁盘)</li>\n<li>构建会同时启动两个 Webpack 构建服务, 客户端 js 构建端口 9000, 服务端端口 9001</li>\n<li>构建完成，Egg 应用正式可用，自动打开浏览器</li>\n</ul>\n<h3 id=\"发布模式\"><a href=\"#发布模式\" class=\"headerlink\" title=\"发布模式\"></a>发布模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动 Webpack 构建，文件落地磁盘</li>\n<li>服务端构建的文件放到 <code>app/view</code> 目录</li>\n<li>前端构建的文件放到 <code>public</code> 目录</li>\n<li>生成的 <code>manifest.json</code> 放到 <code>config</code> 目录</li>\n<li>构建的文件都是 gitignore 的，<strong>部署时请注意把这些文件打包进去</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start  // egg-scripts start</span><br></pre></td></tr></table></figure>\n<pre><code>非egg-scripts start方式启动时， 启动应用前， 设置EGG_SERVER_ENV环境变量，测试环境设置 test， 正式环境设置 prod。\n</code></pre><h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><p>构建会根据 webpackConfigList.length 启动对应个数的 Webpack 编译实例，这里会同时启动两个 Webpack 构建服务, 客户端 jsbundle 构建，端口 9000, 服务端 jsbundle 构建端口 9001。默认端口为 9000, 端口依次递增。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.local.js 本地 npm start 使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> EasyWebpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"easywebpack-vue\"</span>);</span><br><span class=\"line\">exports.webpack = &#123;</span><br><span class=\"line\">  webpackConfigList: EasyWebpack.getWebpackConfig(),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>app/web/page 目录中所有 .vue 文件当作 Webpack 构建入口是采用 app/web/framework/vue/entry 的 client-loader.js 和 server-loader.js 模板实现的，这个需要结合 webpack.config.js 下的 entry.loader 使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   include: [<span class=\"string\">'app/web/page'</span>],</span><br><span class=\"line\">   exclude: [<span class=\"string\">'app/web/page/[a-z]+/component'</span>, <span class=\"string\">'app/web/page/app'</span>],</span><br><span class=\"line\">   loader: &#123; <span class=\"comment\">// 如果没有配置loader模板，默认使用 .js 文件作为构建入口</span></span><br><span class=\"line\">      client: <span class=\"string\">'app/web/framework/vue/entry/client-loader.js'</span>,</span><br><span class=\"line\">      server: <span class=\"string\">'app/web/framework/vue/entry/server-loader.js'</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 vue 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个 vue 文件，vue 关联的组件可以放到 widget 或者 compnent 目录。如果非要放到当前目录，请配置 webpack.config.js entry.exclude 排除 vue 文件。</p>\n<h3 id=\"多页面服务端渲染\"><a href=\"#多页面服务端渲染\" class=\"headerlink\" title=\"多页面服务端渲染\"></a>多页面服务端渲染</h3><h4 id=\"多页面前端页面实现\"><a href=\"#多页面前端页面实现\" class=\"headerlink\" title=\"多页面前端页面实现\"></a>多页面前端页面实现</h4><p>Webpack 自动根据.vue 文件创建 entry 入口, webpack.config.js, home.vue 编写界面逻辑。</p>\n<h4 id=\"多页面其他渲染实现\"><a href=\"#多页面其他渲染实现\" class=\"headerlink\" title=\"多页面其他渲染实现\"></a>多页面其他渲染实现</h4><ul>\n<li><p>创建 controller 文件 home.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多页面后端渲染实现, 通过 egg-view-vue-ssr 插件 render 方法实现</span></span><br><span class=\"line\">exports.index = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.render(<span class=\"string\">\"home/home.js\"</span>, &#123; <span class=\"attr\">message</span>: <span class=\"string\">\"vue server side render!\"</span> &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多页面走前端渲染(后端路由)实现, 通过 egg-view-vue-ssr 插件 renderClient 方法实现</span></span><br><span class=\"line\">exports.client = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.renderClient(<span class=\"string\">\"home/home.js\"</span>, &#123;</span><br><span class=\"line\">    message: <span class=\"string\">\"vue server side render!\"</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>yield 了解: <a href=\"/2020/04/19/js-yield/\">js 的关键词 yield</a></p>\n</li>\n<li><p>添加路由配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/home\"</span>, app.controller.home.index);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"HTML-静态页面前端渲染\"><a href=\"#HTML-静态页面前端渲染\" class=\"headerlink\" title=\"HTML 静态页面前端渲染\"></a>HTML 静态页面前端渲染</h3><ul>\n<li>直接有 easywebpack 构建出静态 HTML 文件, 请见 webpack.config.js 配置和 app/web/page/html 代码实现</li>\n<li>通过 egg-static 静态文件访问 HTML 文件</li>\n</ul>\n<h3 id=\"单页面服务器渲染同构实现\"><a href=\"#单页面服务器渲染同构实现\" class=\"headerlink\" title=\"单页面服务器渲染同构实现\"></a>单页面服务器渲染同构实现</h3><ul>\n<li><p>单页面前端实现</p>\n<p>在 app/web/page 目录下面创建 app 目录, app.vue, app.js 文件, 引入根页面和 router 等</p>\n</li>\n<li><p>单页面后端实现</p>\n<ul>\n<li><p>创建 controller 文件 app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.index = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.render(<span class=\"string\">\"app/app.js\"</span>, &#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url.replace(<span class=\"regexp\">/\\/app/</span>, <span class=\"string\">\"\"</span>) &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加路由配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/app(/.+)?\"</span>, app.controller.app.app.index);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"构建目录\"><a href=\"#构建目录\" class=\"headerlink\" title=\"构建目录\"></a>构建目录</h3><ul>\n<li><p>Webpack 构建服务端(Node) JSBundle 运行文件, 构建的服务端渲染模板文件位置 <code>${app_root}/app/view</code></p>\n</li>\n<li><p>Webpack 构建浏览器 JSBundle 运行文件, 构建的前端资源(js/css/image)文件位置 <code>${app_root}/public</code></p>\n</li>\n<li><p>Webpack 构建的 <code>manifest.json</code> 文件位置 <code>${app_root}/config</code> 目录</p>\n</li>\n<li><p>easywebpack-cli 构建配置文件 <code>webpack.config.js</code> 放到项目根目录<code>${app_root}/webpack.config.js</code></p>\n</li>\n<li><p>Vue 代码文件<code>${app_root}/app/web</code> 下面, 主要包括 <code>asset</code>, <code>component</code>, <code>framework</code>, <code>page</code>, <code>store</code>, <code>view</code> 等目录</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app</span><br><span class=\"line\">│   ├── controller</span><br><span class=\"line\">│   │   ├── test</span><br><span class=\"line\">│   │   │   └── test.js</span><br><span class=\"line\">│   ├── extend</span><br><span class=\"line\">│   ├── lib</span><br><span class=\"line\">│   ├── middleware</span><br><span class=\"line\">│   ├── mocks</span><br><span class=\"line\">│   ├── proxy</span><br><span class=\"line\">│   ├── router.js</span><br><span class=\"line\">│   ├── view</span><br><span class=\"line\">│   │   ├── about                         // 服务器编译的jsbundle文件</span><br><span class=\"line\">│   │   │   └── about.js</span><br><span class=\"line\">│   │   ├── home</span><br><span class=\"line\">│   │   │     └── home.js                 // 服务器编译的jsbundle文件</span><br><span class=\"line\">│   │   └── layout.js                     // 编译的layout文件</span><br><span class=\"line\">│   └── web                               // 前端工程目录</span><br><span class=\"line\">│       ├── asset                         // 存放公共js,css资源</span><br><span class=\"line\">│       ├── framework                     // 前端公共库和第三方库</span><br><span class=\"line\">│       │   └── entry</span><br><span class=\"line\">│       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader</span><br><span class=\"line\">│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir</span><br><span class=\"line\">│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│       │   │   ├── home.scss</span><br><span class=\"line\">│       │   │   ├── home.jsx</span><br><span class=\"line\">│       │   └── hello                      // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│       │       ├── test.css               // 服务器render渲染时, 传入 render(&apos;test/test.js&apos;, data)</span><br><span class=\"line\">│       │       └── test.jsx</span><br><span class=\"line\">│       ├── store</span><br><span class=\"line\">│       │   ├── app</span><br><span class=\"line\">│       │   │   ├── actions.js</span><br><span class=\"line\">│       │   │   ├── getters.js</span><br><span class=\"line\">│       │   │   ├── index.js</span><br><span class=\"line\">│       │   │   ├── mutation-type.js</span><br><span class=\"line\">│       │   │   └── mutations.js</span><br><span class=\"line\">│       │   └── store.js</span><br><span class=\"line\">│       └── component                         // 公共业务组件, 比如loading, toast等, 遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│           ├── loading</span><br><span class=\"line\">│           │   ├── loading.scss</span><br><span class=\"line\">│           │   └── loading.jsx</span><br><span class=\"line\">│           ├── test</span><br><span class=\"line\">│           │   ├── test.jsx</span><br><span class=\"line\">│           │   └── test.scss</span><br><span class=\"line\">│           └── toast</span><br><span class=\"line\">│               ├── toast.scss</span><br><span class=\"line\">│               └── toast.jsx</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── config.default.js</span><br><span class=\"line\">│   ├── config.local.js</span><br><span class=\"line\">│   ├── config.prod.js</span><br><span class=\"line\">│   ├── config.test.js</span><br><span class=\"line\">│   └── plugin.js</span><br><span class=\"line\">├── doc</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── webpack.config.js                      // easywebpack-cli 构建配置</span><br><span class=\"line\">├── public                                 // webpack编译目录结构, render文件查找目录</span><br><span class=\"line\">│   ├── static</span><br><span class=\"line\">│   │   ├── css</span><br><span class=\"line\">│   │   │   ├── home</span><br><span class=\"line\">│   │   │   │   ├── home.07012d33.css</span><br><span class=\"line\">│   │   │   └── test</span><br><span class=\"line\">│   │   │       ├── test.4bbb32ce.css</span><br><span class=\"line\">│   │   ├── img</span><br><span class=\"line\">│   │   │   ├── change_top.4735c57.png</span><br><span class=\"line\">│   │   │   └── intro.0e66266.png</span><br><span class=\"line\">│   ├── test</span><br><span class=\"line\">│   │   └── test.js</span><br><span class=\"line\">│   └── vendor.js                         // 生成的公共打包库</span><br></pre></td></tr></table></figure>\n<h2 id=\"渲染模式\"><a href=\"#渲染模式\" class=\"headerlink\" title=\"渲染模式\"></a>渲染模式</h2><h3 id=\"服务端-node-渲染\"><a href=\"#服务端-node-渲染\" class=\"headerlink\" title=\"服务端 node 渲染\"></a>服务端 node 渲染</h3><p><a href=\"https://github.com/easy-team/egg-view-vue-ssr\" target=\"_blank\" rel=\"noopener\">egg-view-vue-ssr</a> 支持 <strong>服务端渲染模式</strong> 和 <strong>前端渲染模式</strong> 两种渲染模式。</p>\n<p>这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持 SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对 SEO，首屏速度有要求的业务应用。</p>\n<h4 id=\"用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染\"><a href=\"#用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染\" class=\"headerlink\" title=\"用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染\"></a>用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller/home.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">\"home/home.js\"</span>, Model.getPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> index2() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> ctx.renderToHtml(<span class=\"string\">\"home/home.js\"</span>, Model.getPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以处理对渲染后的 HTML 进行处理</span></span><br><span class=\"line\">      ctx.body = html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>home/home.js</code> 是由 Webpack(<code>target:node</code>) 把 Vue 变成 Node 服务端运行的运行文件, 默认在 <code>${app_root}/app/view</code> 目录下。</p>\n</li>\n<li><p><code>Model.getPage(1, 10)</code> 表示在 Node 服务端获取到的业务数据，传给 Vue 组件在 Node 端进行模板编译为 HTML</p>\n</li>\n<li><p>Node 编译 HTML 之后会根据 <code>config/manifest.json</code> 文件把 css, js 资源依赖注入到 HTML</p>\n</li>\n<li><p>当服务队渲染失败时, <code>egg-view-vue-ssr</code> 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。</p>\n</li>\n<li><p>本地开发默认禁用缓存, 线上运行模式默认开启缓存。</p>\n</li>\n<li><p>如果是 SPA SSR 应用, 一般是在 Vue 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见<a href=\"https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/master/app/web/page/app/app.js\" target=\"_blank\" rel=\"noopener\">egg-vue-webpack-boilerplate</a> 功能实现。 <strong>如果是单页面服务端渲染，一定注意 store 的创建时机，否则 store 全局共享，内存泄漏，请见下面 38 行代码。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sync &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vuex-router-sync\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(config) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bootstrap() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (EASY_ENV_IS_NODE) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.server();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.client();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  create(initState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; index, options, createStore, createRouter &#125; = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(initState);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = createRouter();</span><br><span class=\"line\">    sync(store, router);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...index,</span><br><span class=\"line\">      ...options,</span><br><span class=\"line\">      router,</span><br><span class=\"line\">      store,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  client() &#123;</span><br><span class=\"line\">    Vue.prototype.$http = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.create(<span class=\"built_in\">window</span>.__INITIAL_STATE__);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(options);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"app\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hydrate = root.childNodes.length &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    app.$mount(root, hydrate);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  server() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// store 和 router 一定要在这里面创建，否则 store 全局共享，内存泄漏</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.create();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; store, router &#125; = options;</span><br><span class=\"line\">      router.push(context.state.url);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> matchedComponents = router.getMatchedComponents();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!matchedComponents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(&#123; <span class=\"attr\">code</span>: <span class=\"string\">\"404\"</span> &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">            matchedComponents.map(<span class=\"function\">(<span class=\"params\">component</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (component.preFetch) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> component.preFetch(store);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            context.state = &#123;</span><br><span class=\"line\">              ...store.state,</span><br><span class=\"line\">              ...context.state,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(<span class=\"keyword\">new</span> Vue(options));</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端渲染模式\"><a href=\"#前端渲染模式\" class=\"headerlink\" title=\"前端渲染模式\"></a>前端渲染模式</h3><p><strong>浏览器渲染模式</strong>指的是 Node 端只会根据包含 html, head, body 节点信息的 layout 文件输出骨架内容， 页面的实际内容交给浏览器去渲染。</p>\n<h4 id=\"调用-egg-view-vue-ssr-的-renderClient-方法实现客户端浏览器渲染\"><a href=\"#调用-egg-view-vue-ssr-的-renderClient-方法实现客户端浏览器渲染\" class=\"headerlink\" title=\"调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染\"></a>调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染</h4><p>在使用上面, 客户端浏览器渲染模式只需要把 render 改成 renderClient。 正常情况下, 能进行 render 运行的,<br>renderClient 方式也能正常运行。</p>\n<p>在<code>${root}/webpack.config.js</code>文件添加<code>target: &#39;web&#39;</code>配置选项，这样只会构建浏览器运行的 JSBundle 文件，无需构建 Node 运行的 JSBundle 文件(SSR 模式会构建两份结果，一份给 Node 运行，一份给浏览器运行)。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://www.yuque.com/easy-team/egg-vue\" target=\"_blank\" rel=\"noopener\">Egg Vue SSR/CSR 工程化</a></p>\n<blockquote>\n<p>基于 Egg + Vue + Webpack SSR 服务端渲染和 CSR 前端渲染工程骨架项目，包括前台系统(SSR MPA)和后台管理系统(SSR SPA)</p>\n</blockquote>\n<ul>\n<li>Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。</li>\n<li>使用 TypeScript 或 JavaScript 编写前端和 Node 端代码，支持 ts-node 无编译 和 Webpack 编译开发模式。</li>\n<li>前端基于 Vue 框架，默认支持 Vue 服务端渲染，前端渲染模式，Asset 渲染，HTML 渲染多种渲染模式。</li>\n<li>集成 Css/Sass/Less/Stylus 以及 Css Module 多种样式编写构建支持， 可以按需选用。</li>\n<li>整合 Egg,  Webpack, TypeScript 构建工具，内置多进程，Webpack DLL 和缓存等编译提速解决方案，并提供强大的 CLI 开发工具。</li>\n</ul>\n<h2 id=\"Vue-服务端渲染（SSR-Server-Side-Render\"><a href=\"#Vue-服务端渲染（SSR-Server-Side-Render\" class=\"headerlink\" title=\"Vue 服务端渲染（SSR - Server Side Render)\"></a>Vue 服务端渲染（SSR - Server Side Render)</h2><p>Vue 服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器，用户就能快速的看到内容. 服务端渲染的页面在浏览器里面你右键源代码可以看到完整的 HTML 页面结构, 包括 id=’app’ 节点里面所有内容； 而目前所说的 Vue 前端渲染你只能看到简单的 html, body, script 结构，id=’app’ 节点里面的实际内容在浏览器前端渲染出来的。</p>\n<p>Vue 服务端渲染构建是需要构建两份 JSBundle 文件。SSR 模式开发时，SSR 运行需要 Webapck 单独构建 target: node 和 target: web 的 JSBundle，主要的差异在于 Webpack 需要处理 require 机制以及磨平 Node 和浏览器运行环境的差异。服务端的 JSBundle 用来生产 HTML，客户端的 JSBundle 需要 script 到文档，用来进行事件绑定等操作，也就是 Vue 的 hydrate 机制。</p>\n<p>本地构建是 Webpack 内存构建，文件不落地磁盘，所以 app/view 和 public 在本地开发时，是看不到文件的。 只有发布模式(npm run build)才能在这两个目录中看到构建后的内容。</p>\n<p><img src=\"/2020/04/19/egg-vue-webpack-boilerplate/egg-vue_00.png\" alt=\"\"></p>\n<h2 id=\"Egg-Vue-SSR-发布模式渲染方式\"><a href=\"#Egg-Vue-SSR-发布模式渲染方式\" class=\"headerlink\" title=\"Egg Vue SSR 发布模式渲染方式\"></a>Egg Vue SSR 发布模式渲染方式</h2><ol>\n<li>Webpack 通过本地构建或者 ci 直接构建好服务端文件和客户端资源文件到磁盘</li>\n<li>Egg render 直接读取本地文件, 然后渲染成 HTML</li>\n<li>根据 manfifest.json 文件注入 jss/css 资源依赖注入</li>\n<li>模板渲染完成, 服务器输出 HTML 内容给浏览器</li>\n</ol>\n<h2 id=\"特性支持\"><a href=\"#特性支持\" class=\"headerlink\" title=\"特性支持\"></a>特性支持</h2><ul>\n<li>支持服务端渲染 SSR(Server Side Render), 前端渲染 CSR(Client Side Render) 方式<br></li>\n<li>支持 Node 和 前端代码修改, Webpack 自动编译和热更新, <code>npm run dev</code> 一键启动应用<br></li>\n<li>基于 vue + axios 多页面服务端渲染, 客户端渲染同构实现, 支持 asyncData 渲染<br></li>\n<li>基于 vue + vuex + vue-router + axios 单页面服务器客户端同构实现<br></li>\n<li>支持 js/css/image 资源依赖, 内置支持 CDN 特性, 支持 css/sass/less 样式编写<br></li>\n<li>支持根据 .vue 文件自动创建 Webpack Entry 入口文件<br></li>\n<li>开始支持多进程和缓存编译， 支持 Webpack dll 自动化构建, 与多进程编译结合，构建速度减少 2/3<br></li>\n<li>支持 Vue 组件 import 异步加载, 具体实例请看<a href=\"https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/awesome/app/web/page/dynamic\" target=\"_blank\" rel=\"noopener\">app/web/page/dynamic</a><br></li>\n<li>支持服务端渲染(SSR)失败时，自动降级为前端渲染(CSR)模式<br></li>\n<li>提供 国际化 i18n 多语言支持方案<br></li>\n</ul>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><h3 id=\"easywebpack-cli-脚手架安装并初始化\"><a href=\"#easywebpack-cli-脚手架安装并初始化\" class=\"headerlink\" title=\"easywebpack-cli 脚手架安装并初始化\"></a>easywebpack-cli 脚手架安装并初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install easywebpack-cli -g</span><br><span class=\"line\">easy init</span><br><span class=\"line\">yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目运行\"><a href=\"#项目运行\" class=\"headerlink\" title=\"项目运行\"></a>项目运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev   // egg-bin dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动 Egg 应用（读取 config/config.local.js 配置）</li>\n<li>启动 Webpack 构建, 构建文件存储在内存不落地磁盘(只在本地启动,  发布模式是提前构建好文件到磁盘)</li>\n<li>构建会同时启动两个 Webpack 构建服务, 客户端 js 构建端口 9000, 服务端端口 9001</li>\n<li>构建完成，Egg 应用正式可用，自动打开浏览器</li>\n</ul>\n<h3 id=\"发布模式\"><a href=\"#发布模式\" class=\"headerlink\" title=\"发布模式\"></a>发布模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动 Webpack 构建，文件落地磁盘</li>\n<li>服务端构建的文件放到 <code>app/view</code> 目录</li>\n<li>前端构建的文件放到 <code>public</code> 目录</li>\n<li>生成的 <code>manifest.json</code> 放到 <code>config</code> 目录</li>\n<li>构建的文件都是 gitignore 的，<strong>部署时请注意把这些文件打包进去</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start  // egg-scripts start</span><br></pre></td></tr></table></figure>\n<pre><code>非egg-scripts start方式启动时， 启动应用前， 设置EGG_SERVER_ENV环境变量，测试环境设置 test， 正式环境设置 prod。\n</code></pre><h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><p>构建会根据 webpackConfigList.length 启动对应个数的 Webpack 编译实例，这里会同时启动两个 Webpack 构建服务, 客户端 jsbundle 构建，端口 9000, 服务端 jsbundle 构建端口 9001。默认端口为 9000, 端口依次递增。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.local.js 本地 npm start 使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> EasyWebpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"easywebpack-vue\"</span>);</span><br><span class=\"line\">exports.webpack = &#123;</span><br><span class=\"line\">  webpackConfigList: EasyWebpack.getWebpackConfig(),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>app/web/page 目录中所有 .vue 文件当作 Webpack 构建入口是采用 app/web/framework/vue/entry 的 client-loader.js 和 server-loader.js 模板实现的，这个需要结合 webpack.config.js 下的 entry.loader 使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   include: [<span class=\"string\">'app/web/page'</span>],</span><br><span class=\"line\">   exclude: [<span class=\"string\">'app/web/page/[a-z]+/component'</span>, <span class=\"string\">'app/web/page/app'</span>],</span><br><span class=\"line\">   loader: &#123; <span class=\"comment\">// 如果没有配置loader模板，默认使用 .js 文件作为构建入口</span></span><br><span class=\"line\">      client: <span class=\"string\">'app/web/framework/vue/entry/client-loader.js'</span>,</span><br><span class=\"line\">      server: <span class=\"string\">'app/web/framework/vue/entry/server-loader.js'</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 vue 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个 vue 文件，vue 关联的组件可以放到 widget 或者 compnent 目录。如果非要放到当前目录，请配置 webpack.config.js entry.exclude 排除 vue 文件。</p>\n<h3 id=\"多页面服务端渲染\"><a href=\"#多页面服务端渲染\" class=\"headerlink\" title=\"多页面服务端渲染\"></a>多页面服务端渲染</h3><h4 id=\"多页面前端页面实现\"><a href=\"#多页面前端页面实现\" class=\"headerlink\" title=\"多页面前端页面实现\"></a>多页面前端页面实现</h4><p>Webpack 自动根据.vue 文件创建 entry 入口, webpack.config.js, home.vue 编写界面逻辑。</p>\n<h4 id=\"多页面其他渲染实现\"><a href=\"#多页面其他渲染实现\" class=\"headerlink\" title=\"多页面其他渲染实现\"></a>多页面其他渲染实现</h4><ul>\n<li><p>创建 controller 文件 home.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多页面后端渲染实现, 通过 egg-view-vue-ssr 插件 render 方法实现</span></span><br><span class=\"line\">exports.index = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.render(<span class=\"string\">\"home/home.js\"</span>, &#123; <span class=\"attr\">message</span>: <span class=\"string\">\"vue server side render!\"</span> &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多页面走前端渲染(后端路由)实现, 通过 egg-view-vue-ssr 插件 renderClient 方法实现</span></span><br><span class=\"line\">exports.client = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.renderClient(<span class=\"string\">\"home/home.js\"</span>, &#123;</span><br><span class=\"line\">    message: <span class=\"string\">\"vue server side render!\"</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>yield 了解: <a href=\"/2020/04/19/js-yield/\">js 的关键词 yield</a></p>\n</li>\n<li><p>添加路由配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/home\"</span>, app.controller.home.index);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"HTML-静态页面前端渲染\"><a href=\"#HTML-静态页面前端渲染\" class=\"headerlink\" title=\"HTML 静态页面前端渲染\"></a>HTML 静态页面前端渲染</h3><ul>\n<li>直接有 easywebpack 构建出静态 HTML 文件, 请见 webpack.config.js 配置和 app/web/page/html 代码实现</li>\n<li>通过 egg-static 静态文件访问 HTML 文件</li>\n</ul>\n<h3 id=\"单页面服务器渲染同构实现\"><a href=\"#单页面服务器渲染同构实现\" class=\"headerlink\" title=\"单页面服务器渲染同构实现\"></a>单页面服务器渲染同构实现</h3><ul>\n<li><p>单页面前端实现</p>\n<p>在 app/web/page 目录下面创建 app 目录, app.vue, app.js 文件, 引入根页面和 router 等</p>\n</li>\n<li><p>单页面后端实现</p>\n<ul>\n<li><p>创建 controller 文件 app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.index = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ctx.render(<span class=\"string\">\"app/app.js\"</span>, &#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url.replace(<span class=\"regexp\">/\\/app/</span>, <span class=\"string\">\"\"</span>) &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加路由配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/app(/.+)?\"</span>, app.controller.app.app.index);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"构建目录\"><a href=\"#构建目录\" class=\"headerlink\" title=\"构建目录\"></a>构建目录</h3><ul>\n<li><p>Webpack 构建服务端(Node) JSBundle 运行文件, 构建的服务端渲染模板文件位置 <code>${app_root}/app/view</code></p>\n</li>\n<li><p>Webpack 构建浏览器 JSBundle 运行文件, 构建的前端资源(js/css/image)文件位置 <code>${app_root}/public</code></p>\n</li>\n<li><p>Webpack 构建的 <code>manifest.json</code> 文件位置 <code>${app_root}/config</code> 目录</p>\n</li>\n<li><p>easywebpack-cli 构建配置文件 <code>webpack.config.js</code> 放到项目根目录<code>${app_root}/webpack.config.js</code></p>\n</li>\n<li><p>Vue 代码文件<code>${app_root}/app/web</code> 下面, 主要包括 <code>asset</code>, <code>component</code>, <code>framework</code>, <code>page</code>, <code>store</code>, <code>view</code> 等目录</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app</span><br><span class=\"line\">│   ├── controller</span><br><span class=\"line\">│   │   ├── test</span><br><span class=\"line\">│   │   │   └── test.js</span><br><span class=\"line\">│   ├── extend</span><br><span class=\"line\">│   ├── lib</span><br><span class=\"line\">│   ├── middleware</span><br><span class=\"line\">│   ├── mocks</span><br><span class=\"line\">│   ├── proxy</span><br><span class=\"line\">│   ├── router.js</span><br><span class=\"line\">│   ├── view</span><br><span class=\"line\">│   │   ├── about                         // 服务器编译的jsbundle文件</span><br><span class=\"line\">│   │   │   └── about.js</span><br><span class=\"line\">│   │   ├── home</span><br><span class=\"line\">│   │   │     └── home.js                 // 服务器编译的jsbundle文件</span><br><span class=\"line\">│   │   └── layout.js                     // 编译的layout文件</span><br><span class=\"line\">│   └── web                               // 前端工程目录</span><br><span class=\"line\">│       ├── asset                         // 存放公共js,css资源</span><br><span class=\"line\">│       ├── framework                     // 前端公共库和第三方库</span><br><span class=\"line\">│       │   └── entry</span><br><span class=\"line\">│       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader</span><br><span class=\"line\">│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir</span><br><span class=\"line\">│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│       │   │   ├── home.scss</span><br><span class=\"line\">│       │   │   ├── home.jsx</span><br><span class=\"line\">│       │   └── hello                      // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│       │       ├── test.css               // 服务器render渲染时, 传入 render(&apos;test/test.js&apos;, data)</span><br><span class=\"line\">│       │       └── test.jsx</span><br><span class=\"line\">│       ├── store</span><br><span class=\"line\">│       │   ├── app</span><br><span class=\"line\">│       │   │   ├── actions.js</span><br><span class=\"line\">│       │   │   ├── getters.js</span><br><span class=\"line\">│       │   │   ├── index.js</span><br><span class=\"line\">│       │   │   ├── mutation-type.js</span><br><span class=\"line\">│       │   │   └── mutations.js</span><br><span class=\"line\">│       │   └── store.js</span><br><span class=\"line\">│       └── component                         // 公共业务组件, 比如loading, toast等, 遵循目录名, js文件名, scss文件名, jsx文件名相同</span><br><span class=\"line\">│           ├── loading</span><br><span class=\"line\">│           │   ├── loading.scss</span><br><span class=\"line\">│           │   └── loading.jsx</span><br><span class=\"line\">│           ├── test</span><br><span class=\"line\">│           │   ├── test.jsx</span><br><span class=\"line\">│           │   └── test.scss</span><br><span class=\"line\">│           └── toast</span><br><span class=\"line\">│               ├── toast.scss</span><br><span class=\"line\">│               └── toast.jsx</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── config.default.js</span><br><span class=\"line\">│   ├── config.local.js</span><br><span class=\"line\">│   ├── config.prod.js</span><br><span class=\"line\">│   ├── config.test.js</span><br><span class=\"line\">│   └── plugin.js</span><br><span class=\"line\">├── doc</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── webpack.config.js                      // easywebpack-cli 构建配置</span><br><span class=\"line\">├── public                                 // webpack编译目录结构, render文件查找目录</span><br><span class=\"line\">│   ├── static</span><br><span class=\"line\">│   │   ├── css</span><br><span class=\"line\">│   │   │   ├── home</span><br><span class=\"line\">│   │   │   │   ├── home.07012d33.css</span><br><span class=\"line\">│   │   │   └── test</span><br><span class=\"line\">│   │   │       ├── test.4bbb32ce.css</span><br><span class=\"line\">│   │   ├── img</span><br><span class=\"line\">│   │   │   ├── change_top.4735c57.png</span><br><span class=\"line\">│   │   │   └── intro.0e66266.png</span><br><span class=\"line\">│   ├── test</span><br><span class=\"line\">│   │   └── test.js</span><br><span class=\"line\">│   └── vendor.js                         // 生成的公共打包库</span><br></pre></td></tr></table></figure>\n<h2 id=\"渲染模式\"><a href=\"#渲染模式\" class=\"headerlink\" title=\"渲染模式\"></a>渲染模式</h2><h3 id=\"服务端-node-渲染\"><a href=\"#服务端-node-渲染\" class=\"headerlink\" title=\"服务端 node 渲染\"></a>服务端 node 渲染</h3><p><a href=\"https://github.com/easy-team/egg-view-vue-ssr\" target=\"_blank\" rel=\"noopener\">egg-view-vue-ssr</a> 支持 <strong>服务端渲染模式</strong> 和 <strong>前端渲染模式</strong> 两种渲染模式。</p>\n<p>这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的 HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持 SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对 SEO，首屏速度有要求的业务应用。</p>\n<h4 id=\"用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染\"><a href=\"#用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染\" class=\"headerlink\" title=\"用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染\"></a>用 egg-view-vue-ssr 的 render 或 renderToHtml 方法实现服务端渲染</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller/home.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">\"home/home.js\"</span>, Model.getPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> index2() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> ctx.renderToHtml(<span class=\"string\">\"home/home.js\"</span>, Model.getPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以处理对渲染后的 HTML 进行处理</span></span><br><span class=\"line\">      ctx.body = html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>home/home.js</code> 是由 Webpack(<code>target:node</code>) 把 Vue 变成 Node 服务端运行的运行文件, 默认在 <code>${app_root}/app/view</code> 目录下。</p>\n</li>\n<li><p><code>Model.getPage(1, 10)</code> 表示在 Node 服务端获取到的业务数据，传给 Vue 组件在 Node 端进行模板编译为 HTML</p>\n</li>\n<li><p>Node 编译 HTML 之后会根据 <code>config/manifest.json</code> 文件把 css, js 资源依赖注入到 HTML</p>\n</li>\n<li><p>当服务队渲染失败时, <code>egg-view-vue-ssr</code> 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。</p>\n</li>\n<li><p>本地开发默认禁用缓存, 线上运行模式默认开启缓存。</p>\n</li>\n<li><p>如果是 SPA SSR 应用, 一般是在 Vue 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见<a href=\"https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/master/app/web/page/app/app.js\" target=\"_blank\" rel=\"noopener\">egg-vue-webpack-boilerplate</a> 功能实现。 <strong>如果是单页面服务端渲染，一定注意 store 的创建时机，否则 store 全局共享，内存泄漏，请见下面 38 行代码。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sync &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vuex-router-sync\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(config) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bootstrap() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (EASY_ENV_IS_NODE) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.server();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.client();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  create(initState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; index, options, createStore, createRouter &#125; = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(initState);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = createRouter();</span><br><span class=\"line\">    sync(store, router);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...index,</span><br><span class=\"line\">      ...options,</span><br><span class=\"line\">      router,</span><br><span class=\"line\">      store,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  client() &#123;</span><br><span class=\"line\">    Vue.prototype.$http = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.create(<span class=\"built_in\">window</span>.__INITIAL_STATE__);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(options);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"app\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hydrate = root.childNodes.length &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    app.$mount(root, hydrate);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  server() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// store 和 router 一定要在这里面创建，否则 store 全局共享，内存泄漏</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.create();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; store, router &#125; = options;</span><br><span class=\"line\">      router.push(context.state.url);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> matchedComponents = router.getMatchedComponents();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!matchedComponents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(&#123; <span class=\"attr\">code</span>: <span class=\"string\">\"404\"</span> &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">            matchedComponents.map(<span class=\"function\">(<span class=\"params\">component</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (component.preFetch) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> component.preFetch(store);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            context.state = &#123;</span><br><span class=\"line\">              ...store.state,</span><br><span class=\"line\">              ...context.state,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(<span class=\"keyword\">new</span> Vue(options));</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端渲染模式\"><a href=\"#前端渲染模式\" class=\"headerlink\" title=\"前端渲染模式\"></a>前端渲染模式</h3><p><strong>浏览器渲染模式</strong>指的是 Node 端只会根据包含 html, head, body 节点信息的 layout 文件输出骨架内容， 页面的实际内容交给浏览器去渲染。</p>\n<h4 id=\"调用-egg-view-vue-ssr-的-renderClient-方法实现客户端浏览器渲染\"><a href=\"#调用-egg-view-vue-ssr-的-renderClient-方法实现客户端浏览器渲染\" class=\"headerlink\" title=\"调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染\"></a>调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染</h4><p>在使用上面, 客户端浏览器渲染模式只需要把 render 改成 renderClient。 正常情况下, 能进行 render 运行的,<br>renderClient 方式也能正常运行。</p>\n<p>在<code>${root}/webpack.config.js</code>文件添加<code>target: &#39;web&#39;</code>配置选项，这样只会构建浏览器运行的 JSBundle 文件，无需构建 Node 运行的 JSBundle 文件(SSR 模式会构建两份结果，一份给 Node 运行，一份给浏览器运行)。</p>\n"},{"title":"js内proxy检测","date":"2019-01-24T01:44:41.000Z","_content":"\n> let p = new Proxy(target, handler);\n用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。\n\ntarget：用`Proxy`包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）；\nhandler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。\n\n`Proxy`构造函数获取一个` target `对象，和一个用来拦截` target `对象不同行为的` handler `对象。可以设置下面这些拦截项：\n- has — 拦截 in 操作。比如，你可以用它来隐藏对象上某些属性。\n- get — 用来拦截读取操作。比如当试图读取不存在的属性时，你可以用它来返回默认值。\n- set — 用来拦截赋值操作。比如给属性赋值的时候你可以增加验证的逻辑，如果验证不通过可以抛出错误。\n- apply — 用来拦截函数调用操作。比如，你可以把所有的函数调用都包裹在 try/catch 语句块中。\n\n```\nconst Car = {\n  maker: 'BMW',\n  year: 2018,\n};\n\n// 验证属性的赋值（set：用来拦截赋值操作）\nconst proxyCar = new Proxy(Car, {\n  set(obj, prop, value) {\n    // 为maker属性赋值时长度必须大于0\n    if (prop === 'maker' && value.length < 1) {\n      throw new Error('Invalid maker');\n    }\n\n    // 为year赋值时数据类型必须是number\n    if (prop === 'year' && typeof value !== 'number') {\n      throw new Error('Invalid year');\n    }\n    obj[prop] = value;\n    return true;\n  }\n\n});\n```\n\n这样Proxy就可以来监测对象了，比如：\n- 函数执行时间\n- 函数的调用者或属性的访问者\n- 统计每个函数或属性的被访问次数\n...\n\n通过一个新构造函数来扩展一个已有的构造函数：\n```\nfunction extend(sup,base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype,\"constructor\"\n  ); // 返回指定对象上一个自有属性对应的属性描述符\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target,obj,args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that,args);\n      base.apply(that,args);\n    }\n  };\n  var proxy = new Proxy(base,handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, \"constructor\", descriptor);\n  return proxy;\n}\n\nvar Person = function(name){\n  this.name = name\n};\n\nvar Boy = extend(Person, function(name, age) {\n  this.age = age;\n});\n\nBoy.prototype.sex = \"M\";\n\nvar Peter = new Boy(\"Peter\", 13);\nconsole.log(Peter.sex);  // \"M\"\nconsole.log(Peter.name); // \"Peter\"\nconsole.log(Peter.age);  // 13\n```\n\n[Proxy | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","source":"_posts/js-proxy.md","raw":"---\ntitle: js内proxy检测\ndate: 2019-01-24 09:44:41\ntags:\ncategories: js\n---\n\n> let p = new Proxy(target, handler);\n用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。\n\ntarget：用`Proxy`包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）；\nhandler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。\n\n`Proxy`构造函数获取一个` target `对象，和一个用来拦截` target `对象不同行为的` handler `对象。可以设置下面这些拦截项：\n- has — 拦截 in 操作。比如，你可以用它来隐藏对象上某些属性。\n- get — 用来拦截读取操作。比如当试图读取不存在的属性时，你可以用它来返回默认值。\n- set — 用来拦截赋值操作。比如给属性赋值的时候你可以增加验证的逻辑，如果验证不通过可以抛出错误。\n- apply — 用来拦截函数调用操作。比如，你可以把所有的函数调用都包裹在 try/catch 语句块中。\n\n```\nconst Car = {\n  maker: 'BMW',\n  year: 2018,\n};\n\n// 验证属性的赋值（set：用来拦截赋值操作）\nconst proxyCar = new Proxy(Car, {\n  set(obj, prop, value) {\n    // 为maker属性赋值时长度必须大于0\n    if (prop === 'maker' && value.length < 1) {\n      throw new Error('Invalid maker');\n    }\n\n    // 为year赋值时数据类型必须是number\n    if (prop === 'year' && typeof value !== 'number') {\n      throw new Error('Invalid year');\n    }\n    obj[prop] = value;\n    return true;\n  }\n\n});\n```\n\n这样Proxy就可以来监测对象了，比如：\n- 函数执行时间\n- 函数的调用者或属性的访问者\n- 统计每个函数或属性的被访问次数\n...\n\n通过一个新构造函数来扩展一个已有的构造函数：\n```\nfunction extend(sup,base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype,\"constructor\"\n  ); // 返回指定对象上一个自有属性对应的属性描述符\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target,obj,args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that,args);\n      base.apply(that,args);\n    }\n  };\n  var proxy = new Proxy(base,handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, \"constructor\", descriptor);\n  return proxy;\n}\n\nvar Person = function(name){\n  this.name = name\n};\n\nvar Boy = extend(Person, function(name, age) {\n  this.age = age;\n});\n\nBoy.prototype.sex = \"M\";\n\nvar Peter = new Boy(\"Peter\", 13);\nconsole.log(Peter.sex);  // \"M\"\nconsole.log(Peter.name); // \"Peter\"\nconsole.log(Peter.age);  // 13\n```\n\n[Proxy | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","slug":"js-proxy","published":1,"updated":"2020-04-21T08:53:30.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp3000fe36kn1n5b9b0","content":"<blockquote>\n<p>let p = new Proxy(target, handler);<br>用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p>\n</blockquote>\n<p>target：用<code>Proxy</code>包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）；<br>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p>\n<p><code>Proxy</code>构造函数获取一个<code>target</code>对象，和一个用来拦截<code>target</code>对象不同行为的<code>handler</code>对象。可以设置下面这些拦截项：</p>\n<ul>\n<li>has — 拦截 in 操作。比如，你可以用它来隐藏对象上某些属性。</li>\n<li>get — 用来拦截读取操作。比如当试图读取不存在的属性时，你可以用它来返回默认值。</li>\n<li>set — 用来拦截赋值操作。比如给属性赋值的时候你可以增加验证的逻辑，如果验证不通过可以抛出错误。</li>\n<li>apply — 用来拦截函数调用操作。比如，你可以把所有的函数调用都包裹在 try/catch 语句块中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  maker: &apos;BMW&apos;,</span><br><span class=\"line\">  year: 2018,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证属性的赋值（set：用来拦截赋值操作）</span><br><span class=\"line\">const proxyCar = new Proxy(Car, &#123;</span><br><span class=\"line\">  set(obj, prop, value) &#123;</span><br><span class=\"line\">    // 为maker属性赋值时长度必须大于0</span><br><span class=\"line\">    if (prop === &apos;maker&apos; &amp;&amp; value.length &lt; 1) &#123;</span><br><span class=\"line\">      throw new Error(&apos;Invalid maker&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 为year赋值时数据类型必须是number</span><br><span class=\"line\">    if (prop === &apos;year&apos; &amp;&amp; typeof value !== &apos;number&apos;) &#123;</span><br><span class=\"line\">      throw new Error(&apos;Invalid year&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样Proxy就可以来监测对象了，比如：</p>\n<ul>\n<li>函数执行时间</li>\n<li>函数的调用者或属性的访问者</li>\n<li>统计每个函数或属性的被访问次数<br>…</li>\n</ul>\n<p>通过一个新构造函数来扩展一个已有的构造函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function extend(sup,base) &#123;</span><br><span class=\"line\">  var descriptor = Object.getOwnPropertyDescriptor(</span><br><span class=\"line\">    base.prototype,&quot;constructor&quot;</span><br><span class=\"line\">  ); // 返回指定对象上一个自有属性对应的属性描述符</span><br><span class=\"line\">  base.prototype = Object.create(sup.prototype);</span><br><span class=\"line\">  var handler = &#123;</span><br><span class=\"line\">    construct: function(target, args) &#123;</span><br><span class=\"line\">      var obj = Object.create(base.prototype);</span><br><span class=\"line\">      this.apply(target,obj,args);</span><br><span class=\"line\">      return obj;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    apply: function(target, that, args) &#123;</span><br><span class=\"line\">      sup.apply(that,args);</span><br><span class=\"line\">      base.apply(that,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  var proxy = new Proxy(base,handler);</span><br><span class=\"line\">  descriptor.value = proxy;</span><br><span class=\"line\">  Object.defineProperty(base.prototype, &quot;constructor&quot;, descriptor);</span><br><span class=\"line\">  return proxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var Person = function(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Boy = extend(Person, function(name, age) &#123;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Boy.prototype.sex = &quot;M&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Peter = new Boy(&quot;Peter&quot;, 13);</span><br><span class=\"line\">console.log(Peter.sex);  // &quot;M&quot;</span><br><span class=\"line\">console.log(Peter.name); // &quot;Peter&quot;</span><br><span class=\"line\">console.log(Peter.age);  // 13</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">Proxy | MDN</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>let p = new Proxy(target, handler);<br>用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p>\n</blockquote>\n<p>target：用<code>Proxy</code>包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）；<br>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p>\n<p><code>Proxy</code>构造函数获取一个<code>target</code>对象，和一个用来拦截<code>target</code>对象不同行为的<code>handler</code>对象。可以设置下面这些拦截项：</p>\n<ul>\n<li>has — 拦截 in 操作。比如，你可以用它来隐藏对象上某些属性。</li>\n<li>get — 用来拦截读取操作。比如当试图读取不存在的属性时，你可以用它来返回默认值。</li>\n<li>set — 用来拦截赋值操作。比如给属性赋值的时候你可以增加验证的逻辑，如果验证不通过可以抛出错误。</li>\n<li>apply — 用来拦截函数调用操作。比如，你可以把所有的函数调用都包裹在 try/catch 语句块中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  maker: &apos;BMW&apos;,</span><br><span class=\"line\">  year: 2018,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证属性的赋值（set：用来拦截赋值操作）</span><br><span class=\"line\">const proxyCar = new Proxy(Car, &#123;</span><br><span class=\"line\">  set(obj, prop, value) &#123;</span><br><span class=\"line\">    // 为maker属性赋值时长度必须大于0</span><br><span class=\"line\">    if (prop === &apos;maker&apos; &amp;&amp; value.length &lt; 1) &#123;</span><br><span class=\"line\">      throw new Error(&apos;Invalid maker&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 为year赋值时数据类型必须是number</span><br><span class=\"line\">    if (prop === &apos;year&apos; &amp;&amp; typeof value !== &apos;number&apos;) &#123;</span><br><span class=\"line\">      throw new Error(&apos;Invalid year&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样Proxy就可以来监测对象了，比如：</p>\n<ul>\n<li>函数执行时间</li>\n<li>函数的调用者或属性的访问者</li>\n<li>统计每个函数或属性的被访问次数<br>…</li>\n</ul>\n<p>通过一个新构造函数来扩展一个已有的构造函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function extend(sup,base) &#123;</span><br><span class=\"line\">  var descriptor = Object.getOwnPropertyDescriptor(</span><br><span class=\"line\">    base.prototype,&quot;constructor&quot;</span><br><span class=\"line\">  ); // 返回指定对象上一个自有属性对应的属性描述符</span><br><span class=\"line\">  base.prototype = Object.create(sup.prototype);</span><br><span class=\"line\">  var handler = &#123;</span><br><span class=\"line\">    construct: function(target, args) &#123;</span><br><span class=\"line\">      var obj = Object.create(base.prototype);</span><br><span class=\"line\">      this.apply(target,obj,args);</span><br><span class=\"line\">      return obj;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    apply: function(target, that, args) &#123;</span><br><span class=\"line\">      sup.apply(that,args);</span><br><span class=\"line\">      base.apply(that,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  var proxy = new Proxy(base,handler);</span><br><span class=\"line\">  descriptor.value = proxy;</span><br><span class=\"line\">  Object.defineProperty(base.prototype, &quot;constructor&quot;, descriptor);</span><br><span class=\"line\">  return proxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var Person = function(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Boy = extend(Person, function(name, age) &#123;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Boy.prototype.sex = &quot;M&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Peter = new Boy(&quot;Peter&quot;, 13);</span><br><span class=\"line\">console.log(Peter.sex);  // &quot;M&quot;</span><br><span class=\"line\">console.log(Peter.name); // &quot;Peter&quot;</span><br><span class=\"line\">console.log(Peter.age);  // 13</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">Proxy | MDN</a></p>\n"},{"title":"「js」 yield关键词","date":"2020-04-19T08:11:03.000Z","_content":"\n> yield 关键字用来暂停和恢复一个生成器函数（(function\\* 或遗留的生成器函数）。\n\n- yield 是 ES6 的新关键字，使生成器函数执行暂停，yield 关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的 return 关键字。\n- yield 关键字实际返回一个 IteratorResult（迭代器）对象，它有两个属性，value 和 done，value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。\n- yield 无法单独工作，需要配合 generator(生成器)的其他函数，如 next，懒汉式操作，展现强大的主动控制特性。\n\n### 语法\n\n> [rv] = yield [expression];\n\n- expression\n\n  定义通过迭代器协议从生成器函数返回的值。如果省略，则返回 undefined。\n\n- rv\n\n  返回传递给生成器的 next()方法的可选值，以恢复其执行。\n\n### 使用\n\n生成器函数的声明例子:\n\n```js\nfunction* countAppleSales() {\n  var saleList = [3, 7, 5];\n  for (var i = 0; i < saleList.length; i++) {\n    yield saleList[i];\n  }\n}\nvar appleStore = countAppleSales(); // Generator { }\nconsole.log(appleStore); // countAppleSales {<closed>}\nconsole.log(appleStore.next()); // { value: 3, done: false }\nconsole.log(appleStore.next()); // { value: 7, done: false }\nconsole.log(appleStore.next()); // { value: 5, done: false }\nconsole.log(appleStore.next()); // { value: undefined, done: true }\n```\n\n- yield 并不能直接生产值，而是产生一个等待输出的函数\n- 除 IE 外，其他所有浏览器均可兼容（包括 win10 的 Edge）\n- 某个函数包含了 yield，意味着这个函数已经是一个 Generator\n- 如果 yield 在其他表达式中，需要用()单独括起来\n- yield 表达式本身没有返回值，或者说总是返回 undefined(由 next 返回)\n- next()可无限调用，但既定循环完成之后总是返回 undeinded\n\n注意不要在判断中调用 next, 这个本身也是在消耗 next 迭代:\n\n```js\n// 每次调用next都会被消耗, 所以下面一个循环会消耗两次next\nwhile (!appleStore.next().done) {\n  appleStore.next();\n}\n```\n\n### 深入理解\n\n```js\nfunction* test(x) {\n  let y = 2 * (yield x + 1);\n  let z = yield y / 3;\n  console.log(`x = ${x}, y = ${y}, z = ${z}`);\n  return x + y + z;\n}\nvar a_test = test(5);\na_test.next(); // {value: 6, done: false}\na_test.next(); // {value: NaN, done: false}\na_test.next(); // x = 5, y = NaN, z = undefined {value: NaN, done: false}\n\nvar b_test = test(5);\nb_test.next(); // {value: 6, done: false}\nb_test.next(6); // {value: 4, done: false}\nb_test.next(7); // x = 5, y = 12, z = 7 {value: 24, done: true}\n```\n\n**next() 传参是对 yield 整体的传参，否则 yield 类似于 return**\n\n#### a_test\n\n1. x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;\n2. 第二次调用无参数传入, y = 2 \\* undefined 即为 NaN, 所以无法得到 z;\n3. 同上;\n\n#### b_test\n\n1. x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;\n2. 第二次调用, 传入 6, yield (x + 1) = 入参, y = 2 \\* 6 = 12, 并得到第二个 yield 返回: yield (y / 3) 即 4;\n3. 第三次调用, 传入 7, yield (y / 3) = 入参, 所以 z = 7, 并得到返回值(x + y + z) = 24;\n\n#### next()函数及参数\n\n在 js 中，虽然借鉴了 python 的函数，但是也进行了自己的改造，由于没有 send()函数，所以无法直接传递 yield 的值。\n\nnext()可以带一个参数，该参数会被认为是上一个 yield 整体的返回值，稍后将在代码中展示。\n\n在某种程度上，next()可以直接当做 send()使用\n\n它的意义在于，可以**在不同阶段从外部直接向内部注入不同的值来调整函数**的行为(这一点是其他循环很难做到的，或要付出较大的代价才可以做到)\n\n参考: [深入理解 js 中的 yield](https://www.jianshu.com/p/36c74e4ca9eb)\n\n### 相关 function\\*\n\n> function\\* 定义一个生成器函数 (generator function)，它返回一个 Generator 对象。\n\n生成器函数在执行时能暂停，后面又能从暂停处继续执行。\n\n调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （ iterator ）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会**执行到第一个（后续）出现 yield 的位置**为止，yield 后紧跟迭代器要返回的值。或者如果用的是 yield\\*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。\n\n调用 next()方法时，如果传入了参数，那么这个参数会传给上一条执行的 yield 语句左边的变量。\n\n#### yield*\n\n```js\nfunction* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i){\n  yield i;\n  yield* anotherGenerator(i);// 移交执行权, 执行完回来\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n```\n\n#### 生成器函数不能当构造器使用\n\n```js\nfunction* f() {}\nvar obj = new f; // throws \"TypeError: f is not a constructor\"\n```","source":"_posts/js-yield.md","raw":"---\ntitle: 「js」 yield关键词\ndate: 2020-04-19 16:11:03\ntags:\n  - js\ncategories:\n  - js\n---\n\n> yield 关键字用来暂停和恢复一个生成器函数（(function\\* 或遗留的生成器函数）。\n\n- yield 是 ES6 的新关键字，使生成器函数执行暂停，yield 关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的 return 关键字。\n- yield 关键字实际返回一个 IteratorResult（迭代器）对象，它有两个属性，value 和 done，value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。\n- yield 无法单独工作，需要配合 generator(生成器)的其他函数，如 next，懒汉式操作，展现强大的主动控制特性。\n\n### 语法\n\n> [rv] = yield [expression];\n\n- expression\n\n  定义通过迭代器协议从生成器函数返回的值。如果省略，则返回 undefined。\n\n- rv\n\n  返回传递给生成器的 next()方法的可选值，以恢复其执行。\n\n### 使用\n\n生成器函数的声明例子:\n\n```js\nfunction* countAppleSales() {\n  var saleList = [3, 7, 5];\n  for (var i = 0; i < saleList.length; i++) {\n    yield saleList[i];\n  }\n}\nvar appleStore = countAppleSales(); // Generator { }\nconsole.log(appleStore); // countAppleSales {<closed>}\nconsole.log(appleStore.next()); // { value: 3, done: false }\nconsole.log(appleStore.next()); // { value: 7, done: false }\nconsole.log(appleStore.next()); // { value: 5, done: false }\nconsole.log(appleStore.next()); // { value: undefined, done: true }\n```\n\n- yield 并不能直接生产值，而是产生一个等待输出的函数\n- 除 IE 外，其他所有浏览器均可兼容（包括 win10 的 Edge）\n- 某个函数包含了 yield，意味着这个函数已经是一个 Generator\n- 如果 yield 在其他表达式中，需要用()单独括起来\n- yield 表达式本身没有返回值，或者说总是返回 undefined(由 next 返回)\n- next()可无限调用，但既定循环完成之后总是返回 undeinded\n\n注意不要在判断中调用 next, 这个本身也是在消耗 next 迭代:\n\n```js\n// 每次调用next都会被消耗, 所以下面一个循环会消耗两次next\nwhile (!appleStore.next().done) {\n  appleStore.next();\n}\n```\n\n### 深入理解\n\n```js\nfunction* test(x) {\n  let y = 2 * (yield x + 1);\n  let z = yield y / 3;\n  console.log(`x = ${x}, y = ${y}, z = ${z}`);\n  return x + y + z;\n}\nvar a_test = test(5);\na_test.next(); // {value: 6, done: false}\na_test.next(); // {value: NaN, done: false}\na_test.next(); // x = 5, y = NaN, z = undefined {value: NaN, done: false}\n\nvar b_test = test(5);\nb_test.next(); // {value: 6, done: false}\nb_test.next(6); // {value: 4, done: false}\nb_test.next(7); // x = 5, y = 12, z = 7 {value: 24, done: true}\n```\n\n**next() 传参是对 yield 整体的传参，否则 yield 类似于 return**\n\n#### a_test\n\n1. x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;\n2. 第二次调用无参数传入, y = 2 \\* undefined 即为 NaN, 所以无法得到 z;\n3. 同上;\n\n#### b_test\n\n1. x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;\n2. 第二次调用, 传入 6, yield (x + 1) = 入参, y = 2 \\* 6 = 12, 并得到第二个 yield 返回: yield (y / 3) 即 4;\n3. 第三次调用, 传入 7, yield (y / 3) = 入参, 所以 z = 7, 并得到返回值(x + y + z) = 24;\n\n#### next()函数及参数\n\n在 js 中，虽然借鉴了 python 的函数，但是也进行了自己的改造，由于没有 send()函数，所以无法直接传递 yield 的值。\n\nnext()可以带一个参数，该参数会被认为是上一个 yield 整体的返回值，稍后将在代码中展示。\n\n在某种程度上，next()可以直接当做 send()使用\n\n它的意义在于，可以**在不同阶段从外部直接向内部注入不同的值来调整函数**的行为(这一点是其他循环很难做到的，或要付出较大的代价才可以做到)\n\n参考: [深入理解 js 中的 yield](https://www.jianshu.com/p/36c74e4ca9eb)\n\n### 相关 function\\*\n\n> function\\* 定义一个生成器函数 (generator function)，它返回一个 Generator 对象。\n\n生成器函数在执行时能暂停，后面又能从暂停处继续执行。\n\n调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （ iterator ）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会**执行到第一个（后续）出现 yield 的位置**为止，yield 后紧跟迭代器要返回的值。或者如果用的是 yield\\*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。\n\n调用 next()方法时，如果传入了参数，那么这个参数会传给上一条执行的 yield 语句左边的变量。\n\n#### yield*\n\n```js\nfunction* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i){\n  yield i;\n  yield* anotherGenerator(i);// 移交执行权, 执行完回来\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n```\n\n#### 生成器函数不能当构造器使用\n\n```js\nfunction* f() {}\nvar obj = new f; // throws \"TypeError: f is not a constructor\"\n```","slug":"js-yield","published":1,"updated":"2020-04-21T08:53:30.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp5000je36k938p3mc7","content":"<blockquote>\n<p>yield 关键字用来暂停和恢复一个生成器函数（(function* 或遗留的生成器函数）。</p>\n</blockquote>\n<ul>\n<li>yield 是 ES6 的新关键字，使生成器函数执行暂停，yield 关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的 return 关键字。</li>\n<li>yield 关键字实际返回一个 IteratorResult（迭代器）对象，它有两个属性，value 和 done，value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。</li>\n<li>yield 无法单独工作，需要配合 generator(生成器)的其他函数，如 next，懒汉式操作，展现强大的主动控制特性。</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><blockquote>\n<p>[rv] = yield [expression];</p>\n</blockquote>\n<ul>\n<li><p>expression</p>\n<p>定义通过迭代器协议从生成器函数返回的值。如果省略，则返回 undefined。</p>\n</li>\n<li><p>rv</p>\n<p>返回传递给生成器的 next()方法的可选值，以恢复其执行。</p>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>生成器函数的声明例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">countAppleSales</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> saleList = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; saleList.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> saleList[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> appleStore = countAppleSales(); <span class=\"comment\">// Generator &#123; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore); <span class=\"comment\">// countAppleSales &#123;&lt;closed&gt;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>yield 并不能直接生产值，而是产生一个等待输出的函数</li>\n<li>除 IE 外，其他所有浏览器均可兼容（包括 win10 的 Edge）</li>\n<li>某个函数包含了 yield，意味着这个函数已经是一个 Generator</li>\n<li>如果 yield 在其他表达式中，需要用()单独括起来</li>\n<li>yield 表达式本身没有返回值，或者说总是返回 undefined(由 next 返回)</li>\n<li>next()可无限调用，但既定循环完成之后总是返回 undeinded</li>\n</ul>\n<p>注意不要在判断中调用 next, 这个本身也是在消耗 next 迭代:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次调用next都会被消耗, 所以下面一个循环会消耗两次next</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!appleStore.next().done) &#123;</span><br><span class=\"line\">  appleStore.next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>, z = <span class=\"subst\">$&#123;z&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a_test = test(<span class=\"number\">5</span>);</span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// &#123;value: 6, done: false&#125;</span></span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// &#123;value: NaN, done: false&#125;</span></span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// x = 5, y = NaN, z = undefined &#123;value: NaN, done: false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b_test = test(<span class=\"number\">5</span>);</span><br><span class=\"line\">b_test.next(); <span class=\"comment\">// &#123;value: 6, done: false&#125;</span></span><br><span class=\"line\">b_test.next(<span class=\"number\">6</span>); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\">b_test.next(<span class=\"number\">7</span>); <span class=\"comment\">// x = 5, y = 12, z = 7 &#123;value: 24, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>next() 传参是对 yield 整体的传参，否则 yield 类似于 return</strong></p>\n<h4 id=\"a-test\"><a href=\"#a-test\" class=\"headerlink\" title=\"a_test\"></a>a_test</h4><ol>\n<li>x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;</li>\n<li>第二次调用无参数传入, y = 2 * undefined 即为 NaN, 所以无法得到 z;</li>\n<li>同上;</li>\n</ol>\n<h4 id=\"b-test\"><a href=\"#b-test\" class=\"headerlink\" title=\"b_test\"></a>b_test</h4><ol>\n<li>x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;</li>\n<li>第二次调用, 传入 6, yield (x + 1) = 入参, y = 2 * 6 = 12, 并得到第二个 yield 返回: yield (y / 3) 即 4;</li>\n<li>第三次调用, 传入 7, yield (y / 3) = 入参, 所以 z = 7, 并得到返回值(x + y + z) = 24;</li>\n</ol>\n<h4 id=\"next-函数及参数\"><a href=\"#next-函数及参数\" class=\"headerlink\" title=\"next()函数及参数\"></a>next()函数及参数</h4><p>在 js 中，虽然借鉴了 python 的函数，但是也进行了自己的改造，由于没有 send()函数，所以无法直接传递 yield 的值。</p>\n<p>next()可以带一个参数，该参数会被认为是上一个 yield 整体的返回值，稍后将在代码中展示。</p>\n<p>在某种程度上，next()可以直接当做 send()使用</p>\n<p>它的意义在于，可以<strong>在不同阶段从外部直接向内部注入不同的值来调整函数</strong>的行为(这一点是其他循环很难做到的，或要付出较大的代价才可以做到)</p>\n<p>参考: <a href=\"https://www.jianshu.com/p/36c74e4ca9eb\" target=\"_blank\" rel=\"noopener\">深入理解 js 中的 yield</a></p>\n<h3 id=\"相关-function\"><a href=\"#相关-function\" class=\"headerlink\" title=\"相关 function*\"></a>相关 function*</h3><blockquote>\n<p>function* 定义一个生成器函数 (generator function)，它返回一个 Generator 对象。</p>\n</blockquote>\n<p>生成器函数在执行时能暂停，后面又能从暂停处继续执行。</p>\n<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （ iterator ）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会<strong>执行到第一个（后续）出现 yield 的位置</strong>为止，yield 后紧跟迭代器要返回的值。或者如果用的是 yield*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p>\n<p>调用 next()方法时，如果传入了参数，那么这个参数会传给上一条执行的 yield 语句左边的变量。</p>\n<h4 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">anotherGenerator</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* anotherGenerator(i);<span class=\"comment\">// 移交执行权, 执行完回来</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = generator(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 13</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成器函数不能当构造器使用\"><a href=\"#生成器函数不能当构造器使用\" class=\"headerlink\" title=\"生成器函数不能当构造器使用\"></a>生成器函数不能当构造器使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> f; <span class=\"comment\">// throws \"TypeError: f is not a constructor\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>yield 关键字用来暂停和恢复一个生成器函数（(function* 或遗留的生成器函数）。</p>\n</blockquote>\n<ul>\n<li>yield 是 ES6 的新关键字，使生成器函数执行暂停，yield 关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的 return 关键字。</li>\n<li>yield 关键字实际返回一个 IteratorResult（迭代器）对象，它有两个属性，value 和 done，value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。</li>\n<li>yield 无法单独工作，需要配合 generator(生成器)的其他函数，如 next，懒汉式操作，展现强大的主动控制特性。</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><blockquote>\n<p>[rv] = yield [expression];</p>\n</blockquote>\n<ul>\n<li><p>expression</p>\n<p>定义通过迭代器协议从生成器函数返回的值。如果省略，则返回 undefined。</p>\n</li>\n<li><p>rv</p>\n<p>返回传递给生成器的 next()方法的可选值，以恢复其执行。</p>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>生成器函数的声明例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">countAppleSales</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> saleList = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; saleList.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> saleList[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> appleStore = countAppleSales(); <span class=\"comment\">// Generator &#123; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore); <span class=\"comment\">// countAppleSales &#123;&lt;closed&gt;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>yield 并不能直接生产值，而是产生一个等待输出的函数</li>\n<li>除 IE 外，其他所有浏览器均可兼容（包括 win10 的 Edge）</li>\n<li>某个函数包含了 yield，意味着这个函数已经是一个 Generator</li>\n<li>如果 yield 在其他表达式中，需要用()单独括起来</li>\n<li>yield 表达式本身没有返回值，或者说总是返回 undefined(由 next 返回)</li>\n<li>next()可无限调用，但既定循环完成之后总是返回 undeinded</li>\n</ul>\n<p>注意不要在判断中调用 next, 这个本身也是在消耗 next 迭代:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次调用next都会被消耗, 所以下面一个循环会消耗两次next</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!appleStore.next().done) &#123;</span><br><span class=\"line\">  appleStore.next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>, z = <span class=\"subst\">$&#123;z&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a_test = test(<span class=\"number\">5</span>);</span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// &#123;value: 6, done: false&#125;</span></span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// &#123;value: NaN, done: false&#125;</span></span><br><span class=\"line\">a_test.next(); <span class=\"comment\">// x = 5, y = NaN, z = undefined &#123;value: NaN, done: false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b_test = test(<span class=\"number\">5</span>);</span><br><span class=\"line\">b_test.next(); <span class=\"comment\">// &#123;value: 6, done: false&#125;</span></span><br><span class=\"line\">b_test.next(<span class=\"number\">6</span>); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\">b_test.next(<span class=\"number\">7</span>); <span class=\"comment\">// x = 5, y = 12, z = 7 &#123;value: 24, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>next() 传参是对 yield 整体的传参，否则 yield 类似于 return</strong></p>\n<h4 id=\"a-test\"><a href=\"#a-test\" class=\"headerlink\" title=\"a_test\"></a>a_test</h4><ol>\n<li>x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;</li>\n<li>第二次调用无参数传入, y = 2 * undefined 即为 NaN, 所以无法得到 z;</li>\n<li>同上;</li>\n</ol>\n<h4 id=\"b-test\"><a href=\"#b-test\" class=\"headerlink\" title=\"b_test\"></a>b_test</h4><ol>\n<li>x 恒为 5, 第一次调用可得到对应的一个 yield 返回值: yield (x + 1), 相当于 return x + 1;</li>\n<li>第二次调用, 传入 6, yield (x + 1) = 入参, y = 2 * 6 = 12, 并得到第二个 yield 返回: yield (y / 3) 即 4;</li>\n<li>第三次调用, 传入 7, yield (y / 3) = 入参, 所以 z = 7, 并得到返回值(x + y + z) = 24;</li>\n</ol>\n<h4 id=\"next-函数及参数\"><a href=\"#next-函数及参数\" class=\"headerlink\" title=\"next()函数及参数\"></a>next()函数及参数</h4><p>在 js 中，虽然借鉴了 python 的函数，但是也进行了自己的改造，由于没有 send()函数，所以无法直接传递 yield 的值。</p>\n<p>next()可以带一个参数，该参数会被认为是上一个 yield 整体的返回值，稍后将在代码中展示。</p>\n<p>在某种程度上，next()可以直接当做 send()使用</p>\n<p>它的意义在于，可以<strong>在不同阶段从外部直接向内部注入不同的值来调整函数</strong>的行为(这一点是其他循环很难做到的，或要付出较大的代价才可以做到)</p>\n<p>参考: <a href=\"https://www.jianshu.com/p/36c74e4ca9eb\" target=\"_blank\" rel=\"noopener\">深入理解 js 中的 yield</a></p>\n<h3 id=\"相关-function\"><a href=\"#相关-function\" class=\"headerlink\" title=\"相关 function*\"></a>相关 function*</h3><blockquote>\n<p>function* 定义一个生成器函数 (generator function)，它返回一个 Generator 对象。</p>\n</blockquote>\n<p>生成器函数在执行时能暂停，后面又能从暂停处继续执行。</p>\n<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （ iterator ）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会<strong>执行到第一个（后续）出现 yield 的位置</strong>为止，yield 后紧跟迭代器要返回的值。或者如果用的是 yield*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p>\n<p>调用 next()方法时，如果传入了参数，那么这个参数会传给上一条执行的 yield 语句左边的变量。</p>\n<h4 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">anotherGenerator</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* anotherGenerator(i);<span class=\"comment\">// 移交执行权, 执行完回来</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = generator(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 13</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成器函数不能当构造器使用\"><a href=\"#生成器函数不能当构造器使用\" class=\"headerlink\" title=\"生成器函数不能当构造器使用\"></a>生成器函数不能当构造器使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> f; <span class=\"comment\">// throws \"TypeError: f is not a constructor\"</span></span><br></pre></td></tr></table></figure>"},{"title":"js绑定call, apply, bind","date":"2019-01-23T08:01:15.000Z","_content":"\n> 在JavaScript内Function有3个自带的方法（call，apply，bind），均是为了改变函数体内的this指向。\n\n相同：call，apply，bind函数第一个参数都是this要指向的对象，即想指定的上下文。\n\n区别：\n- apply的第二个参数是一个参数数组；\n- call第二个及以后是多个参数（即参数数组内容全部列举）；\n- bind会创建一个新函数（绑定函数），返回也是函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数，使用bind不会立即执行，在调用创建的新的函数才会执行。\n\napply和call功能是完全一样的，传参就在于传参的方式。\n\napply, call用法：\n1. 数组追加\n```\nvar array1 = [12, 'foo', {name:'Joe'}, -2458];\nvar array2 = ['Doe' , 555 , 100];\nArray.prototype.push.call(array1, array2);\n// [12, 'foo', {name:'Joe'}, -2458, ['Doe' , 555 , 100]]\n// array1.length = 5\n\nArray.prototype.push.apply(array1, array2); // 这里用 apply 第二个参数是一个数组\n// [12, 'foo', {name:'Joe'}, -2458, 'Doe' , 555 , 100]\n// array1.length = 7\n```\n2. 获得数组内的最大值，最小值\n```\n// 由于没有指向，第一个参数传null或本身\nvar numbers = [5, 458, 120, -215]; \nvar maxInNumbers = Math.max.apply(Math, numbers),   // 458\n    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215); // 458\n```\n3. 验证是否是数组（前提是toString（）方法没有被重写过）\n```\nfunction isArray(obj){ \n    return Object.prototype.toString.call(obj) === '[object Array]' ;\n}\n```\n\nbind用法：\n```\nvar bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\nbar(); // undefined\nvar func = bar.bind(foo); //此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）\n\n\nfunc(); // 3\n```","source":"_posts/js绑定.md","raw":"---\ntitle: js绑定call, apply, bind\ndate: 2019-01-23 16:01:15\ntags: \ncategories: js\n---\n\n> 在JavaScript内Function有3个自带的方法（call，apply，bind），均是为了改变函数体内的this指向。\n\n相同：call，apply，bind函数第一个参数都是this要指向的对象，即想指定的上下文。\n\n区别：\n- apply的第二个参数是一个参数数组；\n- call第二个及以后是多个参数（即参数数组内容全部列举）；\n- bind会创建一个新函数（绑定函数），返回也是函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数，使用bind不会立即执行，在调用创建的新的函数才会执行。\n\napply和call功能是完全一样的，传参就在于传参的方式。\n\napply, call用法：\n1. 数组追加\n```\nvar array1 = [12, 'foo', {name:'Joe'}, -2458];\nvar array2 = ['Doe' , 555 , 100];\nArray.prototype.push.call(array1, array2);\n// [12, 'foo', {name:'Joe'}, -2458, ['Doe' , 555 , 100]]\n// array1.length = 5\n\nArray.prototype.push.apply(array1, array2); // 这里用 apply 第二个参数是一个数组\n// [12, 'foo', {name:'Joe'}, -2458, 'Doe' , 555 , 100]\n// array1.length = 7\n```\n2. 获得数组内的最大值，最小值\n```\n// 由于没有指向，第一个参数传null或本身\nvar numbers = [5, 458, 120, -215]; \nvar maxInNumbers = Math.max.apply(Math, numbers),   // 458\n    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215); // 458\n```\n3. 验证是否是数组（前提是toString（）方法没有被重写过）\n```\nfunction isArray(obj){ \n    return Object.prototype.toString.call(obj) === '[object Array]' ;\n}\n```\n\nbind用法：\n```\nvar bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\nbar(); // undefined\nvar func = bar.bind(foo); //此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）\n\n\nfunc(); // 3\n```","slug":"js绑定","published":1,"updated":"2020-04-21T08:53:30.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp5000ke36kbxeudr38","content":"<blockquote>\n<p>在JavaScript内Function有3个自带的方法（call，apply，bind），均是为了改变函数体内的this指向。</p>\n</blockquote>\n<p>相同：call，apply，bind函数第一个参数都是this要指向的对象，即想指定的上下文。</p>\n<p>区别：</p>\n<ul>\n<li>apply的第二个参数是一个参数数组；</li>\n<li>call第二个及以后是多个参数（即参数数组内容全部列举）；</li>\n<li>bind会创建一个新函数（绑定函数），返回也是函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数，使用bind不会立即执行，在调用创建的新的函数才会执行。</li>\n</ul>\n<p>apply和call功能是完全一样的，传参就在于传参的方式。</p>\n<p>apply, call用法：</p>\n<ol>\n<li><p>数组追加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array1 = [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458];</span><br><span class=\"line\">var array2 = [&apos;Doe&apos; , 555 , 100];</span><br><span class=\"line\">Array.prototype.push.call(array1, array2);</span><br><span class=\"line\">// [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458, [&apos;Doe&apos; , 555 , 100]]</span><br><span class=\"line\">// array1.length = 5</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.push.apply(array1, array2); // 这里用 apply 第二个参数是一个数组</span><br><span class=\"line\">// [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458, &apos;Doe&apos; , 555 , 100]</span><br><span class=\"line\">// array1.length = 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获得数组内的最大值，最小值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于没有指向，第一个参数传null或本身</span><br><span class=\"line\">var numbers = [5, 458, 120, -215]; </span><br><span class=\"line\">var maxInNumbers = Math.max.apply(Math, numbers),   // 458</span><br><span class=\"line\">    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215); // 458</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否是数组（前提是toString（）方法没有被重写过）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isArray(obj)&#123; </span><br><span class=\"line\">    return Object.prototype.toString.call(obj) === &apos;[object Array]&apos; ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>bind用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function()&#123;</span><br><span class=\"line\">    console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); // undefined</span><br><span class=\"line\">var func = bar.bind(foo); //此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func(); // 3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在JavaScript内Function有3个自带的方法（call，apply，bind），均是为了改变函数体内的this指向。</p>\n</blockquote>\n<p>相同：call，apply，bind函数第一个参数都是this要指向的对象，即想指定的上下文。</p>\n<p>区别：</p>\n<ul>\n<li>apply的第二个参数是一个参数数组；</li>\n<li>call第二个及以后是多个参数（即参数数组内容全部列举）；</li>\n<li>bind会创建一个新函数（绑定函数），返回也是函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数，使用bind不会立即执行，在调用创建的新的函数才会执行。</li>\n</ul>\n<p>apply和call功能是完全一样的，传参就在于传参的方式。</p>\n<p>apply, call用法：</p>\n<ol>\n<li><p>数组追加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array1 = [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458];</span><br><span class=\"line\">var array2 = [&apos;Doe&apos; , 555 , 100];</span><br><span class=\"line\">Array.prototype.push.call(array1, array2);</span><br><span class=\"line\">// [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458, [&apos;Doe&apos; , 555 , 100]]</span><br><span class=\"line\">// array1.length = 5</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.push.apply(array1, array2); // 这里用 apply 第二个参数是一个数组</span><br><span class=\"line\">// [12, &apos;foo&apos;, &#123;name:&apos;Joe&apos;&#125;, -2458, &apos;Doe&apos; , 555 , 100]</span><br><span class=\"line\">// array1.length = 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获得数组内的最大值，最小值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于没有指向，第一个参数传null或本身</span><br><span class=\"line\">var numbers = [5, 458, 120, -215]; </span><br><span class=\"line\">var maxInNumbers = Math.max.apply(Math, numbers),   // 458</span><br><span class=\"line\">    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215); // 458</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否是数组（前提是toString（）方法没有被重写过）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isArray(obj)&#123; </span><br><span class=\"line\">    return Object.prototype.toString.call(obj) === &apos;[object Array]&apos; ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>bind用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function()&#123;</span><br><span class=\"line\">    console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); // undefined</span><br><span class=\"line\">var func = bar.bind(foo); //此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func(); // 3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"webpack, 小白的从入门到放弃","date":"2020-01-19T13:18:06.000Z","_content":"\n> `webpack` 是用于编译`Javascript 模块`, 可以看作是**模块打包机**(Webpack is a front-end tool to build JavaScript module scripts for browsers). 分析项目结构, 找到 Javascript 模块以及其他无法在浏览器上直接运行的拓展语言(Scss, TypeScript 等), 并将其转换和打包为合适的格式供浏览器使用。\n\n![webpack](learn-webpack/webpack_00.png)\n\n`webpack`把所有文件都当作模块进行处理, Javascript 代码, css 文件, fonts 以及图片等都可以通过相应的`loader`被处理.\n\n## 安装\n\n```bash\nnpm install --save-dev webpack\n// webpack 4+ 还需安装CLI\nnpm install --save-dev webpack-cli\n```\n\n通常，webpack 通过运行一个或多个`npm scripts`，会在本地`node_modules`目录中查找安装的 webpack：\n\n```json\n\"scripts\": {\n    \"start\": \"webpack --config webpack.config.js\"\n}\n```\n\n## 初始化\n\n新建 webpack-demo 文件夹, 并通过`npm init`初始化, 生成 package.json 文件.\n\n```json\n// 最基本的package.json文件\n{\n  \"name\": \"webpack-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webpack从入门到放弃\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n同时在根目录下新建 app 文件夹(存放原始数据与 Javascript 模块), public 文件夹(webpack 打包后生成的文件, 可供浏览器读取), 并创建一下文件:\n\n- app.js (app 文件夹内)\n- index.html (根目录)\n\n```bash\n  webpack-demo\n  |- package.json\n+ |- index.html\n+ |- /app\n+   |- app.js\n```\n\nindex.html\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!-- bundle.js是打包后的文件 -->\n    <script src=\"./public/bundle.js\"></script>\n  </body>\n</html>\n```\n\napp.js 通过函数返回一个`html`元素内容, 并将返回的节点插入页面:\n\n```js\nfunction component() {\n  var element = document.createElement(\"div\");\n\n  // Lodash(目前通过一个 script 脚本引入)对于执行这一行是必需的\n  element.innerHTML = _.join([\"Hello\", \"webpack\"], \" \");\n\n  return element;\n}\n\ndocument.body.appendChild(component());\n```\n\n命令打包, 并浏览器打开 index.html, 可以正确输出`Hello webpack`:\n\n```bash\nwebpack ./app/app.js ./public/bundle.js\n```\n\n## 配置文件\n\n`webpack.config.js`也是一个简单的 Javascript 模块, 可以把需要的所有与打包相关的信息放在里面.\n\nwebpack.config.js\n\n```js\nmodule.exports = {\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n};\n```\n\n**“\\_\\_dirname”是 node.js 中的一个全局变量，它指向当前执行脚本所在的目录。**\n\n然后在终端使用命令时只需要输入`webpack`:\n\n```bash\nPS E:\\webpack-test> webpack\nHash: a0b4d9f603147ef2aff1\nVersion: webpack 3.5.5\nTime: 381ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  545 kB       0  [emitted]  [big]  main\n   [0] ./app/app.js 316 bytes {0} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n\n对`npm`进行配置可以在终端中使用简单的命令代替`webpack`命令, 做到命令的简化和统一:\n\n```js\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\"\n},\n```\n\n然后就可以使用`npm start`命令直接执行打包:\n\n```basic\nPS E:\\webpack-test> npm start\n\n> webpack-demo@1.0.0 start E:\\webpack-test\n> webpack\n\nHash: a0b4d9f603147ef2aff1\nVersion: webpack 3.5.5\nTime: 352ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  545 kB       0  [emitted]  [big]  main\n   [0] ./app/app.js 316 bytes {0} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n\n## Webpack 其他功能\n\n### Source Maps\n\n`Source Maps`提供了一种对应编译文件和源文件的方法, 使编译后的代码可读性更高, 更容易调试, 可以帮助我们快速定位错误的地方, 通过配置`webpack`可以在打包时为我们生成`source maps`.\n\n<style> table th:first-of-type { width: 100px; } </style>\n\n| devtool 选项                 | 配置结果                                                                                                                                                                                                                                                |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source-map                   | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map，但是它会减慢打包速度；                                                                                                                                                   |\n| cheap-module-source-map      | 在一个单独的文件中生成一个不带列映射的 map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列(符号)，会对调试造成不便；                                                                                        |\n| eval-source-map              | 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 source map。这个选项可以在不影响构建速度的前提下生成完整的 sourcemap，但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项； |\n| cheap-module-eval-source-map | 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射，和 eval-source-map 选项具有相似的缺点；                                                                                               |\n\n上表从上到下打包速度越来越快, 但是同时负担以及执行也会变大, 所以需要根据需要和项目需求选择, 并只在开发阶段使用.\n\n```js\nmodule.exports = {\n  devtool: \"eval-source-map\",\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n};\n```\n\n### 本地服务器 devServer\n\n浏览器可以监听代码修改, 并自动刷新显示最新的修改结果.\n\n```bash\nnpm install --save-dev webpack-dev-server\n```\n\n**PS: 需要注意 webpack 和 webpack-dev-server 的版本匹配;**\n\n`devServer`的配置选项:\n\n```js\nmodule.exports = {\n  ...\n  devServer: {\n    contentBase: \"./public\", // 本地服务器所加载的页面所在的目录, 默认webpack-dev-server会为根文件夹提供本地服务器\n    historyApiFallback: true, // 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n    inline: true, // 设置为true，当源文件改变时会自动刷新页面\n    port: '8888', // 设置默认监听端口，如果省略，默认为”8080“\n  },\n};\n```\n\n开启本地服务器的命令`webpack-dev-server --open`, 我们也可以在`package.json`内设置简化命令:\n\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\"\n  },\n```\n\n使用`npm run server`即可在本地的`8888`端口查看结果:\n\n```bash\nPS E:\\webpack-test> yarn server\nyarn run v1.12.3\n$ webpack-dev-server --open --mode development\ni ｢wds｣: Project is running at http://localhost:8888/\ni ｢wds｣: webpack output is served from /\ni ｢wds｣: Content not from webpack is served from ./public\ni ｢wds｣: 404s will fallback to /index.html\ni ｢wdm｣: Hash: b274af3ebd1d650a24a6\nVersion: webpack 4.42.1\nTime: 701ms\nBuilt at: 2020-04-20 1:40:47 PM\n    Asset     Size  Chunks             Chunk Names\nbundle.js  893 KiB    main  [emitted]  main\nEntrypoint main = bundle.js\n[0] multi (webpack)-dev-server/client?http://localhost:8888 ./app/app.js 40 bytes {main} [built]\n```\n\n**PS: `webpack`运行时可能会出现报错**\n![webpack mode error](learn-webpack/webpack_01.png)\n\n解决: 在命令中增加 mode 环境, `--mode development`, `–mode production`等.\n\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open --mode development\"\n  },\n```\n\n### Loaders\n\n`Loaders`是`webpack`强大的功能之一, 通过使用不同的`loader`, `webpack`可以调用外部的脚本或者工具, 实现对不同格式的文件的处理, 比如将 less 转成 css, ES6/ES7 转成现在浏览器兼容的 js 语法等.\n\n`Loaders`需要单独安装并在`modules`关键字下进行配置:\n\n- `test`: 用以匹配 loaders 所处理文件的拓展名的正则表达式(必填);\n- `loader`: loader 的名称(必填);\n- `include / exclude`: 手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)(可选);\n- `query`: 为 loaders 提供额外的设置选项;\n\n#### Babel\n\n> 一个编译 Javascript 的平台, 可以支持使用的最新的 JS 代码(ES7,ES6 等), 也支持使用基于 JS 进行拓展的语言, 比如 React 的 JSX.\n\nBabel 其实是几个模块化的包，其核心功能位于称为 babel-core 的 npm 包中，webpack 可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包(用得最多的是解析 Es6 的 babel-env-preset 包和解析 JSX 的 babel-preset-react 包)。\n\n```bash\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n```\n\n并在`webpack.config.js`内配置`Babel`:\n\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"env\", \"react\"],\n          },\n        },\n        exclude: /node_modules/,\n      },\n    ],\n  },\n};\n```\n\n同时我们也可以将`Babel`配置独立处理, 单独存放在`.babelrc`的配置文件内, `webpack`会自动调用`.babelrc`里的 babel 配置信息.\n\n```js\n// .babelrc\n{\n  presets: [\"env\", \"react\"],\n}\n\n// webpack.config.js\n{\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"env\", \"react\"],\n          },\n        },\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n```\n\n#### css\n\n`webpack`提供了两个工具处理样式表, `css-loader`和`style-loader`, `css-loader`支持`@import`和`url(...)`的方法实现`require()`的功能, `style-loader`是将所有计算后的样式加入页面, 所以一般都是两者结合使用.\n\n```bash\nnpm install --save-dev style-loader css-loader\n```\n\n在`rules`内配置, 然后就可以直接在 js 文件内使用`import`引入 css 文件:\n\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n> `CSS modules`把 JS 的模块化思想带入 CSS 中来，通过 CSS 模块，所有的类名，动画名默认都只作用于当前模块。`Webpack`对 CSS 模块化提供了非常好的支持，只需要在 CSS loader 中进行简单配置即可，然后就可以直接把 CSS 的类名传递到组件的代码中，这样做有效避免了全局污染。\n\n```js\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              modules: true, // 指定启用css modules\n              localIdentName: \"[name]__[local]--[hash:base64:5]\", // 指定css的类名格式\n            },\n          },\n        ],\n      },\n```\n\n[css module 官方文档](https://github.com/css-modules/css-modules)\n\n主要的`css loaders`:\n\n- `Less Loader`\n- `Sass Loader`\n- `Stylus Loader`\n- `Postcss Loader`\n\n可以使用`Postcss Loader`为 CSS 代码自动添加适应不同浏览器的 css 前缀.\n\n```bash\n# autoprefixer 自动添加前缀的插件\nnpm install --save-dev postcss-loader autoprefixer\n```\n\n在`use`内添加`postcss-loader`:\n\n```js\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              modules: true, // 指定启用css modules\n              localIdentName: \"[name]__[local]--[hash:base64:5]\", // 指定css的类名格式\n            },\n          },\n          {\n              loader: 'postcss-loader',\n              plugins: [\n                  require('autoprefixer')\n              ]\n          }\n        ],\n      }\n```\n\n### Plugins\n\nloaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  plugins: [\n        new webpack.BannerPlugin('httishere, 版权所有，翻版必究')\n  ],\n}\n```\n\n打包生成的文件内:\n\n![banner plugin](learn-webpack/webpack_02.png)\n\n#### 常用插件\n\n- `HtmlWebpackPlugin`\n\n  根据一个简单的 index.html 模板，生成一个自动引用你打包后的 JS 文件的新 index.html。这在每次生成的 js 文件名称不同时非常有用（比如添加了 hash 值）。\n\n  ```js\n  plugins: [\n    ...\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/index.tmpl.html\", //new 一个这个插件的实例，并传入相关的参数\n    }),\n  ],\n  ```\n\n- `Hot Module Replacement`\n\n  支持修改组件代码后，自动刷新实时预览修改后的效果。\n\n  1. 在 webpack 配置文件中添加 HMR 插件；\n  2. 在`Webpack Dev Server`中添加“hot”参数；\n\n  ```js\n  plugins: [\n    ...\n    new webpack.HotModuleReplacementPlugin(), //热加载插件\n  ],\n  ```\n\n### 不同环境下的配置更改\n\n如果需要`production`环境, 创建`webpack.pro.config.js`:\n\n```js\n// webpack.pro.config.js\n\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  devtool: \"null\",\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/build\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n  devServer: {\n    // contentBase: \"\", //本地服务器所加载的页面所在的目录\n    historyApiFallback: true, //不跳转\n    inline: true, //实时刷新\n    port: 8888,\n    hot: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"postcss-loader\",\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new webpack.BannerPlugin(\"httishere, 版权所有，翻版必究\"),\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/index.tmpl.html\", //new 一个这个插件的实例，并传入相关的参数\n    }),\n    new webpack.HotModuleReplacementPlugin(), //热加载插件\n  ],\n};\n```\n\n本文参考:\n\n- [入门 Webpack，看这篇就够了](https://www.jianshu.com/p/42e11515c10f)\n- [webpack 中文文档](https://www.webpackjs.com/guides/getting-started/)\n- [阮一峰 webpack demos](https://github.com/ruanyf/webpack-demos)\n","source":"_posts/learn-webpack.md","raw":"---\ntitle: webpack, 小白的从入门到放弃\ndate: 2020-01-19 21:18:06\ntags:\n  - 从入门到放弃\n  - js\ncategories:\n  - webpack\n---\n\n> `webpack` 是用于编译`Javascript 模块`, 可以看作是**模块打包机**(Webpack is a front-end tool to build JavaScript module scripts for browsers). 分析项目结构, 找到 Javascript 模块以及其他无法在浏览器上直接运行的拓展语言(Scss, TypeScript 等), 并将其转换和打包为合适的格式供浏览器使用。\n\n![webpack](learn-webpack/webpack_00.png)\n\n`webpack`把所有文件都当作模块进行处理, Javascript 代码, css 文件, fonts 以及图片等都可以通过相应的`loader`被处理.\n\n## 安装\n\n```bash\nnpm install --save-dev webpack\n// webpack 4+ 还需安装CLI\nnpm install --save-dev webpack-cli\n```\n\n通常，webpack 通过运行一个或多个`npm scripts`，会在本地`node_modules`目录中查找安装的 webpack：\n\n```json\n\"scripts\": {\n    \"start\": \"webpack --config webpack.config.js\"\n}\n```\n\n## 初始化\n\n新建 webpack-demo 文件夹, 并通过`npm init`初始化, 生成 package.json 文件.\n\n```json\n// 最基本的package.json文件\n{\n  \"name\": \"webpack-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webpack从入门到放弃\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n同时在根目录下新建 app 文件夹(存放原始数据与 Javascript 模块), public 文件夹(webpack 打包后生成的文件, 可供浏览器读取), 并创建一下文件:\n\n- app.js (app 文件夹内)\n- index.html (根目录)\n\n```bash\n  webpack-demo\n  |- package.json\n+ |- index.html\n+ |- /app\n+   |- app.js\n```\n\nindex.html\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!-- bundle.js是打包后的文件 -->\n    <script src=\"./public/bundle.js\"></script>\n  </body>\n</html>\n```\n\napp.js 通过函数返回一个`html`元素内容, 并将返回的节点插入页面:\n\n```js\nfunction component() {\n  var element = document.createElement(\"div\");\n\n  // Lodash(目前通过一个 script 脚本引入)对于执行这一行是必需的\n  element.innerHTML = _.join([\"Hello\", \"webpack\"], \" \");\n\n  return element;\n}\n\ndocument.body.appendChild(component());\n```\n\n命令打包, 并浏览器打开 index.html, 可以正确输出`Hello webpack`:\n\n```bash\nwebpack ./app/app.js ./public/bundle.js\n```\n\n## 配置文件\n\n`webpack.config.js`也是一个简单的 Javascript 模块, 可以把需要的所有与打包相关的信息放在里面.\n\nwebpack.config.js\n\n```js\nmodule.exports = {\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n};\n```\n\n**“\\_\\_dirname”是 node.js 中的一个全局变量，它指向当前执行脚本所在的目录。**\n\n然后在终端使用命令时只需要输入`webpack`:\n\n```bash\nPS E:\\webpack-test> webpack\nHash: a0b4d9f603147ef2aff1\nVersion: webpack 3.5.5\nTime: 381ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  545 kB       0  [emitted]  [big]  main\n   [0] ./app/app.js 316 bytes {0} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n\n对`npm`进行配置可以在终端中使用简单的命令代替`webpack`命令, 做到命令的简化和统一:\n\n```js\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\"\n},\n```\n\n然后就可以使用`npm start`命令直接执行打包:\n\n```basic\nPS E:\\webpack-test> npm start\n\n> webpack-demo@1.0.0 start E:\\webpack-test\n> webpack\n\nHash: a0b4d9f603147ef2aff1\nVersion: webpack 3.5.5\nTime: 352ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  545 kB       0  [emitted]  [big]  main\n   [0] ./app/app.js 316 bytes {0} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n\n## Webpack 其他功能\n\n### Source Maps\n\n`Source Maps`提供了一种对应编译文件和源文件的方法, 使编译后的代码可读性更高, 更容易调试, 可以帮助我们快速定位错误的地方, 通过配置`webpack`可以在打包时为我们生成`source maps`.\n\n<style> table th:first-of-type { width: 100px; } </style>\n\n| devtool 选项                 | 配置结果                                                                                                                                                                                                                                                |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source-map                   | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map，但是它会减慢打包速度；                                                                                                                                                   |\n| cheap-module-source-map      | 在一个单独的文件中生成一个不带列映射的 map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列(符号)，会对调试造成不便；                                                                                        |\n| eval-source-map              | 使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 source map。这个选项可以在不影响构建速度的前提下生成完整的 sourcemap，但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项； |\n| cheap-module-eval-source-map | 这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射，和 eval-source-map 选项具有相似的缺点；                                                                                               |\n\n上表从上到下打包速度越来越快, 但是同时负担以及执行也会变大, 所以需要根据需要和项目需求选择, 并只在开发阶段使用.\n\n```js\nmodule.exports = {\n  devtool: \"eval-source-map\",\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n};\n```\n\n### 本地服务器 devServer\n\n浏览器可以监听代码修改, 并自动刷新显示最新的修改结果.\n\n```bash\nnpm install --save-dev webpack-dev-server\n```\n\n**PS: 需要注意 webpack 和 webpack-dev-server 的版本匹配;**\n\n`devServer`的配置选项:\n\n```js\nmodule.exports = {\n  ...\n  devServer: {\n    contentBase: \"./public\", // 本地服务器所加载的页面所在的目录, 默认webpack-dev-server会为根文件夹提供本地服务器\n    historyApiFallback: true, // 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n    inline: true, // 设置为true，当源文件改变时会自动刷新页面\n    port: '8888', // 设置默认监听端口，如果省略，默认为”8080“\n  },\n};\n```\n\n开启本地服务器的命令`webpack-dev-server --open`, 我们也可以在`package.json`内设置简化命令:\n\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\"\n  },\n```\n\n使用`npm run server`即可在本地的`8888`端口查看结果:\n\n```bash\nPS E:\\webpack-test> yarn server\nyarn run v1.12.3\n$ webpack-dev-server --open --mode development\ni ｢wds｣: Project is running at http://localhost:8888/\ni ｢wds｣: webpack output is served from /\ni ｢wds｣: Content not from webpack is served from ./public\ni ｢wds｣: 404s will fallback to /index.html\ni ｢wdm｣: Hash: b274af3ebd1d650a24a6\nVersion: webpack 4.42.1\nTime: 701ms\nBuilt at: 2020-04-20 1:40:47 PM\n    Asset     Size  Chunks             Chunk Names\nbundle.js  893 KiB    main  [emitted]  main\nEntrypoint main = bundle.js\n[0] multi (webpack)-dev-server/client?http://localhost:8888 ./app/app.js 40 bytes {main} [built]\n```\n\n**PS: `webpack`运行时可能会出现报错**\n![webpack mode error](learn-webpack/webpack_01.png)\n\n解决: 在命令中增加 mode 环境, `--mode development`, `–mode production`等.\n\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open --mode development\"\n  },\n```\n\n### Loaders\n\n`Loaders`是`webpack`强大的功能之一, 通过使用不同的`loader`, `webpack`可以调用外部的脚本或者工具, 实现对不同格式的文件的处理, 比如将 less 转成 css, ES6/ES7 转成现在浏览器兼容的 js 语法等.\n\n`Loaders`需要单独安装并在`modules`关键字下进行配置:\n\n- `test`: 用以匹配 loaders 所处理文件的拓展名的正则表达式(必填);\n- `loader`: loader 的名称(必填);\n- `include / exclude`: 手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)(可选);\n- `query`: 为 loaders 提供额外的设置选项;\n\n#### Babel\n\n> 一个编译 Javascript 的平台, 可以支持使用的最新的 JS 代码(ES7,ES6 等), 也支持使用基于 JS 进行拓展的语言, 比如 React 的 JSX.\n\nBabel 其实是几个模块化的包，其核心功能位于称为 babel-core 的 npm 包中，webpack 可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包(用得最多的是解析 Es6 的 babel-env-preset 包和解析 JSX 的 babel-preset-react 包)。\n\n```bash\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n```\n\n并在`webpack.config.js`内配置`Babel`:\n\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"env\", \"react\"],\n          },\n        },\n        exclude: /node_modules/,\n      },\n    ],\n  },\n};\n```\n\n同时我们也可以将`Babel`配置独立处理, 单独存放在`.babelrc`的配置文件内, `webpack`会自动调用`.babelrc`里的 babel 配置信息.\n\n```js\n// .babelrc\n{\n  presets: [\"env\", \"react\"],\n}\n\n// webpack.config.js\n{\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"env\", \"react\"],\n          },\n        },\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n```\n\n#### css\n\n`webpack`提供了两个工具处理样式表, `css-loader`和`style-loader`, `css-loader`支持`@import`和`url(...)`的方法实现`require()`的功能, `style-loader`是将所有计算后的样式加入页面, 所以一般都是两者结合使用.\n\n```bash\nnpm install --save-dev style-loader css-loader\n```\n\n在`rules`内配置, 然后就可以直接在 js 文件内使用`import`引入 css 文件:\n\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n> `CSS modules`把 JS 的模块化思想带入 CSS 中来，通过 CSS 模块，所有的类名，动画名默认都只作用于当前模块。`Webpack`对 CSS 模块化提供了非常好的支持，只需要在 CSS loader 中进行简单配置即可，然后就可以直接把 CSS 的类名传递到组件的代码中，这样做有效避免了全局污染。\n\n```js\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              modules: true, // 指定启用css modules\n              localIdentName: \"[name]__[local]--[hash:base64:5]\", // 指定css的类名格式\n            },\n          },\n        ],\n      },\n```\n\n[css module 官方文档](https://github.com/css-modules/css-modules)\n\n主要的`css loaders`:\n\n- `Less Loader`\n- `Sass Loader`\n- `Stylus Loader`\n- `Postcss Loader`\n\n可以使用`Postcss Loader`为 CSS 代码自动添加适应不同浏览器的 css 前缀.\n\n```bash\n# autoprefixer 自动添加前缀的插件\nnpm install --save-dev postcss-loader autoprefixer\n```\n\n在`use`内添加`postcss-loader`:\n\n```js\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              modules: true, // 指定启用css modules\n              localIdentName: \"[name]__[local]--[hash:base64:5]\", // 指定css的类名格式\n            },\n          },\n          {\n              loader: 'postcss-loader',\n              plugins: [\n                  require('autoprefixer')\n              ]\n          }\n        ],\n      }\n```\n\n### Plugins\n\nloaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  plugins: [\n        new webpack.BannerPlugin('httishere, 版权所有，翻版必究')\n  ],\n}\n```\n\n打包生成的文件内:\n\n![banner plugin](learn-webpack/webpack_02.png)\n\n#### 常用插件\n\n- `HtmlWebpackPlugin`\n\n  根据一个简单的 index.html 模板，生成一个自动引用你打包后的 JS 文件的新 index.html。这在每次生成的 js 文件名称不同时非常有用（比如添加了 hash 值）。\n\n  ```js\n  plugins: [\n    ...\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/index.tmpl.html\", //new 一个这个插件的实例，并传入相关的参数\n    }),\n  ],\n  ```\n\n- `Hot Module Replacement`\n\n  支持修改组件代码后，自动刷新实时预览修改后的效果。\n\n  1. 在 webpack 配置文件中添加 HMR 插件；\n  2. 在`Webpack Dev Server`中添加“hot”参数；\n\n  ```js\n  plugins: [\n    ...\n    new webpack.HotModuleReplacementPlugin(), //热加载插件\n  ],\n  ```\n\n### 不同环境下的配置更改\n\n如果需要`production`环境, 创建`webpack.pro.config.js`:\n\n```js\n// webpack.pro.config.js\n\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  devtool: \"null\",\n  entry: __dirname + \"/app/app.js\", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/build\", //打包后的文件存放的地方\n    filename: \"bundle.js\", //打包后输出文件的文件名\n  },\n  devServer: {\n    // contentBase: \"\", //本地服务器所加载的页面所在的目录\n    historyApiFallback: true, //不跳转\n    inline: true, //实时刷新\n    port: 8888,\n    hot: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: \"babel-loader\",\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"postcss-loader\",\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new webpack.BannerPlugin(\"httishere, 版权所有，翻版必究\"),\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/index.tmpl.html\", //new 一个这个插件的实例，并传入相关的参数\n    }),\n    new webpack.HotModuleReplacementPlugin(), //热加载插件\n  ],\n};\n```\n\n本文参考:\n\n- [入门 Webpack，看这篇就够了](https://www.jianshu.com/p/42e11515c10f)\n- [webpack 中文文档](https://www.webpackjs.com/guides/getting-started/)\n- [阮一峰 webpack demos](https://github.com/ruanyf/webpack-demos)\n","slug":"learn-webpack","published":1,"updated":"2020-04-21T08:53:30.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp7000oe36kqbmqfaa9","content":"<blockquote>\n<p><code>webpack</code> 是用于编译<code>Javascript 模块</code>, 可以看作是<strong>模块打包机</strong>(Webpack is a front-end tool to build JavaScript module scripts for browsers). 分析项目结构, 找到 Javascript 模块以及其他无法在浏览器上直接运行的拓展语言(Scss, TypeScript 等), 并将其转换和打包为合适的格式供浏览器使用。</p>\n</blockquote>\n<p><img src=\"/2020/01/19/learn-webpack/webpack_00.png\" alt=\"webpack\"></p>\n<p><code>webpack</code>把所有文件都当作模块进行处理, Javascript 代码, css 文件, fonts 以及图片等都可以通过相应的<code>loader</code>被处理.</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack</span><br><span class=\"line\">// webpack 4+ 还需安装CLI</span><br><span class=\"line\">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure>\n<p>通常，webpack 通过运行一个或多个<code>npm scripts</code>，会在本地<code>node_modules</code>目录中查找安装的 webpack：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"webpack --config webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>新建 webpack-demo 文件夹, 并通过<code>npm init</code>初始化, 生成 package.json 文件.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 最基本的package.json文件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"webpack从入门到放弃\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在根目录下新建 app 文件夹(存放原始数据与 Javascript 模块), public 文件夹(webpack 打包后生成的文件, 可供浏览器读取), 并创建一下文件:</p>\n<ul>\n<li>app.js (app 文件夹内)</li>\n<li>index.html (根目录)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- index.html</span><br><span class=\"line\">+ |- /app</span><br><span class=\"line\">+   |- app.js</span><br></pre></td></tr></table></figure>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- bundle.js是打包后的文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./public/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>app.js 通过函数返回一个<code>html</code>元素内容, 并将返回的节点插入页面:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Lodash(目前通过一个 script 脚本引入)对于执行这一行是必需的</span></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"webpack\"</span>], <span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>命令打包, 并浏览器打开 index.html, 可以正确输出<code>Hello webpack</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack ./app/app.js ./public/bundle.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><code>webpack.config.js</code>也是一个简单的 Javascript 模块, 可以把需要的所有与打包相关的信息放在里面.</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>“__dirname”是 node.js 中的一个全局变量，它指向当前执行脚本所在的目录。</strong></p>\n<p>然后在终端使用命令时只需要输入<code>webpack</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; webpack</span><br><span class=\"line\">Hash: a0b4d9f603147ef2aff1</span><br><span class=\"line\">Version: webpack 3.5.5</span><br><span class=\"line\">Time: 381ms</span><br><span class=\"line\">    Asset    Size  Chunks                    Chunk Names</span><br><span class=\"line\">bundle.js  545 kB       0  [emitted]  [big]  main</span><br><span class=\"line\">   [0] ./app/app.js 316 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [2] (webpack)/buildin/global.js 509 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [3] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    + 1 hidden module</span><br></pre></td></tr></table></figure>\n<p>对<code>npm</code>进行配置可以在终端中使用简单的命令代替<code>webpack</code>命令, 做到命令的简化和统一:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用<code>npm start</code>命令直接执行打包:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; npm start</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-demo@1.0.0 start E:\\webpack-test</span><br><span class=\"line\">&gt; webpack</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: a0b4d9f603147ef2aff1</span><br><span class=\"line\">Version: webpack 3.5.5</span><br><span class=\"line\">Time: 352ms</span><br><span class=\"line\">    Asset    Size  Chunks                    Chunk Names</span><br><span class=\"line\">bundle.js  545 kB       0  [emitted]  [big]  main</span><br><span class=\"line\">   [0] ./app/app.js 316 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [2] (webpack)/buildin/global.js 509 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [3] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    + 1 hidden module</span><br></pre></td></tr></table></figure>\n<h2 id=\"Webpack-其他功能\"><a href=\"#Webpack-其他功能\" class=\"headerlink\" title=\"Webpack 其他功能\"></a>Webpack 其他功能</h2><h3 id=\"Source-Maps\"><a href=\"#Source-Maps\" class=\"headerlink\" title=\"Source Maps\"></a>Source Maps</h3><p><code>Source Maps</code>提供了一种对应编译文件和源文件的方法, 使编译后的代码可读性更高, 更容易调试, 可以帮助我们快速定位错误的地方, 通过配置<code>webpack</code>可以在打包时为我们生成<code>source maps</code>.</p>\n<style> table th:first-of-type { width: 100px; } </style>\n\n<table>\n<thead>\n<tr>\n<th>devtool 选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map，但是它会减慢打包速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的 map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列(符号)，会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 source map。这个选项可以在不影响构建速度的前提下生成完整的 sourcemap，但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射，和 eval-source-map 选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>上表从上到下打包速度越来越快, 但是同时负担以及执行也会变大, 所以需要根据需要和项目需求选择, 并只在开发阶段使用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">\"eval-source-map\"</span>,</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地服务器-devServer\"><a href=\"#本地服务器-devServer\" class=\"headerlink\" title=\"本地服务器 devServer\"></a>本地服务器 devServer</h3><p>浏览器可以监听代码修改, 并自动刷新显示最新的修改结果.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>PS: 需要注意 webpack 和 webpack-dev-server 的版本匹配;</strong></p>\n<p><code>devServer</code>的配置选项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">\"./public\"</span>, <span class=\"comment\">// 本地服务器所加载的页面所在的目录, 默认webpack-dev-server会为根文件夹提供本地服务器</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 设置为true，当源文件改变时会自动刷新页面</span></span><br><span class=\"line\">    port: <span class=\"string\">'8888'</span>, <span class=\"comment\">// 设置默认监听端口，如果省略，默认为”8080“</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>开启本地服务器的命令<code>webpack-dev-server --open</code>, 我们也可以在<code>package.json</code>内设置简化命令:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"start\": \"webpack\",</span><br><span class=\"line\">  \"server\": \"webpack-dev-server --open\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>使用<code>npm run server</code>即可在本地的<code>8888</code>端口查看结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; yarn server</span><br><span class=\"line\">yarn run v1.12.3</span><br><span class=\"line\">$ webpack-dev-server --open --mode development</span><br><span class=\"line\">i ｢wds｣: Project is running at http://localhost:8888/</span><br><span class=\"line\">i ｢wds｣: webpack output is served from /</span><br><span class=\"line\">i ｢wds｣: Content not from webpack is served from ./public</span><br><span class=\"line\">i ｢wds｣: 404s will fallback to /index.html</span><br><span class=\"line\">i ｢wdm｣: Hash: b274af3ebd1d650a24a6</span><br><span class=\"line\">Version: webpack 4.42.1</span><br><span class=\"line\">Time: 701ms</span><br><span class=\"line\">Built at: 2020-04-20 1:40:47 PM</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  893 KiB    main  [emitted]  main</span><br><span class=\"line\">Entrypoint main = bundle.js</span><br><span class=\"line\">[0] multi (webpack)-dev-server/client?http://localhost:8888 ./app/app.js 40 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure>\n<p><strong>PS: <code>webpack</code>运行时可能会出现报错</strong><br><img src=\"/2020/01/19/learn-webpack/webpack_01.png\" alt=\"webpack mode error\"></p>\n<p>解决: 在命令中增加 mode 环境, <code>--mode development</code>, <code>–mode production</code>等.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"start\": \"webpack\",</span><br><span class=\"line\">  \"server\": \"webpack-dev-server --open --mode development\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h3><p><code>Loaders</code>是<code>webpack</code>强大的功能之一, 通过使用不同的<code>loader</code>, <code>webpack</code>可以调用外部的脚本或者工具, 实现对不同格式的文件的处理, 比如将 less 转成 css, ES6/ES7 转成现在浏览器兼容的 js 语法等.</p>\n<p><code>Loaders</code>需要单独安装并在<code>modules</code>关键字下进行配置:</p>\n<ul>\n<li><code>test</code>: 用以匹配 loaders 所处理文件的拓展名的正则表达式(必填);</li>\n<li><code>loader</code>: loader 的名称(必填);</li>\n<li><code>include / exclude</code>: 手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)(可选);</li>\n<li><code>query</code>: 为 loaders 提供额外的设置选项;</li>\n</ul>\n<h4 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h4><blockquote>\n<p>一个编译 Javascript 的平台, 可以支持使用的最新的 JS 代码(ES7,ES6 等), 也支持使用基于 JS 进行拓展的语言, 比如 React 的 JSX.</p>\n</blockquote>\n<p>Babel 其实是几个模块化的包，其核心功能位于称为 babel-core 的 npm 包中，webpack 可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包(用得最多的是解析 Es6 的 babel-env-preset 包和解析 JSX 的 babel-preset-react 包)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>并在<code>webpack.config.js</code>内配置<code>Babel</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>同时我们也可以将<code>Babel</code>配置独立处理, 单独存放在<code>.babelrc</code>的配置文件内, <code>webpack</code>会自动调用<code>.babelrc</code>里的 babel 配置信息.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><p><code>webpack</code>提供了两个工具处理样式表, <code>css-loader</code>和<code>style-loader</code>, <code>css-loader</code>支持<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能, <code>style-loader</code>是将所有计算后的样式加入页面, 所以一般都是两者结合使用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<p>在<code>rules</code>内配置, 然后就可以直接在 js 文件内使用<code>import</code>引入 css 文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>CSS modules</code>把 JS 的模块化思想带入 CSS 中来，通过 CSS 模块，所有的类名，动画名默认都只作用于当前模块。<code>Webpack</code>对 CSS 模块化提供了非常好的支持，只需要在 CSS loader 中进行简单配置即可，然后就可以直接把 CSS 的类名传递到组件的代码中，这样做有效避免了全局污染。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">\"[name]__[local]--[hash:base64:5]\"</span>, <span class=\"comment\">// 指定css的类名格式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">css module 官方文档</a></p>\n<p>主要的<code>css loaders</code>:</p>\n<ul>\n<li><code>Less Loader</code></li>\n<li><code>Sass Loader</code></li>\n<li><code>Stylus Loader</code></li>\n<li><code>Postcss Loader</code></li>\n</ul>\n<p>可以使用<code>Postcss Loader</code>为 CSS 代码自动添加适应不同浏览器的 css 前缀.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># autoprefixer 自动添加前缀的插件</span></span><br><span class=\"line\">npm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>在<code>use</code>内添加<code>postcss-loader</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">\"[name]__[local]--[hash:base64:5]\"</span>, <span class=\"comment\">// 指定css的类名格式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        plugins: [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p>loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">'httishere, 版权所有，翻版必究'</span>)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打包生成的文件内:</p>\n<p><img src=\"/2020/01/19/learn-webpack/webpack_02.png\" alt=\"banner plugin\"></p>\n<h4 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h4><ul>\n<li><p><code>HtmlWebpackPlugin</code></p>\n<p>根据一个简单的 index.html 模板，生成一个自动引用你打包后的 JS 文件的新 index.html。这在每次生成的 js 文件名称不同时非常有用（比如添加了 hash 值）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: __dirname + <span class=\"string\">\"/index.tmpl.html\"</span>, <span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Hot Module Replacement</code></p>\n<p>支持修改组件代码后，自动刷新实时预览修改后的效果。</p>\n<ol>\n<li>在 webpack 配置文件中添加 HMR 插件；</li>\n<li>在<code>Webpack Dev Server</code>中添加“hot”参数；</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"不同环境下的配置更改\"><a href=\"#不同环境下的配置更改\" class=\"headerlink\" title=\"不同环境下的配置更改\"></a>不同环境下的配置更改</h3><p>如果需要<code>production</code>环境, 创建<code>webpack.pro.config.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.pro.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">\"null\"</span>,</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// contentBase: \"\", //本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">8888</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"postcss-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"httishere, 版权所有，翻版必究\"</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: __dirname + <span class=\"string\">\"/index.tmpl.html\"</span>, <span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>本文参考:</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门 Webpack，看这篇就够了</a></li>\n<li><a href=\"https://www.webpackjs.com/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 中文文档</a></li>\n<li><a href=\"https://github.com/ruanyf/webpack-demos\" target=\"_blank\" rel=\"noopener\">阮一峰 webpack demos</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>webpack</code> 是用于编译<code>Javascript 模块</code>, 可以看作是<strong>模块打包机</strong>(Webpack is a front-end tool to build JavaScript module scripts for browsers). 分析项目结构, 找到 Javascript 模块以及其他无法在浏览器上直接运行的拓展语言(Scss, TypeScript 等), 并将其转换和打包为合适的格式供浏览器使用。</p>\n</blockquote>\n<p><img src=\"/2020/01/19/learn-webpack/webpack_00.png\" alt=\"webpack\"></p>\n<p><code>webpack</code>把所有文件都当作模块进行处理, Javascript 代码, css 文件, fonts 以及图片等都可以通过相应的<code>loader</code>被处理.</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack</span><br><span class=\"line\">// webpack 4+ 还需安装CLI</span><br><span class=\"line\">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure>\n<p>通常，webpack 通过运行一个或多个<code>npm scripts</code>，会在本地<code>node_modules</code>目录中查找安装的 webpack：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"webpack --config webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>新建 webpack-demo 文件夹, 并通过<code>npm init</code>初始化, 生成 package.json 文件.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 最基本的package.json文件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"webpack从入门到放弃\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在根目录下新建 app 文件夹(存放原始数据与 Javascript 模块), public 文件夹(webpack 打包后生成的文件, 可供浏览器读取), 并创建一下文件:</p>\n<ul>\n<li>app.js (app 文件夹内)</li>\n<li>index.html (根目录)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- index.html</span><br><span class=\"line\">+ |- /app</span><br><span class=\"line\">+   |- app.js</span><br></pre></td></tr></table></figure>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- bundle.js是打包后的文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./public/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>app.js 通过函数返回一个<code>html</code>元素内容, 并将返回的节点插入页面:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Lodash(目前通过一个 script 脚本引入)对于执行这一行是必需的</span></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"webpack\"</span>], <span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>命令打包, 并浏览器打开 index.html, 可以正确输出<code>Hello webpack</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack ./app/app.js ./public/bundle.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><code>webpack.config.js</code>也是一个简单的 Javascript 模块, 可以把需要的所有与打包相关的信息放在里面.</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>“__dirname”是 node.js 中的一个全局变量，它指向当前执行脚本所在的目录。</strong></p>\n<p>然后在终端使用命令时只需要输入<code>webpack</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; webpack</span><br><span class=\"line\">Hash: a0b4d9f603147ef2aff1</span><br><span class=\"line\">Version: webpack 3.5.5</span><br><span class=\"line\">Time: 381ms</span><br><span class=\"line\">    Asset    Size  Chunks                    Chunk Names</span><br><span class=\"line\">bundle.js  545 kB       0  [emitted]  [big]  main</span><br><span class=\"line\">   [0] ./app/app.js 316 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [2] (webpack)/buildin/global.js 509 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [3] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    + 1 hidden module</span><br></pre></td></tr></table></figure>\n<p>对<code>npm</code>进行配置可以在终端中使用简单的命令代替<code>webpack</code>命令, 做到命令的简化和统一:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用<code>npm start</code>命令直接执行打包:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; npm start</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-demo@1.0.0 start E:\\webpack-test</span><br><span class=\"line\">&gt; webpack</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: a0b4d9f603147ef2aff1</span><br><span class=\"line\">Version: webpack 3.5.5</span><br><span class=\"line\">Time: 352ms</span><br><span class=\"line\">    Asset    Size  Chunks                    Chunk Names</span><br><span class=\"line\">bundle.js  545 kB       0  [emitted]  [big]  main</span><br><span class=\"line\">   [0] ./app/app.js 316 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [2] (webpack)/buildin/global.js 509 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [3] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    + 1 hidden module</span><br></pre></td></tr></table></figure>\n<h2 id=\"Webpack-其他功能\"><a href=\"#Webpack-其他功能\" class=\"headerlink\" title=\"Webpack 其他功能\"></a>Webpack 其他功能</h2><h3 id=\"Source-Maps\"><a href=\"#Source-Maps\" class=\"headerlink\" title=\"Source Maps\"></a>Source Maps</h3><p><code>Source Maps</code>提供了一种对应编译文件和源文件的方法, 使编译后的代码可读性更高, 更容易调试, 可以帮助我们快速定位错误的地方, 通过配置<code>webpack</code>可以在打包时为我们生成<code>source maps</code>.</p>\n<style> table th:first-of-type { width: 100px; } </style>\n\n<table>\n<thead>\n<tr>\n<th>devtool 选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的 source map，但是它会减慢打包速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的 map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列(符号)，会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用 eval 打包源文件模块，在同一个文件中生成干净的完整的 source map。这个选项可以在不影响构建速度的前提下生成完整的 sourcemap，但是对打包后输出的 JS 文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成 source map 的方法，生成的 Source Map 会和打包后的 JavaScript 文件同行显示，没有列映射，和 eval-source-map 选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>上表从上到下打包速度越来越快, 但是同时负担以及执行也会变大, 所以需要根据需要和项目需求选择, 并只在开发阶段使用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">\"eval-source-map\"</span>,</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地服务器-devServer\"><a href=\"#本地服务器-devServer\" class=\"headerlink\" title=\"本地服务器 devServer\"></a>本地服务器 devServer</h3><p>浏览器可以监听代码修改, 并自动刷新显示最新的修改结果.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>PS: 需要注意 webpack 和 webpack-dev-server 的版本匹配;</strong></p>\n<p><code>devServer</code>的配置选项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">\"./public\"</span>, <span class=\"comment\">// 本地服务器所加载的页面所在的目录, 默认webpack-dev-server会为根文件夹提供本地服务器</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 设置为true，当源文件改变时会自动刷新页面</span></span><br><span class=\"line\">    port: <span class=\"string\">'8888'</span>, <span class=\"comment\">// 设置默认监听端口，如果省略，默认为”8080“</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>开启本地服务器的命令<code>webpack-dev-server --open</code>, 我们也可以在<code>package.json</code>内设置简化命令:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"start\": \"webpack\",</span><br><span class=\"line\">  \"server\": \"webpack-dev-server --open\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>使用<code>npm run server</code>即可在本地的<code>8888</code>端口查看结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\webpack-test&gt; yarn server</span><br><span class=\"line\">yarn run v1.12.3</span><br><span class=\"line\">$ webpack-dev-server --open --mode development</span><br><span class=\"line\">i ｢wds｣: Project is running at http://localhost:8888/</span><br><span class=\"line\">i ｢wds｣: webpack output is served from /</span><br><span class=\"line\">i ｢wds｣: Content not from webpack is served from ./public</span><br><span class=\"line\">i ｢wds｣: 404s will fallback to /index.html</span><br><span class=\"line\">i ｢wdm｣: Hash: b274af3ebd1d650a24a6</span><br><span class=\"line\">Version: webpack 4.42.1</span><br><span class=\"line\">Time: 701ms</span><br><span class=\"line\">Built at: 2020-04-20 1:40:47 PM</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  893 KiB    main  [emitted]  main</span><br><span class=\"line\">Entrypoint main = bundle.js</span><br><span class=\"line\">[0] multi (webpack)-dev-server/client?http://localhost:8888 ./app/app.js 40 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure>\n<p><strong>PS: <code>webpack</code>运行时可能会出现报错</strong><br><img src=\"/2020/01/19/learn-webpack/webpack_01.png\" alt=\"webpack mode error\"></p>\n<p>解决: 在命令中增加 mode 环境, <code>--mode development</code>, <code>–mode production</code>等.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"start\": \"webpack\",</span><br><span class=\"line\">  \"server\": \"webpack-dev-server --open --mode development\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h3><p><code>Loaders</code>是<code>webpack</code>强大的功能之一, 通过使用不同的<code>loader</code>, <code>webpack</code>可以调用外部的脚本或者工具, 实现对不同格式的文件的处理, 比如将 less 转成 css, ES6/ES7 转成现在浏览器兼容的 js 语法等.</p>\n<p><code>Loaders</code>需要单独安装并在<code>modules</code>关键字下进行配置:</p>\n<ul>\n<li><code>test</code>: 用以匹配 loaders 所处理文件的拓展名的正则表达式(必填);</li>\n<li><code>loader</code>: loader 的名称(必填);</li>\n<li><code>include / exclude</code>: 手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)(可选);</li>\n<li><code>query</code>: 为 loaders 提供额外的设置选项;</li>\n</ul>\n<h4 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h4><blockquote>\n<p>一个编译 Javascript 的平台, 可以支持使用的最新的 JS 代码(ES7,ES6 等), 也支持使用基于 JS 进行拓展的语言, 比如 React 的 JSX.</p>\n</blockquote>\n<p>Babel 其实是几个模块化的包，其核心功能位于称为 babel-core 的 npm 包中，webpack 可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包(用得最多的是解析 Es6 的 babel-env-preset 包和解析 JSX 的 babel-preset-react 包)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>并在<code>webpack.config.js</code>内配置<code>Babel</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>同时我们也可以将<code>Babel</code>配置独立处理, 单独存放在<code>.babelrc</code>的配置文件内, <code>webpack</code>会自动调用<code>.babelrc</code>里的 babel 配置信息.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><p><code>webpack</code>提供了两个工具处理样式表, <code>css-loader</code>和<code>style-loader</code>, <code>css-loader</code>支持<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能, <code>style-loader</code>是将所有计算后的样式加入页面, 所以一般都是两者结合使用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<p>在<code>rules</code>内配置, 然后就可以直接在 js 文件内使用<code>import</code>引入 css 文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>CSS modules</code>把 JS 的模块化思想带入 CSS 中来，通过 CSS 模块，所有的类名，动画名默认都只作用于当前模块。<code>Webpack</code>对 CSS 模块化提供了非常好的支持，只需要在 CSS loader 中进行简单配置即可，然后就可以直接把 CSS 的类名传递到组件的代码中，这样做有效避免了全局污染。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">\"[name]__[local]--[hash:base64:5]\"</span>, <span class=\"comment\">// 指定css的类名格式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">css module 官方文档</a></p>\n<p>主要的<code>css loaders</code>:</p>\n<ul>\n<li><code>Less Loader</code></li>\n<li><code>Sass Loader</code></li>\n<li><code>Stylus Loader</code></li>\n<li><code>Postcss Loader</code></li>\n</ul>\n<p>可以使用<code>Postcss Loader</code>为 CSS 代码自动添加适应不同浏览器的 css 前缀.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># autoprefixer 自动添加前缀的插件</span></span><br><span class=\"line\">npm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>在<code>use</code>内添加<code>postcss-loader</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>, <span class=\"comment\">// 指定启用css modules</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">\"[name]__[local]--[hash:base64:5]\"</span>, <span class=\"comment\">// 指定css的类名格式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        plugins: [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p>loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">'httishere, 版权所有，翻版必究'</span>)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打包生成的文件内:</p>\n<p><img src=\"/2020/01/19/learn-webpack/webpack_02.png\" alt=\"banner plugin\"></p>\n<h4 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h4><ul>\n<li><p><code>HtmlWebpackPlugin</code></p>\n<p>根据一个简单的 index.html 模板，生成一个自动引用你打包后的 JS 文件的新 index.html。这在每次生成的 js 文件名称不同时非常有用（比如添加了 hash 值）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: __dirname + <span class=\"string\">\"/index.tmpl.html\"</span>, <span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Hot Module Replacement</code></p>\n<p>支持修改组件代码后，自动刷新实时预览修改后的效果。</p>\n<ol>\n<li>在 webpack 配置文件中添加 HMR 插件；</li>\n<li>在<code>Webpack Dev Server</code>中添加“hot”参数；</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"不同环境下的配置更改\"><a href=\"#不同环境下的配置更改\" class=\"headerlink\" title=\"不同环境下的配置更改\"></a>不同环境下的配置更改</h3><p>如果需要<code>production</code>环境, 创建<code>webpack.pro.config.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.pro.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">\"null\"</span>,</span><br><span class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/app.js\"</span>, <span class=\"comment\">//已多次提及的唯一入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>, <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// contentBase: \"\", //本地服务器所加载的页面所在的目录</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">8888</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/(\\.jsx|\\.js)$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"postcss-loader\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"httishere, 版权所有，翻版必究\"</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: __dirname + <span class=\"string\">\"/index.tmpl.html\"</span>, <span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>本文参考:</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门 Webpack，看这篇就够了</a></li>\n<li><a href=\"https://www.webpackjs.com/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 中文文档</a></li>\n<li><a href=\"https://github.com/ruanyf/webpack-demos\" target=\"_blank\" rel=\"noopener\">阮一峰 webpack demos</a></li>\n</ul>\n"},{"title":"重看css 01","date":"2020-01-12T06:57:23.000Z","_content":"\n直到前天同事的技术分享，我才突然觉得我好像并不懂 css，只会实现，不会就 Google，但是从来没有去真正的了解过其中的原理，惭愧。\n\n所以重看 css 和 js 都是必须要做的事。\n\n#### x (baseline)\n\n我之前一直没有了解过的\"x\"，在各种内联模型中，涉及排版或者对齐时都需要用到基线（baseline），比如`line-light`行高的定义就是两基线的间距，`vertical-align`的默认值就是基线。\n那么最普遍的就是字母基线（`x`的下边缘线）：\n\n![](https://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png)\n\n![](https://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png)\n\n- x-height: 小写 x 字母的高度\n- ascender height: 上下线高度\n- cap height: 大写字母高度\n- median: 中线\n- descender height: 下行线高度\n\n在 css 内`vertical-align: middle`就与`x-height`有关，其中 middle 与上述 median 并不同，在规范中对`middle`的解释：\n\n> _middle_: This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for “x-height”, it may be computed using 1/2 the “x-height”. Lacking either of these pieces of information, the position of this baseline may be approximated by the “central” baseline.\n\nmiddle 指的是基线往上 1/2 \"x-height\"高度。可以近似看做字母 x 交叉点那个位置。\n所以`vertical-align: middle`并不是绝对的垂直居中对齐。\n\ncss 内的`ex`单位：一个相对单位，指小写字母 x 的高度。\n实用：借助`ex`实现 icon 上下垂直居中的效果（必须为内联元素），优点在于不受字体字号影响。\n\n```\n.icon-arrow {\n    display: inline-block;\n    width: 20px;\n    height: 1ex;\n    background: url(arrow.png) no-repeat center;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png)\n\n参考：[字母’x’在 CSS 世界中的角色和故事](https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/)\n\n#### border\n\n_border-color_: 如果设置 border 宽度为 Xpx，那么可以在 border 上适应 X 种颜色，每种颜色显示 1px 的宽度。如果说你的 border 的宽度是 10 个像素，但是只声明了 5 或 6 种颜色，那么最后一个颜色将被添加到剩下的宽度。\n\n_border-radius_：左上角水平圆角半径大小 右上角水平圆角半径大小 右下角水平圆角半径大小 左下角水平圆角半径大小/左上角垂直圆角半径大小 右上角垂直圆角半径大小 右下角垂直圆角半径大小 左下角垂直圆角半径大小。\n如果忽略垂直圆角值，则等于水平圆角值即此时圆角为 1/4 圆，水平/垂直半径有一个小于等于 0，则这个角是矩形不会是圆的。\n\n![](https://image.zhangxinxu.com/image/blog/201511/2015-11-01_191017-highlight.png)\n\n_border-image_：< image > < number > < percentage >\n\n[ stretch | repeat | round ]：拉伸 | 重复 | 平铺 (其中 stretch 是默认值)。\n\n图片裁剪位置< number >：无单位，默认单位 px，支持百分比。\n在设置`border-image`时实际是将图片进行裁剪形成九个分离区域，然后进行边角设置。\n\n![](http://image.zhangxinxu.com/image/blog/201001/jiugong.gif)\n\n即有了 border-top-image , border-right-image , border-bottom-image , border-left-image, border-top-left-image , border-top-right-image , border-bottom-left-image , border-bottom-right-image 以及中间内容区域。\n\n比如当前边框背景图资源为 81px\\*81px。\n\n```css\n// 边框平铺\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 round; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 round; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 round; /* Opera */\n  border-image: url(/i/border.png) 27 round;\n}\n```\n\n![](http://image.zhangxinxu.com/image/blog/201001/2010-01-08_164725.png)\n\n```css\n// 边框拉伸\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 stretch; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 stretch; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 stretch; /* Opera */\n  border-image: url(/i/border.png) 27 stretch;\n}\n```\n\n![](http://image.zhangxinxu.com/image/blog/201001/2010-01-08_140351.png)\n\n```css\n// 边框重复\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 repeat; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 repeat; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 repeat; /* Opera */\n  border-image: url(/i/border.png) 27 repeat;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201001/2010-01-08_170850.png)\n\nround 会压缩（或伸展）图片大小使其正好在区域内显示，而 repeat 是不管三七二十一直接重复的，而且是居中重复。\n\n边框图片被切割成 9 部分，以一一对应的关系放到 div 边框的九宫格中，然后再压缩（或拉伸）至边框（border-width 或 border-image-width）的宽度大小。\n\n设置`border-image-width`：优先以边框图片宽度。\n\n```css\ndiv {\n  border-image: url(/i/border.png) 27/10px stretch;\n}\n```\n\n#### Text effects\n\n_text-stroke_：文字描边属性，宽度+颜色，目前只能实现描边，也无法指定是外描边，内描边还是居中描边，目前指的是剧中描边。\n\n本质上让真实文本的字重削弱了，例如文字在页面上渲染时候，线条粗细大概是 1 像素，这时候我们设置个 1 像素宽的描边，则真实显示粗细岂不是只剩下 0.5 像素，如果真是这样，我们其实可以模拟 font-weight 属性的不同字重效果。但是对于某些字体，由于字重的缺失，font-weight:100 和 font-weight:400 粗细都是一样的，都是正常粗细。\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_175554.png)\n\n实现外描边可以使用`text-shadow`：\n\n```css\n.strok-outside {\n  text-shadow: 0 1px red, 1px 0 red, -1px 0 red, 0 -1px red;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_205440.png)\n\n多重描边：\n\n`text-shadow` 属性值可以不断累加，但是 `text-stroke` 属性却不行，如果想要实现多重描边效果，可以借助伪元素多层叠加模拟。\n\n```html\n<p data-text=\"多重描边\">多重描边</p>\n```\n\n```css\np {\n  -webkit-text-stroke: 1px #fff;\n  font-size: 40px;\n  position: relative;\n  z-index: 0;\n}\np::before,\np::after {\n  content: attr(data-text);\n  position: absolute;\n  left: 0;\n  z-index: -1;\n}\np::before {\n  -webkit-text-stroke: 7px yellow;\n}\np::after {\n  -webkit-text-stroke: 4px red;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_211947.png)\n\n_text-fill-color_：文字颜色填充，实现效果基本与`color`一致，目前仅`webkit`核心浏览器下支持该属性，会覆盖`color`属性，主要可实现渐变字体和镂空字体。\n\n渐变字体：\n\n```html\n<p class=\"font1\">渐变色字体</p>\n```\n\n```css\n.font1 {\n  font-size: 22px;\n  background-image: -webkit-linear-gradient(\n    bottom,\n    rgb(201, 21, 134),\n    rgb(20, 11, 255)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/6080416-d411cc5334e83b22.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/135/format/webp)\n\n镂空字体（配合`text-stroke`）：\n\n```html\n<p class=\"font1\">我的镂空字体</p>\n```\n\n```css\n.font1 {\n  font-size: 32px;\n  -webkit-text-fill-color: transparent;\n  -webkit-text-stroke: 1px #000;\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/6080416-57515b6a4b0c68f4.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/245/format/webp)\n\n_word-wrap_：文字换行。\n\n经常在渲染文本时由于连续英文字符串过长导致文本溢出（比如 url 链接等），此时可对文本设置强制边界换行。\n\n```css\n.word_wrap {\n  word-wrap: break-word;\n}\n```\n![](http://image.zhangxinxu.com/image/web/css3/2010-03-08_012239.png)\n\n参考：[张鑫旭大神博客](https://www.zhangxinxu.com/)","source":"_posts/re-css_01.md","raw":"---\ntitle: 重看css 01\ndate: 2020-01-12 14:57:23\ntags:\n  - \"css\"\ncategories:\n  - \"css\"\n---\n\n直到前天同事的技术分享，我才突然觉得我好像并不懂 css，只会实现，不会就 Google，但是从来没有去真正的了解过其中的原理，惭愧。\n\n所以重看 css 和 js 都是必须要做的事。\n\n#### x (baseline)\n\n我之前一直没有了解过的\"x\"，在各种内联模型中，涉及排版或者对齐时都需要用到基线（baseline），比如`line-light`行高的定义就是两基线的间距，`vertical-align`的默认值就是基线。\n那么最普遍的就是字母基线（`x`的下边缘线）：\n\n![](https://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png)\n\n![](https://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png)\n\n- x-height: 小写 x 字母的高度\n- ascender height: 上下线高度\n- cap height: 大写字母高度\n- median: 中线\n- descender height: 下行线高度\n\n在 css 内`vertical-align: middle`就与`x-height`有关，其中 middle 与上述 median 并不同，在规范中对`middle`的解释：\n\n> _middle_: This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for “x-height”, it may be computed using 1/2 the “x-height”. Lacking either of these pieces of information, the position of this baseline may be approximated by the “central” baseline.\n\nmiddle 指的是基线往上 1/2 \"x-height\"高度。可以近似看做字母 x 交叉点那个位置。\n所以`vertical-align: middle`并不是绝对的垂直居中对齐。\n\ncss 内的`ex`单位：一个相对单位，指小写字母 x 的高度。\n实用：借助`ex`实现 icon 上下垂直居中的效果（必须为内联元素），优点在于不受字体字号影响。\n\n```\n.icon-arrow {\n    display: inline-block;\n    width: 20px;\n    height: 1ex;\n    background: url(arrow.png) no-repeat center;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png)\n\n参考：[字母’x’在 CSS 世界中的角色和故事](https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/)\n\n#### border\n\n_border-color_: 如果设置 border 宽度为 Xpx，那么可以在 border 上适应 X 种颜色，每种颜色显示 1px 的宽度。如果说你的 border 的宽度是 10 个像素，但是只声明了 5 或 6 种颜色，那么最后一个颜色将被添加到剩下的宽度。\n\n_border-radius_：左上角水平圆角半径大小 右上角水平圆角半径大小 右下角水平圆角半径大小 左下角水平圆角半径大小/左上角垂直圆角半径大小 右上角垂直圆角半径大小 右下角垂直圆角半径大小 左下角垂直圆角半径大小。\n如果忽略垂直圆角值，则等于水平圆角值即此时圆角为 1/4 圆，水平/垂直半径有一个小于等于 0，则这个角是矩形不会是圆的。\n\n![](https://image.zhangxinxu.com/image/blog/201511/2015-11-01_191017-highlight.png)\n\n_border-image_：< image > < number > < percentage >\n\n[ stretch | repeat | round ]：拉伸 | 重复 | 平铺 (其中 stretch 是默认值)。\n\n图片裁剪位置< number >：无单位，默认单位 px，支持百分比。\n在设置`border-image`时实际是将图片进行裁剪形成九个分离区域，然后进行边角设置。\n\n![](http://image.zhangxinxu.com/image/blog/201001/jiugong.gif)\n\n即有了 border-top-image , border-right-image , border-bottom-image , border-left-image, border-top-left-image , border-top-right-image , border-bottom-left-image , border-bottom-right-image 以及中间内容区域。\n\n比如当前边框背景图资源为 81px\\*81px。\n\n```css\n// 边框平铺\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 round; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 round; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 round; /* Opera */\n  border-image: url(/i/border.png) 27 round;\n}\n```\n\n![](http://image.zhangxinxu.com/image/blog/201001/2010-01-08_164725.png)\n\n```css\n// 边框拉伸\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 stretch; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 stretch; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 stretch; /* Opera */\n  border-image: url(/i/border.png) 27 stretch;\n}\n```\n\n![](http://image.zhangxinxu.com/image/blog/201001/2010-01-08_140351.png)\n\n```css\n// 边框重复\ndiv {\n  border: 20px solid transparent;\n  width: 300px;\n  -moz-border-image: url(/i/border.png) 27 repeat; /* Old Firefox */\n  -webkit-border-image: url(/i/border.png) 27 repeat; /* Safari and Chrome */\n  -o-border-image: url(/i/border.png) 27 repeat; /* Opera */\n  border-image: url(/i/border.png) 27 repeat;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201001/2010-01-08_170850.png)\n\nround 会压缩（或伸展）图片大小使其正好在区域内显示，而 repeat 是不管三七二十一直接重复的，而且是居中重复。\n\n边框图片被切割成 9 部分，以一一对应的关系放到 div 边框的九宫格中，然后再压缩（或拉伸）至边框（border-width 或 border-image-width）的宽度大小。\n\n设置`border-image-width`：优先以边框图片宽度。\n\n```css\ndiv {\n  border-image: url(/i/border.png) 27/10px stretch;\n}\n```\n\n#### Text effects\n\n_text-stroke_：文字描边属性，宽度+颜色，目前只能实现描边，也无法指定是外描边，内描边还是居中描边，目前指的是剧中描边。\n\n本质上让真实文本的字重削弱了，例如文字在页面上渲染时候，线条粗细大概是 1 像素，这时候我们设置个 1 像素宽的描边，则真实显示粗细岂不是只剩下 0.5 像素，如果真是这样，我们其实可以模拟 font-weight 属性的不同字重效果。但是对于某些字体，由于字重的缺失，font-weight:100 和 font-weight:400 粗细都是一样的，都是正常粗细。\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_175554.png)\n\n实现外描边可以使用`text-shadow`：\n\n```css\n.strok-outside {\n  text-shadow: 0 1px red, 1px 0 red, -1px 0 red, 0 -1px red;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_205440.png)\n\n多重描边：\n\n`text-shadow` 属性值可以不断累加，但是 `text-stroke` 属性却不行，如果想要实现多重描边效果，可以借助伪元素多层叠加模拟。\n\n```html\n<p data-text=\"多重描边\">多重描边</p>\n```\n\n```css\np {\n  -webkit-text-stroke: 1px #fff;\n  font-size: 40px;\n  position: relative;\n  z-index: 0;\n}\np::before,\np::after {\n  content: attr(data-text);\n  position: absolute;\n  left: 0;\n  z-index: -1;\n}\np::before {\n  -webkit-text-stroke: 7px yellow;\n}\np::after {\n  -webkit-text-stroke: 4px red;\n}\n```\n\n![](https://image.zhangxinxu.com/image/blog/201706/2017-06-04_211947.png)\n\n_text-fill-color_：文字颜色填充，实现效果基本与`color`一致，目前仅`webkit`核心浏览器下支持该属性，会覆盖`color`属性，主要可实现渐变字体和镂空字体。\n\n渐变字体：\n\n```html\n<p class=\"font1\">渐变色字体</p>\n```\n\n```css\n.font1 {\n  font-size: 22px;\n  background-image: -webkit-linear-gradient(\n    bottom,\n    rgb(201, 21, 134),\n    rgb(20, 11, 255)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/6080416-d411cc5334e83b22.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/135/format/webp)\n\n镂空字体（配合`text-stroke`）：\n\n```html\n<p class=\"font1\">我的镂空字体</p>\n```\n\n```css\n.font1 {\n  font-size: 32px;\n  -webkit-text-fill-color: transparent;\n  -webkit-text-stroke: 1px #000;\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/6080416-57515b6a4b0c68f4.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/245/format/webp)\n\n_word-wrap_：文字换行。\n\n经常在渲染文本时由于连续英文字符串过长导致文本溢出（比如 url 链接等），此时可对文本设置强制边界换行。\n\n```css\n.word_wrap {\n  word-wrap: break-word;\n}\n```\n![](http://image.zhangxinxu.com/image/web/css3/2010-03-08_012239.png)\n\n参考：[张鑫旭大神博客](https://www.zhangxinxu.com/)","slug":"re-css_01","published":1,"updated":"2020-04-21T08:53:30.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp8000qe36kcuoymwl7","content":"<p>直到前天同事的技术分享，我才突然觉得我好像并不懂 css，只会实现，不会就 Google，但是从来没有去真正的了解过其中的原理，惭愧。</p>\n<p>所以重看 css 和 js 都是必须要做的事。</p>\n<h4 id=\"x-baseline\"><a href=\"#x-baseline\" class=\"headerlink\" title=\"x (baseline)\"></a>x (baseline)</h4><p>我之前一直没有了解过的”x”，在各种内联模型中，涉及排版或者对齐时都需要用到基线（baseline），比如<code>line-light</code>行高的定义就是两基线的间距，<code>vertical-align</code>的默认值就是基线。<br>那么最普遍的就是字母基线（<code>x</code>的下边缘线）：</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png\" alt=\"\"></p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png\" alt=\"\"></p>\n<ul>\n<li>x-height: 小写 x 字母的高度</li>\n<li>ascender height: 上下线高度</li>\n<li>cap height: 大写字母高度</li>\n<li>median: 中线</li>\n<li>descender height: 下行线高度</li>\n</ul>\n<p>在 css 内<code>vertical-align: middle</code>就与<code>x-height</code>有关，其中 middle 与上述 median 并不同，在规范中对<code>middle</code>的解释：</p>\n<blockquote>\n<p><em>middle</em>: This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for “x-height”, it may be computed using 1/2 the “x-height”. Lacking either of these pieces of information, the position of this baseline may be approximated by the “central” baseline.</p>\n</blockquote>\n<p>middle 指的是基线往上 1/2 “x-height”高度。可以近似看做字母 x 交叉点那个位置。<br>所以<code>vertical-align: middle</code>并不是绝对的垂直居中对齐。</p>\n<p>css 内的<code>ex</code>单位：一个相对单位，指小写字母 x 的高度。<br>实用：借助<code>ex</code>实现 icon 上下垂直居中的效果（必须为内联元素），优点在于不受字体字号影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon-arrow &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    height: 1ex;</span><br><span class=\"line\">    background: url(arrow.png) no-repeat center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png\" alt=\"\"></p>\n<p>参考：<a href=\"https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/\" target=\"_blank\" rel=\"noopener\">字母’x’在 CSS 世界中的角色和故事</a></p>\n<h4 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h4><p><em>border-color</em>: 如果设置 border 宽度为 Xpx，那么可以在 border 上适应 X 种颜色，每种颜色显示 1px 的宽度。如果说你的 border 的宽度是 10 个像素，但是只声明了 5 或 6 种颜色，那么最后一个颜色将被添加到剩下的宽度。</p>\n<p><em>border-radius</em>：左上角水平圆角半径大小 右上角水平圆角半径大小 右下角水平圆角半径大小 左下角水平圆角半径大小/左上角垂直圆角半径大小 右上角垂直圆角半径大小 右下角垂直圆角半径大小 左下角垂直圆角半径大小。<br>如果忽略垂直圆角值，则等于水平圆角值即此时圆角为 1/4 圆，水平/垂直半径有一个小于等于 0，则这个角是矩形不会是圆的。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201511/2015-11-01_191017-highlight.png\" alt=\"\"></p>\n<p><em>border-image</em>：&lt; image &gt; &lt; number &gt; &lt; percentage &gt;</p>\n<p>[ stretch | repeat | round ]：拉伸 | 重复 | 平铺 (其中 stretch 是默认值)。</p>\n<p>图片裁剪位置&lt; number &gt;：无单位，默认单位 px，支持百分比。<br>在设置<code>border-image</code>时实际是将图片进行裁剪形成九个分离区域，然后进行边角设置。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/jiugong.gif\" alt=\"\"></p>\n<p>即有了 border-top-image , border-right-image , border-bottom-image , border-left-image, border-top-left-image , border-top-right-image , border-bottom-left-image , border-bottom-right-image 以及中间内容区域。</p>\n<p>比如当前边框背景图资源为 81px*81px。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框平铺</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/2010-01-08_164725.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框拉伸</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/2010-01-08_140351.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框重复</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201001/2010-01-08_170850.png\" alt=\"\"></p>\n<p>round 会压缩（或伸展）图片大小使其正好在区域内显示，而 repeat 是不管三七二十一直接重复的，而且是居中重复。</p>\n<p>边框图片被切割成 9 部分，以一一对应的关系放到 div 边框的九宫格中，然后再压缩（或拉伸）至边框（border-width 或 border-image-width）的宽度大小。</p>\n<p>设置<code>border-image-width</code>：优先以边框图片宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span>/<span class=\"number\">10px</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Text-effects\"><a href=\"#Text-effects\" class=\"headerlink\" title=\"Text effects\"></a>Text effects</h4><p><em>text-stroke</em>：文字描边属性，宽度+颜色，目前只能实现描边，也无法指定是外描边，内描边还是居中描边，目前指的是剧中描边。</p>\n<p>本质上让真实文本的字重削弱了，例如文字在页面上渲染时候，线条粗细大概是 1 像素，这时候我们设置个 1 像素宽的描边，则真实显示粗细岂不是只剩下 0.5 像素，如果真是这样，我们其实可以模拟 font-weight 属性的不同字重效果。但是对于某些字体，由于字重的缺失，font-weight:100 和 font-weight:400 粗细都是一样的，都是正常粗细。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_175554.png\" alt=\"\"></p>\n<p>实现外描边可以使用<code>text-shadow</code>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.strok-outside</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> red, <span class=\"number\">1px</span> <span class=\"number\">0</span> red, -<span class=\"number\">1px</span> <span class=\"number\">0</span> red, <span class=\"number\">0</span> -<span class=\"number\">1px</span> red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_205440.png\" alt=\"\"></p>\n<p>多重描边：</p>\n<p><code>text-shadow</code> 属性值可以不断累加，但是 <code>text-stroke</code> 属性却不行，如果想要实现多重描边效果，可以借助伪元素多层叠加模拟。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-text</span>=<span class=\"string\">\"多重描边\"</span>&gt;</span>多重描边<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">1px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">attr</span>(data-text);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">7px</span> yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">4px</span> red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_211947.png\" alt=\"\"></p>\n<p><em>text-fill-color</em>：文字颜色填充，实现效果基本与<code>color</code>一致，目前仅<code>webkit</code>核心浏览器下支持该属性，会覆盖<code>color</code>属性，主要可实现渐变字体和镂空字体。</p>\n<p>渐变字体：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"font1\"</span>&gt;</span>渐变色字体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(</span><br><span class=\"line\">    bottom,</span><br><span class=\"line\">    rgb(201, 21, 134),</span><br><span class=\"line\">    <span class=\"built_in\">rgb</span>(20, 11, 255)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-background-clip</span>: text;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-d411cc5334e83b22.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/135/format/webp\" alt=\"\"></p>\n<p>镂空字体（配合<code>text-stroke</code>）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"font1\"</span>&gt;</span>我的镂空字体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">1px</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-57515b6a4b0c68f4.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/245/format/webp\" alt=\"\"></p>\n<p><em>word-wrap</em>：文字换行。</p>\n<p>经常在渲染文本时由于连续英文字符串过长导致文本溢出（比如 url 链接等），此时可对文本设置强制边界换行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.word_wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/web/css3/2010-03-08_012239.png\" alt=\"\"></p>\n<p>参考：<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭大神博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>直到前天同事的技术分享，我才突然觉得我好像并不懂 css，只会实现，不会就 Google，但是从来没有去真正的了解过其中的原理，惭愧。</p>\n<p>所以重看 css 和 js 都是必须要做的事。</p>\n<h4 id=\"x-baseline\"><a href=\"#x-baseline\" class=\"headerlink\" title=\"x (baseline)\"></a>x (baseline)</h4><p>我之前一直没有了解过的”x”，在各种内联模型中，涉及排版或者对齐时都需要用到基线（baseline），比如<code>line-light</code>行高的定义就是两基线的间距，<code>vertical-align</code>的默认值就是基线。<br>那么最普遍的就是字母基线（<code>x</code>的下边缘线）：</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png\" alt=\"\"></p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png\" alt=\"\"></p>\n<ul>\n<li>x-height: 小写 x 字母的高度</li>\n<li>ascender height: 上下线高度</li>\n<li>cap height: 大写字母高度</li>\n<li>median: 中线</li>\n<li>descender height: 下行线高度</li>\n</ul>\n<p>在 css 内<code>vertical-align: middle</code>就与<code>x-height</code>有关，其中 middle 与上述 median 并不同，在规范中对<code>middle</code>的解释：</p>\n<blockquote>\n<p><em>middle</em>: This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for “x-height”, it may be computed using 1/2 the “x-height”. Lacking either of these pieces of information, the position of this baseline may be approximated by the “central” baseline.</p>\n</blockquote>\n<p>middle 指的是基线往上 1/2 “x-height”高度。可以近似看做字母 x 交叉点那个位置。<br>所以<code>vertical-align: middle</code>并不是绝对的垂直居中对齐。</p>\n<p>css 内的<code>ex</code>单位：一个相对单位，指小写字母 x 的高度。<br>实用：借助<code>ex</code>实现 icon 上下垂直居中的效果（必须为内联元素），优点在于不受字体字号影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon-arrow &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    height: 1ex;</span><br><span class=\"line\">    background: url(arrow.png) no-repeat center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png\" alt=\"\"></p>\n<p>参考：<a href=\"https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/\" target=\"_blank\" rel=\"noopener\">字母’x’在 CSS 世界中的角色和故事</a></p>\n<h4 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h4><p><em>border-color</em>: 如果设置 border 宽度为 Xpx，那么可以在 border 上适应 X 种颜色，每种颜色显示 1px 的宽度。如果说你的 border 的宽度是 10 个像素，但是只声明了 5 或 6 种颜色，那么最后一个颜色将被添加到剩下的宽度。</p>\n<p><em>border-radius</em>：左上角水平圆角半径大小 右上角水平圆角半径大小 右下角水平圆角半径大小 左下角水平圆角半径大小/左上角垂直圆角半径大小 右上角垂直圆角半径大小 右下角垂直圆角半径大小 左下角垂直圆角半径大小。<br>如果忽略垂直圆角值，则等于水平圆角值即此时圆角为 1/4 圆，水平/垂直半径有一个小于等于 0，则这个角是矩形不会是圆的。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201511/2015-11-01_191017-highlight.png\" alt=\"\"></p>\n<p><em>border-image</em>：&lt; image &gt; &lt; number &gt; &lt; percentage &gt;</p>\n<p>[ stretch | repeat | round ]：拉伸 | 重复 | 平铺 (其中 stretch 是默认值)。</p>\n<p>图片裁剪位置&lt; number &gt;：无单位，默认单位 px，支持百分比。<br>在设置<code>border-image</code>时实际是将图片进行裁剪形成九个分离区域，然后进行边角设置。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/jiugong.gif\" alt=\"\"></p>\n<p>即有了 border-top-image , border-right-image , border-bottom-image , border-left-image, border-top-left-image , border-top-right-image , border-bottom-left-image , border-bottom-right-image 以及中间内容区域。</p>\n<p>比如当前边框背景图资源为 81px*81px。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框平铺</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> round;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/2010-01-08_164725.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框拉伸</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201001/2010-01-08_140351.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边框重复</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Old Firefox */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Safari and Chrome */</span></span><br><span class=\"line\">  <span class=\"attribute\">-o-border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat; <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201001/2010-01-08_170850.png\" alt=\"\"></p>\n<p>round 会压缩（或伸展）图片大小使其正好在区域内显示，而 repeat 是不管三七二十一直接重复的，而且是居中重复。</p>\n<p>边框图片被切割成 9 部分，以一一对应的关系放到 div 边框的九宫格中，然后再压缩（或拉伸）至边框（border-width 或 border-image-width）的宽度大小。</p>\n<p>设置<code>border-image-width</code>：优先以边框图片宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(/i/border.png) <span class=\"number\">27</span>/<span class=\"number\">10px</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Text-effects\"><a href=\"#Text-effects\" class=\"headerlink\" title=\"Text effects\"></a>Text effects</h4><p><em>text-stroke</em>：文字描边属性，宽度+颜色，目前只能实现描边，也无法指定是外描边，内描边还是居中描边，目前指的是剧中描边。</p>\n<p>本质上让真实文本的字重削弱了，例如文字在页面上渲染时候，线条粗细大概是 1 像素，这时候我们设置个 1 像素宽的描边，则真实显示粗细岂不是只剩下 0.5 像素，如果真是这样，我们其实可以模拟 font-weight 属性的不同字重效果。但是对于某些字体，由于字重的缺失，font-weight:100 和 font-weight:400 粗细都是一样的，都是正常粗细。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_175554.png\" alt=\"\"></p>\n<p>实现外描边可以使用<code>text-shadow</code>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.strok-outside</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> red, <span class=\"number\">1px</span> <span class=\"number\">0</span> red, -<span class=\"number\">1px</span> <span class=\"number\">0</span> red, <span class=\"number\">0</span> -<span class=\"number\">1px</span> red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_205440.png\" alt=\"\"></p>\n<p>多重描边：</p>\n<p><code>text-shadow</code> 属性值可以不断累加，但是 <code>text-stroke</code> 属性却不行，如果想要实现多重描边效果，可以借助伪元素多层叠加模拟。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-text</span>=<span class=\"string\">\"多重描边\"</span>&gt;</span>多重描边<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">1px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">attr</span>(data-text);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">7px</span> yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">4px</span> red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/201706/2017-06-04_211947.png\" alt=\"\"></p>\n<p><em>text-fill-color</em>：文字颜色填充，实现效果基本与<code>color</code>一致，目前仅<code>webkit</code>核心浏览器下支持该属性，会覆盖<code>color</code>属性，主要可实现渐变字体和镂空字体。</p>\n<p>渐变字体：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"font1\"</span>&gt;</span>渐变色字体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(</span><br><span class=\"line\">    bottom,</span><br><span class=\"line\">    rgb(201, 21, 134),</span><br><span class=\"line\">    <span class=\"built_in\">rgb</span>(20, 11, 255)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-background-clip</span>: text;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-d411cc5334e83b22.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/135/format/webp\" alt=\"\"></p>\n<p>镂空字体（配合<code>text-stroke</code>）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"font1\"</span>&gt;</span>我的镂空字体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke</span>: <span class=\"number\">1px</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-57515b6a4b0c68f4.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/245/format/webp\" alt=\"\"></p>\n<p><em>word-wrap</em>：文字换行。</p>\n<p>经常在渲染文本时由于连续英文字符串过长导致文本溢出（比如 url 链接等），此时可对文本设置强制边界换行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.word_wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://image.zhangxinxu.com/image/web/css3/2010-03-08_012239.png\" alt=\"\"></p>\n<p>参考：<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭大神博客</a></p>\n"},{"title":"roughViz.js 手绘风格的网页图表js库","date":"2020-01-05T06:58:15.000Z","_content":"\n![cover](https://assets-cdn.lanqb.com/manual-box/normal/roughViz_cover.PNG)\n\n是一个非常个性化的图标插件，且可以根据自己喜好变换出很多不同的显示样式。\n推荐：★★★★☆\n\n#### 支持图表类型\n\n- Bar (roughViz.Bar) 条形图\n- Horizontal Bar (roughViz.BarH) 水平条形图\n- Donut (roughViz.Donut) 圆环图\n- Line (roughViz.Line) 折线图\n- Pie (roughViz.Pie) 饼图\n- Scatter (roughViz.Scatter) 散点图\n- Stacked Bar (roughViz.StackedBar) 堆积条形图\n\n#### cdn\n\n`<script src=\"https://unpkg.com/rough-viz@1.0.5\"></script>`\n\n#### npm\n\n```js\nnpm install rough-viz\nnpm install react-roughviz\nnpm install vue-roughviz\n```\n\n#### use\n\ndata 处理有三种方式：\n\n- csv 文件\n- tsv 文件\n- data object\n\n```js\n// add this to abstract base\n  resolveData(data) {\n    if (typeof data === 'string') {\n      if (data.includes('.csv')) {\n        return () => {\n          csv(data).then(d => {\n            // console.log(d);\n            this.data = d;\n            this.drawFromFile();\n          });\n        };\n      } else if (data.includes('.tsv')) {\n        return () => {\n          tsv(data).then(d => {\n            this.data = d;\n            this.drawFromFile();\n          });\n        };\n      }\n    } else {\n      return () => {\n        this.data = data;\n        this.drawFromObject();\n      };\n    }\n  }\n```\nHow to use\n```html\n<!-- container -->\n<div id=\"vis0\"></div>\n```\n\n```js\n// bar chart\nnew roughViz.Bar({\n  element: \"#vis0\", // container selection\n  data: {\n    flavor: [\"North\", \"South\", \"East\", \"West\"],\n    price: [10, 5, 8, 3]\n  },\n  labels: \"flavor\",\n  values: \"price\"\n});\n\n// Horizontal Bar Chart\nnew roughViz.BarH({\n  element: \"#vis2\",\n  title: \"Vehicles I've Had\",\n  data: {\n    labels: [\n      \"1992 Ford Aerostar Van\",\n      \"2013 Kia Rio\",\n      \"1980 Honda CB 125s\",\n      \"1992 Toyota Tercel\"\n    ],\n    values: [8, 4, 6, 2]\n  },\n  xLabel: \"Time Owned (Years)\"\n});\n\n// Donut chart\nnew roughViz.Donut({\n  element: \"#vis1\",\n  data: {\n    labels: [\"North\", \"South\", \"East\", \"West\"],\n    values: [10, 5, 8, 3]\n  }\n});\n\n// line chart\nnew roughViz.Line({\n  element: \"#vis3\",\n  data:\n    \"https://raw.githubusercontent.com/jwilber/random_data/master/tweets.csv\",\n  title: \"Line Chart\",\n  y: \"favorites\",\n  y2: \"retweets\",\n  y3: \"tweets\",\n  yLabel: \"hey\"\n});\n\n// pie chart\nnew roughViz.Pie({\n  element: \"#vis4\",\n  titleFontSize: \"1.5rem\",\n  data: {\n    labels: [\"yes\", \"no\", \"lol idk man\"],\n    values: [2, 8, 4]\n  },\n  title: \"'Yarn Plot': Useful?\"\n});\n\n// Scatter chart\nnew roughViz.Scatter({\n  element: \"#vis5\",\n  data:\n    \"https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv\",\n  title: \"Iris Scatter Plot\",\n  x: \"sepal_width\",\n  y: \"petal_length\",\n  colorVar: \"species\",\n  highlightLabel: \"species\",\n  fillWeight: 4,\n  radius: 12,\n  colors: [\"pink\", \"coral\", \"skyblue\"],\n  stroke: \"black\",\n  strokeWidth: 0.4,\n  roughness: 1,\n  width: 400,\n  height: 450,\n  font: 0,\n  xLabel: \"sepal width\",\n  yLabel: \"petal length\",\n  curbZero: false\n});\n// Stacked Bar chart\nnew roughViz.StackedBar({\n  element: \"#vis6\",\n  data: [\n    {\n      month: \"Jan\",\n      A: 20,\n      B: 5,\n      C: 10\n    },\n    {\n      month: \"Feb\",\n      A: 25,\n      B: 10,\n      C: 20\n    },\n    {\n      month: \"March\",\n      A: 30,\n      B: 50,\n      C: 10\n    }\n  ],\n  labels: \"month\",\n  title: \"Monthly Revenue\",\n  roughness: 2,\n  colors: [\"blue\", \"#f996ae\", \"skyblue\", \"#9ff4df\"],\n  fillWeight: 0.35,\n  strokeWidth: 0.5,\n  fillStyle: \"cross-hatch\",\n  stroke: \"black\"\n});\n```\n\n在原本基础的图形表现上，还可以自定义图表显示样式，从而使图表更具独特风格。\n\n- axisFontSize [string]: Font-size for axes' labels. Default: '1rem'. 坐标轴字体大小\n- axisRoughness [number]: Roughness for x & y axes. Default: 0.5. 坐标轴粗糙程度\n- axisStrokeWidth [number]: Stroke-width for x & y axes. Default: 0.5. 坐标轴线宽\n- bowing [number]: Chart bowing. Default: 0. 弯曲程度\n- color [string]: Color for each bar. Default: 'skyblue'. 填色\n- fillStyle [string]: Bar fill-style. Should be one of fillStyles shown above. 填充风格\n- fillWeight [number]: Weight of inner paths' color. Default: 0.5. 填充饱和度\n- font: Font-family to use. You can use 0 or gaegu to use Gaegu, or 1 or indie flower to use Indie Flower. Or feed it something else. Default: Gaegu. 字体类型\n- highlight [string]: Color for each bar on hover. Default: 'coral'. 高亮\n- innerStrokeWidth [number]: Stroke-width for paths inside bars. Default: 1. 内部绘线宽度\n- interactive [boolean]: Whether or not chart is interactive. Default: true. 可交互性，鼠标 hover 操作等\n- labelFontSize [string]: Font-size for axes' labels. Default: '1rem'. 标签字体大小\n- margin [object]: Margin object. Default: {top: 50, right: 20, bottom: 70, left: 100} 外边距\n- padding [number]: Padding between bars. Default: 0.1. 内边距\n- roughness [number]: Roughness level of chart. Default: 1. 粗糙程度\n- simplification [number]: Chart simplification. Default 0.2. 简化\n- stroke [string]: Color of bars' stroke. Default: black. 绘线颜色\n- strokeWidth [number]: Size of bars' stroke. Default: 1. 绘线宽度\n- title [string]: Chart title. Optional. 图表标题\n- titleFontSize [string]: Font-size for chart title. Default: '1rem'. 标题字体大小\n- tooltipFontSize [string]: Font-size for tooltip. Default: '0.95rem'. 提示字体大小\n- xLabel [string]: Label for x-axis. x 轴标签\n- yLabel [string]: Label for y-axis. y 轴标签\n- legend [boolean]: Whether or not to add legend. Default: 'true'. 图例\n- legendPosition [string]: Position of legend. Should be either 'left' or 'right'. Default: 'right'. 图例位置\n- circle [boolean]: Whether or not to add circles to chart. Default: true. 圆形\n- circleRadius [number]: Radius of circles. Default: 10. 圆型半径\n- circleRoughness [number]: Roughness of circles. Default: 2. 圆形粗糙程度\n\nfillStyle\n![](https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png)\n\nroughness\n![](https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png)\n\nfillWeight\n![](https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png)\n\n传送门 [roughViz github](https://github.com/jwilber/roughViz)\n","source":"_posts/roughViz.md","raw":"---\ntitle: roughViz.js 手绘风格的网页图表js库\ndate: 2020-01-05 14:58:15\ntags:\n  - \"js\"\n  - \"工具/插件\"\ncategories:\n  - \"js\"\n---\n\n![cover](https://assets-cdn.lanqb.com/manual-box/normal/roughViz_cover.PNG)\n\n是一个非常个性化的图标插件，且可以根据自己喜好变换出很多不同的显示样式。\n推荐：★★★★☆\n\n#### 支持图表类型\n\n- Bar (roughViz.Bar) 条形图\n- Horizontal Bar (roughViz.BarH) 水平条形图\n- Donut (roughViz.Donut) 圆环图\n- Line (roughViz.Line) 折线图\n- Pie (roughViz.Pie) 饼图\n- Scatter (roughViz.Scatter) 散点图\n- Stacked Bar (roughViz.StackedBar) 堆积条形图\n\n#### cdn\n\n`<script src=\"https://unpkg.com/rough-viz@1.0.5\"></script>`\n\n#### npm\n\n```js\nnpm install rough-viz\nnpm install react-roughviz\nnpm install vue-roughviz\n```\n\n#### use\n\ndata 处理有三种方式：\n\n- csv 文件\n- tsv 文件\n- data object\n\n```js\n// add this to abstract base\n  resolveData(data) {\n    if (typeof data === 'string') {\n      if (data.includes('.csv')) {\n        return () => {\n          csv(data).then(d => {\n            // console.log(d);\n            this.data = d;\n            this.drawFromFile();\n          });\n        };\n      } else if (data.includes('.tsv')) {\n        return () => {\n          tsv(data).then(d => {\n            this.data = d;\n            this.drawFromFile();\n          });\n        };\n      }\n    } else {\n      return () => {\n        this.data = data;\n        this.drawFromObject();\n      };\n    }\n  }\n```\nHow to use\n```html\n<!-- container -->\n<div id=\"vis0\"></div>\n```\n\n```js\n// bar chart\nnew roughViz.Bar({\n  element: \"#vis0\", // container selection\n  data: {\n    flavor: [\"North\", \"South\", \"East\", \"West\"],\n    price: [10, 5, 8, 3]\n  },\n  labels: \"flavor\",\n  values: \"price\"\n});\n\n// Horizontal Bar Chart\nnew roughViz.BarH({\n  element: \"#vis2\",\n  title: \"Vehicles I've Had\",\n  data: {\n    labels: [\n      \"1992 Ford Aerostar Van\",\n      \"2013 Kia Rio\",\n      \"1980 Honda CB 125s\",\n      \"1992 Toyota Tercel\"\n    ],\n    values: [8, 4, 6, 2]\n  },\n  xLabel: \"Time Owned (Years)\"\n});\n\n// Donut chart\nnew roughViz.Donut({\n  element: \"#vis1\",\n  data: {\n    labels: [\"North\", \"South\", \"East\", \"West\"],\n    values: [10, 5, 8, 3]\n  }\n});\n\n// line chart\nnew roughViz.Line({\n  element: \"#vis3\",\n  data:\n    \"https://raw.githubusercontent.com/jwilber/random_data/master/tweets.csv\",\n  title: \"Line Chart\",\n  y: \"favorites\",\n  y2: \"retweets\",\n  y3: \"tweets\",\n  yLabel: \"hey\"\n});\n\n// pie chart\nnew roughViz.Pie({\n  element: \"#vis4\",\n  titleFontSize: \"1.5rem\",\n  data: {\n    labels: [\"yes\", \"no\", \"lol idk man\"],\n    values: [2, 8, 4]\n  },\n  title: \"'Yarn Plot': Useful?\"\n});\n\n// Scatter chart\nnew roughViz.Scatter({\n  element: \"#vis5\",\n  data:\n    \"https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv\",\n  title: \"Iris Scatter Plot\",\n  x: \"sepal_width\",\n  y: \"petal_length\",\n  colorVar: \"species\",\n  highlightLabel: \"species\",\n  fillWeight: 4,\n  radius: 12,\n  colors: [\"pink\", \"coral\", \"skyblue\"],\n  stroke: \"black\",\n  strokeWidth: 0.4,\n  roughness: 1,\n  width: 400,\n  height: 450,\n  font: 0,\n  xLabel: \"sepal width\",\n  yLabel: \"petal length\",\n  curbZero: false\n});\n// Stacked Bar chart\nnew roughViz.StackedBar({\n  element: \"#vis6\",\n  data: [\n    {\n      month: \"Jan\",\n      A: 20,\n      B: 5,\n      C: 10\n    },\n    {\n      month: \"Feb\",\n      A: 25,\n      B: 10,\n      C: 20\n    },\n    {\n      month: \"March\",\n      A: 30,\n      B: 50,\n      C: 10\n    }\n  ],\n  labels: \"month\",\n  title: \"Monthly Revenue\",\n  roughness: 2,\n  colors: [\"blue\", \"#f996ae\", \"skyblue\", \"#9ff4df\"],\n  fillWeight: 0.35,\n  strokeWidth: 0.5,\n  fillStyle: \"cross-hatch\",\n  stroke: \"black\"\n});\n```\n\n在原本基础的图形表现上，还可以自定义图表显示样式，从而使图表更具独特风格。\n\n- axisFontSize [string]: Font-size for axes' labels. Default: '1rem'. 坐标轴字体大小\n- axisRoughness [number]: Roughness for x & y axes. Default: 0.5. 坐标轴粗糙程度\n- axisStrokeWidth [number]: Stroke-width for x & y axes. Default: 0.5. 坐标轴线宽\n- bowing [number]: Chart bowing. Default: 0. 弯曲程度\n- color [string]: Color for each bar. Default: 'skyblue'. 填色\n- fillStyle [string]: Bar fill-style. Should be one of fillStyles shown above. 填充风格\n- fillWeight [number]: Weight of inner paths' color. Default: 0.5. 填充饱和度\n- font: Font-family to use. You can use 0 or gaegu to use Gaegu, or 1 or indie flower to use Indie Flower. Or feed it something else. Default: Gaegu. 字体类型\n- highlight [string]: Color for each bar on hover. Default: 'coral'. 高亮\n- innerStrokeWidth [number]: Stroke-width for paths inside bars. Default: 1. 内部绘线宽度\n- interactive [boolean]: Whether or not chart is interactive. Default: true. 可交互性，鼠标 hover 操作等\n- labelFontSize [string]: Font-size for axes' labels. Default: '1rem'. 标签字体大小\n- margin [object]: Margin object. Default: {top: 50, right: 20, bottom: 70, left: 100} 外边距\n- padding [number]: Padding between bars. Default: 0.1. 内边距\n- roughness [number]: Roughness level of chart. Default: 1. 粗糙程度\n- simplification [number]: Chart simplification. Default 0.2. 简化\n- stroke [string]: Color of bars' stroke. Default: black. 绘线颜色\n- strokeWidth [number]: Size of bars' stroke. Default: 1. 绘线宽度\n- title [string]: Chart title. Optional. 图表标题\n- titleFontSize [string]: Font-size for chart title. Default: '1rem'. 标题字体大小\n- tooltipFontSize [string]: Font-size for tooltip. Default: '0.95rem'. 提示字体大小\n- xLabel [string]: Label for x-axis. x 轴标签\n- yLabel [string]: Label for y-axis. y 轴标签\n- legend [boolean]: Whether or not to add legend. Default: 'true'. 图例\n- legendPosition [string]: Position of legend. Should be either 'left' or 'right'. Default: 'right'. 图例位置\n- circle [boolean]: Whether or not to add circles to chart. Default: true. 圆形\n- circleRadius [number]: Radius of circles. Default: 10. 圆型半径\n- circleRoughness [number]: Roughness of circles. Default: 2. 圆形粗糙程度\n\nfillStyle\n![](https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png)\n\nroughness\n![](https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png)\n\nfillWeight\n![](https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png)\n\n传送门 [roughViz github](https://github.com/jwilber/roughViz)\n","slug":"roughViz","published":1,"updated":"2020-04-21T08:53:30.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrp9000ve36kvzg3v7wj","content":"<p><img src=\"https://assets-cdn.lanqb.com/manual-box/normal/roughViz_cover.PNG\" alt=\"cover\"></p>\n<p>是一个非常个性化的图标插件，且可以根据自己喜好变换出很多不同的显示样式。<br>推荐：★★★★☆</p>\n<h4 id=\"支持图表类型\"><a href=\"#支持图表类型\" class=\"headerlink\" title=\"支持图表类型\"></a>支持图表类型</h4><ul>\n<li>Bar (roughViz.Bar) 条形图</li>\n<li>Horizontal Bar (roughViz.BarH) 水平条形图</li>\n<li>Donut (roughViz.Donut) 圆环图</li>\n<li>Line (roughViz.Line) 折线图</li>\n<li>Pie (roughViz.Pie) 饼图</li>\n<li>Scatter (roughViz.Scatter) 散点图</li>\n<li>Stacked Bar (roughViz.StackedBar) 堆积条形图</li>\n</ul>\n<h4 id=\"cdn\"><a href=\"#cdn\" class=\"headerlink\" title=\"cdn\"></a>cdn</h4><p><code>&lt;script src=&quot;https://unpkg.com/rough-viz@1.0.5&quot;&gt;&lt;/script&gt;</code></p>\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rough-viz</span><br><span class=\"line\">npm install react-roughviz</span><br><span class=\"line\">npm install vue-roughviz</span><br></pre></td></tr></table></figure>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h4><p>data 处理有三种方式：</p>\n<ul>\n<li>csv 文件</li>\n<li>tsv 文件</li>\n<li>data object</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add this to abstract base</span></span><br><span class=\"line\">  resolveData(data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.includes(<span class=\"string\">'.csv'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          csv(data).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(d);</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data = d;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawFromFile();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.includes(<span class=\"string\">'.tsv'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          tsv(data).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data = d;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawFromFile();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawFromObject();</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>How to use<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vis0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bar chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Bar(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis0\"</span>, <span class=\"comment\">// container selection</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    flavor: [<span class=\"string\">\"North\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"West\"</span>],</span><br><span class=\"line\">    price: [<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  labels: <span class=\"string\">\"flavor\"</span>,</span><br><span class=\"line\">  values: <span class=\"string\">\"price\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Horizontal Bar Chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.BarH(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis2\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Vehicles I've Had\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [</span><br><span class=\"line\">      <span class=\"string\">\"1992 Ford Aerostar Van\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"2013 Kia Rio\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1980 Honda CB 125s\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1992 Toyota Tercel\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    values: [<span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  xLabel: <span class=\"string\">\"Time Owned (Years)\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Donut chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Donut(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis1\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [<span class=\"string\">\"North\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"West\"</span>],</span><br><span class=\"line\">    values: [<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// line chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Line(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis3\"</span>,</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    <span class=\"string\">\"https://raw.githubusercontent.com/jwilber/random_data/master/tweets.csv\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Line Chart\"</span>,</span><br><span class=\"line\">  y: <span class=\"string\">\"favorites\"</span>,</span><br><span class=\"line\">  y2: <span class=\"string\">\"retweets\"</span>,</span><br><span class=\"line\">  y3: <span class=\"string\">\"tweets\"</span>,</span><br><span class=\"line\">  yLabel: <span class=\"string\">\"hey\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pie chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Pie(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis4\"</span>,</span><br><span class=\"line\">  titleFontSize: <span class=\"string\">\"1.5rem\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [<span class=\"string\">\"yes\"</span>, <span class=\"string\">\"no\"</span>, <span class=\"string\">\"lol idk man\"</span>],</span><br><span class=\"line\">    values: [<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  title: <span class=\"string\">\"'Yarn Plot': Useful?\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scatter chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Scatter(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis5\"</span>,</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    <span class=\"string\">\"https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Iris Scatter Plot\"</span>,</span><br><span class=\"line\">  x: <span class=\"string\">\"sepal_width\"</span>,</span><br><span class=\"line\">  y: <span class=\"string\">\"petal_length\"</span>,</span><br><span class=\"line\">  colorVar: <span class=\"string\">\"species\"</span>,</span><br><span class=\"line\">  highlightLabel: <span class=\"string\">\"species\"</span>,</span><br><span class=\"line\">  fillWeight: <span class=\"number\">4</span>,</span><br><span class=\"line\">  radius: <span class=\"number\">12</span>,</span><br><span class=\"line\">  colors: [<span class=\"string\">\"pink\"</span>, <span class=\"string\">\"coral\"</span>, <span class=\"string\">\"skyblue\"</span>],</span><br><span class=\"line\">  stroke: <span class=\"string\">\"black\"</span>,</span><br><span class=\"line\">  strokeWidth: <span class=\"number\">0.4</span>,</span><br><span class=\"line\">  roughness: <span class=\"number\">1</span>,</span><br><span class=\"line\">  width: <span class=\"number\">400</span>,</span><br><span class=\"line\">  height: <span class=\"number\">450</span>,</span><br><span class=\"line\">  font: <span class=\"number\">0</span>,</span><br><span class=\"line\">  xLabel: <span class=\"string\">\"sepal width\"</span>,</span><br><span class=\"line\">  yLabel: <span class=\"string\">\"petal length\"</span>,</span><br><span class=\"line\">  curbZero: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Stacked Bar chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.StackedBar(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis6\"</span>,</span><br><span class=\"line\">  data: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"Jan\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">20</span>,</span><br><span class=\"line\">      B: <span class=\"number\">5</span>,</span><br><span class=\"line\">      C: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"Feb\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">25</span>,</span><br><span class=\"line\">      B: <span class=\"number\">10</span>,</span><br><span class=\"line\">      C: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"March\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">30</span>,</span><br><span class=\"line\">      B: <span class=\"number\">50</span>,</span><br><span class=\"line\">      C: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  labels: <span class=\"string\">\"month\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Monthly Revenue\"</span>,</span><br><span class=\"line\">  roughness: <span class=\"number\">2</span>,</span><br><span class=\"line\">  colors: [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"#f996ae\"</span>, <span class=\"string\">\"skyblue\"</span>, <span class=\"string\">\"#9ff4df\"</span>],</span><br><span class=\"line\">  fillWeight: <span class=\"number\">0.35</span>,</span><br><span class=\"line\">  strokeWidth: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">  fillStyle: <span class=\"string\">\"cross-hatch\"</span>,</span><br><span class=\"line\">  stroke: <span class=\"string\">\"black\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在原本基础的图形表现上，还可以自定义图表显示样式，从而使图表更具独特风格。</p>\n<ul>\n<li>axisFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 坐标轴字体大小</li>\n<li>axisRoughness [number]: Roughness for x &amp; y axes. Default: 0.5. 坐标轴粗糙程度</li>\n<li>axisStrokeWidth [number]: Stroke-width for x &amp; y axes. Default: 0.5. 坐标轴线宽</li>\n<li>bowing [number]: Chart bowing. Default: 0. 弯曲程度</li>\n<li>color [string]: Color for each bar. Default: ‘skyblue’. 填色</li>\n<li>fillStyle [string]: Bar fill-style. Should be one of fillStyles shown above. 填充风格</li>\n<li>fillWeight [number]: Weight of inner paths’ color. Default: 0.5. 填充饱和度</li>\n<li>font: Font-family to use. You can use 0 or gaegu to use Gaegu, or 1 or indie flower to use Indie Flower. Or feed it something else. Default: Gaegu. 字体类型</li>\n<li>highlight [string]: Color for each bar on hover. Default: ‘coral’. 高亮</li>\n<li>innerStrokeWidth [number]: Stroke-width for paths inside bars. Default: 1. 内部绘线宽度</li>\n<li>interactive [boolean]: Whether or not chart is interactive. Default: true. 可交互性，鼠标 hover 操作等</li>\n<li>labelFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 标签字体大小</li>\n<li>margin [object]: Margin object. Default: {top: 50, right: 20, bottom: 70, left: 100} 外边距</li>\n<li>padding [number]: Padding between bars. Default: 0.1. 内边距</li>\n<li>roughness [number]: Roughness level of chart. Default: 1. 粗糙程度</li>\n<li>simplification [number]: Chart simplification. Default 0.2. 简化</li>\n<li>stroke [string]: Color of bars’ stroke. Default: black. 绘线颜色</li>\n<li>strokeWidth [number]: Size of bars’ stroke. Default: 1. 绘线宽度</li>\n<li>title [string]: Chart title. Optional. 图表标题</li>\n<li>titleFontSize [string]: Font-size for chart title. Default: ‘1rem’. 标题字体大小</li>\n<li>tooltipFontSize [string]: Font-size for tooltip. Default: ‘0.95rem’. 提示字体大小</li>\n<li>xLabel [string]: Label for x-axis. x 轴标签</li>\n<li>yLabel [string]: Label for y-axis. y 轴标签</li>\n<li>legend [boolean]: Whether or not to add legend. Default: ‘true’. 图例</li>\n<li>legendPosition [string]: Position of legend. Should be either ‘left’ or ‘right’. Default: ‘right’. 图例位置</li>\n<li>circle [boolean]: Whether or not to add circles to chart. Default: true. 圆形</li>\n<li>circleRadius [number]: Radius of circles. Default: 10. 圆型半径</li>\n<li>circleRoughness [number]: Roughness of circles. Default: 2. 圆形粗糙程度</li>\n</ul>\n<p>fillStyle<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png\" alt=\"\"></p>\n<p>roughness<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png\" alt=\"\"></p>\n<p>fillWeight<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png\" alt=\"\"></p>\n<p>传送门 <a href=\"https://github.com/jwilber/roughViz\" target=\"_blank\" rel=\"noopener\">roughViz github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://assets-cdn.lanqb.com/manual-box/normal/roughViz_cover.PNG\" alt=\"cover\"></p>\n<p>是一个非常个性化的图标插件，且可以根据自己喜好变换出很多不同的显示样式。<br>推荐：★★★★☆</p>\n<h4 id=\"支持图表类型\"><a href=\"#支持图表类型\" class=\"headerlink\" title=\"支持图表类型\"></a>支持图表类型</h4><ul>\n<li>Bar (roughViz.Bar) 条形图</li>\n<li>Horizontal Bar (roughViz.BarH) 水平条形图</li>\n<li>Donut (roughViz.Donut) 圆环图</li>\n<li>Line (roughViz.Line) 折线图</li>\n<li>Pie (roughViz.Pie) 饼图</li>\n<li>Scatter (roughViz.Scatter) 散点图</li>\n<li>Stacked Bar (roughViz.StackedBar) 堆积条形图</li>\n</ul>\n<h4 id=\"cdn\"><a href=\"#cdn\" class=\"headerlink\" title=\"cdn\"></a>cdn</h4><p><code>&lt;script src=&quot;https://unpkg.com/rough-viz@1.0.5&quot;&gt;&lt;/script&gt;</code></p>\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rough-viz</span><br><span class=\"line\">npm install react-roughviz</span><br><span class=\"line\">npm install vue-roughviz</span><br></pre></td></tr></table></figure>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h4><p>data 处理有三种方式：</p>\n<ul>\n<li>csv 文件</li>\n<li>tsv 文件</li>\n<li>data object</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add this to abstract base</span></span><br><span class=\"line\">  resolveData(data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.includes(<span class=\"string\">'.csv'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          csv(data).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(d);</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data = d;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawFromFile();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.includes(<span class=\"string\">'.tsv'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          tsv(data).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data = d;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawFromFile();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawFromObject();</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>How to use<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vis0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bar chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Bar(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis0\"</span>, <span class=\"comment\">// container selection</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    flavor: [<span class=\"string\">\"North\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"West\"</span>],</span><br><span class=\"line\">    price: [<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  labels: <span class=\"string\">\"flavor\"</span>,</span><br><span class=\"line\">  values: <span class=\"string\">\"price\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Horizontal Bar Chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.BarH(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis2\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Vehicles I've Had\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [</span><br><span class=\"line\">      <span class=\"string\">\"1992 Ford Aerostar Van\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"2013 Kia Rio\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1980 Honda CB 125s\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1992 Toyota Tercel\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    values: [<span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  xLabel: <span class=\"string\">\"Time Owned (Years)\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Donut chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Donut(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis1\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [<span class=\"string\">\"North\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"West\"</span>],</span><br><span class=\"line\">    values: [<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// line chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Line(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis3\"</span>,</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    <span class=\"string\">\"https://raw.githubusercontent.com/jwilber/random_data/master/tweets.csv\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Line Chart\"</span>,</span><br><span class=\"line\">  y: <span class=\"string\">\"favorites\"</span>,</span><br><span class=\"line\">  y2: <span class=\"string\">\"retweets\"</span>,</span><br><span class=\"line\">  y3: <span class=\"string\">\"tweets\"</span>,</span><br><span class=\"line\">  yLabel: <span class=\"string\">\"hey\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pie chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Pie(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis4\"</span>,</span><br><span class=\"line\">  titleFontSize: <span class=\"string\">\"1.5rem\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    labels: [<span class=\"string\">\"yes\"</span>, <span class=\"string\">\"no\"</span>, <span class=\"string\">\"lol idk man\"</span>],</span><br><span class=\"line\">    values: [<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  title: <span class=\"string\">\"'Yarn Plot': Useful?\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scatter chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.Scatter(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis5\"</span>,</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    <span class=\"string\">\"https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Iris Scatter Plot\"</span>,</span><br><span class=\"line\">  x: <span class=\"string\">\"sepal_width\"</span>,</span><br><span class=\"line\">  y: <span class=\"string\">\"petal_length\"</span>,</span><br><span class=\"line\">  colorVar: <span class=\"string\">\"species\"</span>,</span><br><span class=\"line\">  highlightLabel: <span class=\"string\">\"species\"</span>,</span><br><span class=\"line\">  fillWeight: <span class=\"number\">4</span>,</span><br><span class=\"line\">  radius: <span class=\"number\">12</span>,</span><br><span class=\"line\">  colors: [<span class=\"string\">\"pink\"</span>, <span class=\"string\">\"coral\"</span>, <span class=\"string\">\"skyblue\"</span>],</span><br><span class=\"line\">  stroke: <span class=\"string\">\"black\"</span>,</span><br><span class=\"line\">  strokeWidth: <span class=\"number\">0.4</span>,</span><br><span class=\"line\">  roughness: <span class=\"number\">1</span>,</span><br><span class=\"line\">  width: <span class=\"number\">400</span>,</span><br><span class=\"line\">  height: <span class=\"number\">450</span>,</span><br><span class=\"line\">  font: <span class=\"number\">0</span>,</span><br><span class=\"line\">  xLabel: <span class=\"string\">\"sepal width\"</span>,</span><br><span class=\"line\">  yLabel: <span class=\"string\">\"petal length\"</span>,</span><br><span class=\"line\">  curbZero: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Stacked Bar chart</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> roughViz.StackedBar(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">\"#vis6\"</span>,</span><br><span class=\"line\">  data: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"Jan\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">20</span>,</span><br><span class=\"line\">      B: <span class=\"number\">5</span>,</span><br><span class=\"line\">      C: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"Feb\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">25</span>,</span><br><span class=\"line\">      B: <span class=\"number\">10</span>,</span><br><span class=\"line\">      C: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      month: <span class=\"string\">\"March\"</span>,</span><br><span class=\"line\">      A: <span class=\"number\">30</span>,</span><br><span class=\"line\">      B: <span class=\"number\">50</span>,</span><br><span class=\"line\">      C: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  labels: <span class=\"string\">\"month\"</span>,</span><br><span class=\"line\">  title: <span class=\"string\">\"Monthly Revenue\"</span>,</span><br><span class=\"line\">  roughness: <span class=\"number\">2</span>,</span><br><span class=\"line\">  colors: [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"#f996ae\"</span>, <span class=\"string\">\"skyblue\"</span>, <span class=\"string\">\"#9ff4df\"</span>],</span><br><span class=\"line\">  fillWeight: <span class=\"number\">0.35</span>,</span><br><span class=\"line\">  strokeWidth: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">  fillStyle: <span class=\"string\">\"cross-hatch\"</span>,</span><br><span class=\"line\">  stroke: <span class=\"string\">\"black\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在原本基础的图形表现上，还可以自定义图表显示样式，从而使图表更具独特风格。</p>\n<ul>\n<li>axisFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 坐标轴字体大小</li>\n<li>axisRoughness [number]: Roughness for x &amp; y axes. Default: 0.5. 坐标轴粗糙程度</li>\n<li>axisStrokeWidth [number]: Stroke-width for x &amp; y axes. Default: 0.5. 坐标轴线宽</li>\n<li>bowing [number]: Chart bowing. Default: 0. 弯曲程度</li>\n<li>color [string]: Color for each bar. Default: ‘skyblue’. 填色</li>\n<li>fillStyle [string]: Bar fill-style. Should be one of fillStyles shown above. 填充风格</li>\n<li>fillWeight [number]: Weight of inner paths’ color. Default: 0.5. 填充饱和度</li>\n<li>font: Font-family to use. You can use 0 or gaegu to use Gaegu, or 1 or indie flower to use Indie Flower. Or feed it something else. Default: Gaegu. 字体类型</li>\n<li>highlight [string]: Color for each bar on hover. Default: ‘coral’. 高亮</li>\n<li>innerStrokeWidth [number]: Stroke-width for paths inside bars. Default: 1. 内部绘线宽度</li>\n<li>interactive [boolean]: Whether or not chart is interactive. Default: true. 可交互性，鼠标 hover 操作等</li>\n<li>labelFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 标签字体大小</li>\n<li>margin [object]: Margin object. Default: {top: 50, right: 20, bottom: 70, left: 100} 外边距</li>\n<li>padding [number]: Padding between bars. Default: 0.1. 内边距</li>\n<li>roughness [number]: Roughness level of chart. Default: 1. 粗糙程度</li>\n<li>simplification [number]: Chart simplification. Default 0.2. 简化</li>\n<li>stroke [string]: Color of bars’ stroke. Default: black. 绘线颜色</li>\n<li>strokeWidth [number]: Size of bars’ stroke. Default: 1. 绘线宽度</li>\n<li>title [string]: Chart title. Optional. 图表标题</li>\n<li>titleFontSize [string]: Font-size for chart title. Default: ‘1rem’. 标题字体大小</li>\n<li>tooltipFontSize [string]: Font-size for tooltip. Default: ‘0.95rem’. 提示字体大小</li>\n<li>xLabel [string]: Label for x-axis. x 轴标签</li>\n<li>yLabel [string]: Label for y-axis. y 轴标签</li>\n<li>legend [boolean]: Whether or not to add legend. Default: ‘true’. 图例</li>\n<li>legendPosition [string]: Position of legend. Should be either ‘left’ or ‘right’. Default: ‘right’. 图例位置</li>\n<li>circle [boolean]: Whether or not to add circles to chart. Default: true. 圆形</li>\n<li>circleRadius [number]: Radius of circles. Default: 10. 圆型半径</li>\n<li>circleRoughness [number]: Roughness of circles. Default: 2. 圆形粗糙程度</li>\n</ul>\n<p>fillStyle<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png\" alt=\"\"></p>\n<p>roughness<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png\" alt=\"\"></p>\n<p>fillWeight<br><img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png\" alt=\"\"></p>\n<p>传送门 <a href=\"https://github.com/jwilber/roughViz\" target=\"_blank\" rel=\"noopener\">roughViz github</a></p>\n"},{"title":"Taro 多端开发","date":"2020-03-24T06:42:30.000Z","_content":"\n> 背景: 原先使用 Taro 开发了微信小程序, 现需要打包 App 应用.\n\n### 跨平台开发\n\n在编译时, 遇到不同的框架、组件、API 差异时, 可使用内置的环境变量来做一些特殊处理.\n\n- #### process.env.TARO_ENV\n\n  用于判断当前编译类型，目前有`weapp / swan / alipay / h5 / rn / tt / qq / quickapp`, 可在代码内进行类型区分.\n\n  ```js\n  if (process.env.TARO_ENV === \"weapp\") {\n    require(\"path/to/weapp/name\");\n  } else if (process.env.TARO_ENV === \"h5\") {\n    require(\"path/to/h5/name\");\n  }\n  ```\n\n- #### 样式文件中跨平台支持\n\n  ```css\n  /**指定平台保留样式：*/\n\n  /*  #ifdef  %PLATFORM%  */\n  样式代码\n  /*  #endif  */\n\n  /**指定平台剔除样式：*/\n\n  /*  #ifndef  %PLATFORM%  */\n  样式代码\n  /*  #endif  */\n\n  /**比如需要只在小程序内生效*/\n\n  /*  #ifdef weapp  */\n  样式代码\n  /*  #endif  */\n  ```\n\n- #### 多端文件\n\n  多端组件, 假如有一个 Test 组件存在微信小程序、百度小程序和 H5 三个不同版本，那么就可以像如下组织代码\n\n  test.js 文件，这是 Test 组件默认的形式，编译到微信小程序、百度小程序和 H5 三端之外的端使用的版本\n\n  test.h5.js 文件，这是 Test 组件的 H5 版本\n\n  test.weapp.js 文件，这是 Test 组件的 微信小程序 版本\n\n  test.swan.js 文件，这是 Test 组件的 百度小程序 版本\n\n  四个文件，对外暴露的是统一的接口，它们接受一致的参数，只是内部有针对各自平台的代码实现\n\n  而我们使用 Test 组件的时候，引用的方式依然和之前保持一致，import 的是不带端类型的文件名，在编译的时候会自动识别并添加端类型后缀.\n\n  ```jsx\n  import Test from \"../../components/test\";\n\n  <Test argA={1} argA={2} />;\n  ```\n\n  多端脚本, 例如微信小程序上使用 Taro.setNavigationBarTitle 来设置页面标题，H5 使用 document.title，那么可以封装一个 setTitle 方法来抹平两个平台的差异。\n\n  增加 set_title.h5.js，代码如下\n\n  ```js\n  export default function setTitle(title) {\n    document.title = title;\n  }\n  ```\n\n  增加 set_title.weapp.js，代码如下\n\n  ```js\n  import Taro from \"@tarojs/taro\";\n  export default function setTitle(title) {\n    Taro.setNavigationBarTitle({\n      title\n    });\n  }\n  ```\n\n  调用的时候，如下使用\n\n  ```js\n  import setTitle from \"../utils/set_title\";\n\n  setTitle(\"页面标题\");\n  ```\n\n### 多端同步调试\n\n从 1.3.5 版本开始，可以在 dist 目录下创建一个与编译的目标平台名同名的目录，例如编译到微信小程序，最终结果是在 dist/weapp 目录下，使各个平台使用独立的目录互不影响，从而达到多端同步调试的目的，在 config/index.js 配置如下：\n```js\noutputRoot: `dist/${process.env.TARO_ENV}`\n```\n\n### Windows编译开发\n\n- #### 编译\n\n  ```\n  # yarn\n  $ yarn dev:rn\n  # npm script\n  $ npm run dev:rn\n  # 仅限全局安装\n  $ taro build --type rn --watch\n  # npx 用户也可以使用\n  $ npx taro build --type rn --watch\n  ```\n\n  编译成功后的代码在根目录的`rn_temp`下, 其中关键文件及目录如下：\n\n    - index.js：React Native 入口文件\n    - app.json：React Native 应用的配置，从 config.rn.appJson 中获取\n\n- #### 打包\n\n  打开终端在项目根目录下运行: `react-native start`, 会在 8081 端口启动 Metro Bundler 负责打包 jsbundle.\n\n  在浏览器输入(http://127.0.0.1:8081)，可以看到如下页面：\n\n  ![](https://user-images.githubusercontent.com/9441951/55865494-13245d00-5bb1-11e9-9a97-8a785a83b584.png)\n\n  之后打开(http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&dev=true) 会触发对应终端平台的 js bundle 构建.\n  \n  ![](https://user-images.githubusercontent.com/9441951/55865039-37336e80-5bb0-11e9-8aca-c121be4542f6.png)\n\n- #### 启动应用\n\n  clone Taro提供的React Native iOS/Android 空应用的壳子, 然后在该项目内安装依赖, 使用react-native命令启动\n\n  ```bash\n  git clone git@github.com:NervJS/taro-native-shell.git\n  ```\n\n  Android启动(保证AVD处于开启状态):\n  \n  ```\n  react-native run-android\n  ```","source":"_posts/taro-mult-dev.md","raw":"---\ntitle: Taro 多端开发\ndate: 2020-03-24 14:42:30\ntags:\n  - \"taro\"\n  - \"微信小程序\"\n  - \"React Native\"\ncategories:\n  - \"taro\"\n---\n\n> 背景: 原先使用 Taro 开发了微信小程序, 现需要打包 App 应用.\n\n### 跨平台开发\n\n在编译时, 遇到不同的框架、组件、API 差异时, 可使用内置的环境变量来做一些特殊处理.\n\n- #### process.env.TARO_ENV\n\n  用于判断当前编译类型，目前有`weapp / swan / alipay / h5 / rn / tt / qq / quickapp`, 可在代码内进行类型区分.\n\n  ```js\n  if (process.env.TARO_ENV === \"weapp\") {\n    require(\"path/to/weapp/name\");\n  } else if (process.env.TARO_ENV === \"h5\") {\n    require(\"path/to/h5/name\");\n  }\n  ```\n\n- #### 样式文件中跨平台支持\n\n  ```css\n  /**指定平台保留样式：*/\n\n  /*  #ifdef  %PLATFORM%  */\n  样式代码\n  /*  #endif  */\n\n  /**指定平台剔除样式：*/\n\n  /*  #ifndef  %PLATFORM%  */\n  样式代码\n  /*  #endif  */\n\n  /**比如需要只在小程序内生效*/\n\n  /*  #ifdef weapp  */\n  样式代码\n  /*  #endif  */\n  ```\n\n- #### 多端文件\n\n  多端组件, 假如有一个 Test 组件存在微信小程序、百度小程序和 H5 三个不同版本，那么就可以像如下组织代码\n\n  test.js 文件，这是 Test 组件默认的形式，编译到微信小程序、百度小程序和 H5 三端之外的端使用的版本\n\n  test.h5.js 文件，这是 Test 组件的 H5 版本\n\n  test.weapp.js 文件，这是 Test 组件的 微信小程序 版本\n\n  test.swan.js 文件，这是 Test 组件的 百度小程序 版本\n\n  四个文件，对外暴露的是统一的接口，它们接受一致的参数，只是内部有针对各自平台的代码实现\n\n  而我们使用 Test 组件的时候，引用的方式依然和之前保持一致，import 的是不带端类型的文件名，在编译的时候会自动识别并添加端类型后缀.\n\n  ```jsx\n  import Test from \"../../components/test\";\n\n  <Test argA={1} argA={2} />;\n  ```\n\n  多端脚本, 例如微信小程序上使用 Taro.setNavigationBarTitle 来设置页面标题，H5 使用 document.title，那么可以封装一个 setTitle 方法来抹平两个平台的差异。\n\n  增加 set_title.h5.js，代码如下\n\n  ```js\n  export default function setTitle(title) {\n    document.title = title;\n  }\n  ```\n\n  增加 set_title.weapp.js，代码如下\n\n  ```js\n  import Taro from \"@tarojs/taro\";\n  export default function setTitle(title) {\n    Taro.setNavigationBarTitle({\n      title\n    });\n  }\n  ```\n\n  调用的时候，如下使用\n\n  ```js\n  import setTitle from \"../utils/set_title\";\n\n  setTitle(\"页面标题\");\n  ```\n\n### 多端同步调试\n\n从 1.3.5 版本开始，可以在 dist 目录下创建一个与编译的目标平台名同名的目录，例如编译到微信小程序，最终结果是在 dist/weapp 目录下，使各个平台使用独立的目录互不影响，从而达到多端同步调试的目的，在 config/index.js 配置如下：\n```js\noutputRoot: `dist/${process.env.TARO_ENV}`\n```\n\n### Windows编译开发\n\n- #### 编译\n\n  ```\n  # yarn\n  $ yarn dev:rn\n  # npm script\n  $ npm run dev:rn\n  # 仅限全局安装\n  $ taro build --type rn --watch\n  # npx 用户也可以使用\n  $ npx taro build --type rn --watch\n  ```\n\n  编译成功后的代码在根目录的`rn_temp`下, 其中关键文件及目录如下：\n\n    - index.js：React Native 入口文件\n    - app.json：React Native 应用的配置，从 config.rn.appJson 中获取\n\n- #### 打包\n\n  打开终端在项目根目录下运行: `react-native start`, 会在 8081 端口启动 Metro Bundler 负责打包 jsbundle.\n\n  在浏览器输入(http://127.0.0.1:8081)，可以看到如下页面：\n\n  ![](https://user-images.githubusercontent.com/9441951/55865494-13245d00-5bb1-11e9-9a97-8a785a83b584.png)\n\n  之后打开(http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&dev=true) 会触发对应终端平台的 js bundle 构建.\n  \n  ![](https://user-images.githubusercontent.com/9441951/55865039-37336e80-5bb0-11e9-8aca-c121be4542f6.png)\n\n- #### 启动应用\n\n  clone Taro提供的React Native iOS/Android 空应用的壳子, 然后在该项目内安装依赖, 使用react-native命令启动\n\n  ```bash\n  git clone git@github.com:NervJS/taro-native-shell.git\n  ```\n\n  Android启动(保证AVD处于开启状态):\n  \n  ```\n  react-native run-android\n  ```","slug":"taro-mult-dev","published":1,"updated":"2020-04-21T08:53:30.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrpa000ye36ksolz5ibo","content":"<blockquote>\n<p>背景: 原先使用 Taro 开发了微信小程序, 现需要打包 App 应用.</p>\n</blockquote>\n<h3 id=\"跨平台开发\"><a href=\"#跨平台开发\" class=\"headerlink\" title=\"跨平台开发\"></a>跨平台开发</h3><p>在编译时, 遇到不同的框架、组件、API 差异时, 可使用内置的环境变量来做一些特殊处理.</p>\n<ul>\n<li><h4 id=\"process-env-TARO-ENV\"><a href=\"#process-env-TARO-ENV\" class=\"headerlink\" title=\"process.env.TARO_ENV\"></a>process.env.TARO_ENV</h4><p>用于判断当前编译类型，目前有<code>weapp / swan / alipay / h5 / rn / tt / qq / quickapp</code>, 可在代码内进行类型区分.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (process.env.TARO_ENV === <span class=\"string\">\"weapp\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path/to/weapp/name\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.TARO_ENV === <span class=\"string\">\"h5\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path/to/h5/name\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"样式文件中跨平台支持\"><a href=\"#样式文件中跨平台支持\" class=\"headerlink\" title=\"样式文件中跨平台支持\"></a>样式文件中跨平台支持</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**指定平台保留样式：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifdef  %PLATFORM%  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**指定平台剔除样式：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifndef  %PLATFORM%  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**比如需要只在小程序内生效*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifdef weapp  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"多端文件\"><a href=\"#多端文件\" class=\"headerlink\" title=\"多端文件\"></a>多端文件</h4><p>多端组件, 假如有一个 Test 组件存在微信小程序、百度小程序和 H5 三个不同版本，那么就可以像如下组织代码</p>\n<p>test.js 文件，这是 Test 组件默认的形式，编译到微信小程序、百度小程序和 H5 三端之外的端使用的版本</p>\n<p>test.h5.js 文件，这是 Test 组件的 H5 版本</p>\n<p>test.weapp.js 文件，这是 Test 组件的 微信小程序 版本</p>\n<p>test.swan.js 文件，这是 Test 组件的 百度小程序 版本</p>\n<p>四个文件，对外暴露的是统一的接口，它们接受一致的参数，只是内部有针对各自平台的代码实现</p>\n<p>而我们使用 Test 组件的时候，引用的方式依然和之前保持一致，import 的是不带端类型的文件名，在编译的时候会自动识别并添加端类型后缀.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Test argA=&#123;<span class=\"number\">1</span>&#125; argA=&#123;<span class=\"number\">2</span>&#125; /&gt;;</span><br></pre></td></tr></table></figure>\n<p>多端脚本, 例如微信小程序上使用 Taro.setNavigationBarTitle 来设置页面标题，H5 使用 document.title，那么可以封装一个 setTitle 方法来抹平两个平台的差异。</p>\n<p>增加 set_title.h5.js，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.title = title;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>增加 set_title.weapp.js，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Taro <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/taro\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">  Taro.setNavigationBarTitle(&#123;</span><br><span class=\"line\">    title</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用的时候，如下使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> setTitle <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/set_title\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">setTitle(<span class=\"string\">\"页面标题\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"多端同步调试\"><a href=\"#多端同步调试\" class=\"headerlink\" title=\"多端同步调试\"></a>多端同步调试</h3><p>从 1.3.5 版本开始，可以在 dist 目录下创建一个与编译的目标平台名同名的目录，例如编译到微信小程序，最终结果是在 dist/weapp 目录下，使各个平台使用独立的目录互不影响，从而达到多端同步调试的目的，在 config/index.js 配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputRoot: <span class=\"string\">`dist/<span class=\"subst\">$&#123;process.env.TARO_ENV&#125;</span>`</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Windows编译开发\"><a href=\"#Windows编译开发\" class=\"headerlink\" title=\"Windows编译开发\"></a>Windows编译开发</h3><ul>\n<li><h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yarn</span><br><span class=\"line\">$ yarn dev:rn</span><br><span class=\"line\"># npm script</span><br><span class=\"line\">$ npm run dev:rn</span><br><span class=\"line\"># 仅限全局安装</span><br><span class=\"line\">$ taro build --type rn --watch</span><br><span class=\"line\"># npx 用户也可以使用</span><br><span class=\"line\">$ npx taro build --type rn --watch</span><br></pre></td></tr></table></figure>\n<p>编译成功后的代码在根目录的<code>rn_temp</code>下, 其中关键文件及目录如下：</p>\n<ul>\n<li>index.js：React Native 入口文件</li>\n<li>app.json：React Native 应用的配置，从 config.rn.appJson 中获取</li>\n</ul>\n</li>\n<li><h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>打开终端在项目根目录下运行: <code>react-native start</code>, 会在 8081 端口启动 Metro Bundler 负责打包 jsbundle.</p>\n<p>在浏览器输入(<a href=\"http://127.0.0.1:8081)，可以看到如下页面：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081)，可以看到如下页面：</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/9441951/55865494-13245d00-5bb1-11e9-9a97-8a785a83b584.png\" alt=\"\"></p>\n<p>之后打开(<a href=\"http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true</a>) 会触发对应终端平台的 js bundle 构建.</p>\n<p><img src=\"https://user-images.githubusercontent.com/9441951/55865039-37336e80-5bb0-11e9-8aca-c121be4542f6.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"启动应用\"><a href=\"#启动应用\" class=\"headerlink\" title=\"启动应用\"></a>启动应用</h4><p>clone Taro提供的React Native iOS/Android 空应用的壳子, 然后在该项目内安装依赖, 使用react-native命令启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:NervJS/taro-native-shell.git</span><br></pre></td></tr></table></figure>\n<p>Android启动(保证AVD处于开启状态):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native run-android</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>背景: 原先使用 Taro 开发了微信小程序, 现需要打包 App 应用.</p>\n</blockquote>\n<h3 id=\"跨平台开发\"><a href=\"#跨平台开发\" class=\"headerlink\" title=\"跨平台开发\"></a>跨平台开发</h3><p>在编译时, 遇到不同的框架、组件、API 差异时, 可使用内置的环境变量来做一些特殊处理.</p>\n<ul>\n<li><h4 id=\"process-env-TARO-ENV\"><a href=\"#process-env-TARO-ENV\" class=\"headerlink\" title=\"process.env.TARO_ENV\"></a>process.env.TARO_ENV</h4><p>用于判断当前编译类型，目前有<code>weapp / swan / alipay / h5 / rn / tt / qq / quickapp</code>, 可在代码内进行类型区分.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (process.env.TARO_ENV === <span class=\"string\">\"weapp\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path/to/weapp/name\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.TARO_ENV === <span class=\"string\">\"h5\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path/to/h5/name\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"样式文件中跨平台支持\"><a href=\"#样式文件中跨平台支持\" class=\"headerlink\" title=\"样式文件中跨平台支持\"></a>样式文件中跨平台支持</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**指定平台保留样式：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifdef  %PLATFORM%  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**指定平台剔除样式：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifndef  %PLATFORM%  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**比如需要只在小程序内生效*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  #ifdef weapp  */</span></span><br><span class=\"line\">样式代码</span><br><span class=\"line\"><span class=\"comment\">/*  #endif  */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"多端文件\"><a href=\"#多端文件\" class=\"headerlink\" title=\"多端文件\"></a>多端文件</h4><p>多端组件, 假如有一个 Test 组件存在微信小程序、百度小程序和 H5 三个不同版本，那么就可以像如下组织代码</p>\n<p>test.js 文件，这是 Test 组件默认的形式，编译到微信小程序、百度小程序和 H5 三端之外的端使用的版本</p>\n<p>test.h5.js 文件，这是 Test 组件的 H5 版本</p>\n<p>test.weapp.js 文件，这是 Test 组件的 微信小程序 版本</p>\n<p>test.swan.js 文件，这是 Test 组件的 百度小程序 版本</p>\n<p>四个文件，对外暴露的是统一的接口，它们接受一致的参数，只是内部有针对各自平台的代码实现</p>\n<p>而我们使用 Test 组件的时候，引用的方式依然和之前保持一致，import 的是不带端类型的文件名，在编译的时候会自动识别并添加端类型后缀.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Test argA=&#123;<span class=\"number\">1</span>&#125; argA=&#123;<span class=\"number\">2</span>&#125; /&gt;;</span><br></pre></td></tr></table></figure>\n<p>多端脚本, 例如微信小程序上使用 Taro.setNavigationBarTitle 来设置页面标题，H5 使用 document.title，那么可以封装一个 setTitle 方法来抹平两个平台的差异。</p>\n<p>增加 set_title.h5.js，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.title = title;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>增加 set_title.weapp.js，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Taro <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/taro\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">  Taro.setNavigationBarTitle(&#123;</span><br><span class=\"line\">    title</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用的时候，如下使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> setTitle <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/set_title\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">setTitle(<span class=\"string\">\"页面标题\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"多端同步调试\"><a href=\"#多端同步调试\" class=\"headerlink\" title=\"多端同步调试\"></a>多端同步调试</h3><p>从 1.3.5 版本开始，可以在 dist 目录下创建一个与编译的目标平台名同名的目录，例如编译到微信小程序，最终结果是在 dist/weapp 目录下，使各个平台使用独立的目录互不影响，从而达到多端同步调试的目的，在 config/index.js 配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputRoot: <span class=\"string\">`dist/<span class=\"subst\">$&#123;process.env.TARO_ENV&#125;</span>`</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Windows编译开发\"><a href=\"#Windows编译开发\" class=\"headerlink\" title=\"Windows编译开发\"></a>Windows编译开发</h3><ul>\n<li><h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yarn</span><br><span class=\"line\">$ yarn dev:rn</span><br><span class=\"line\"># npm script</span><br><span class=\"line\">$ npm run dev:rn</span><br><span class=\"line\"># 仅限全局安装</span><br><span class=\"line\">$ taro build --type rn --watch</span><br><span class=\"line\"># npx 用户也可以使用</span><br><span class=\"line\">$ npx taro build --type rn --watch</span><br></pre></td></tr></table></figure>\n<p>编译成功后的代码在根目录的<code>rn_temp</code>下, 其中关键文件及目录如下：</p>\n<ul>\n<li>index.js：React Native 入口文件</li>\n<li>app.json：React Native 应用的配置，从 config.rn.appJson 中获取</li>\n</ul>\n</li>\n<li><h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>打开终端在项目根目录下运行: <code>react-native start</code>, 会在 8081 端口启动 Metro Bundler 负责打包 jsbundle.</p>\n<p>在浏览器输入(<a href=\"http://127.0.0.1:8081)，可以看到如下页面：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081)，可以看到如下页面：</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/9441951/55865494-13245d00-5bb1-11e9-9a97-8a785a83b584.png\" alt=\"\"></p>\n<p>之后打开(<a href=\"http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true</a>) 会触发对应终端平台的 js bundle 构建.</p>\n<p><img src=\"https://user-images.githubusercontent.com/9441951/55865039-37336e80-5bb0-11e9-8aca-c121be4542f6.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"启动应用\"><a href=\"#启动应用\" class=\"headerlink\" title=\"启动应用\"></a>启动应用</h4><p>clone Taro提供的React Native iOS/Android 空应用的壳子, 然后在该项目内安装依赖, 使用react-native命令启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:NervJS/taro-native-shell.git</span><br></pre></td></tr></table></figure>\n<p>Android启动(保证AVD处于开启状态):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native run-android</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"vue source code 1.0","date":"2019-01-22T07:00:23.000Z","_content":"\n- 前置准备\n![](https://upload-images.jianshu.io/upload_images/14447586-b4092d45e1f254ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp)\n    - Flow基本语法\n    对类型的限制，检测。\n    ```\n    function sum(a: number, b:number) {\n        return a + b;\n    }\n    ```\n    ```\n    // vue源码内的一个函数\n    export function renderList (\n        val: any, // any表示传入的类型可以是任何类型\n        render: (\n            val: any,\n            keyOrIndex: string | number, // 表示需要是字符串或者数字\n            index?: number // ?代表index可以不传，但是传的话一定要传入数字类型；\n                           // 如果问号是在冒号后面，则这个参数必须要传，但可以是数字类型也可以是空\n        ) => VNode\n    ): ?Array<VNode>{\n        ...\n    }\n    ```\n\n    - 原型和原型继承\n    Vue代码中是使用原型继承的方式实现父子组件共享初始化代码的。\n    ```\n    function Student(props) {\n        this.name = props.name || 'Unnamed';\n    }\n\n    Student.prototype.hello = function () {\n        alert('Hello, ' + this.name + '!');\n    }\n\n    // 基于Student拓展出PrimaryStudent\n    function PrimaryStudent(props) {\n        // 调用Student构造函数，绑定this变量:\n        Student.call(this, props);\n        this.grade = props.grade || 1;\n    }\n    ```\n    此时PrimaryStudent并没有继承Student，其原型链还是：\n    ```\n    new PrimaryStudent() ----> PrimaryStudent.prototype ----> Object.prototype ----> null\n    ```\n    若是继承则原型链：\n    ```\n    new PrimaryStudent() ----> PrimaryStudent.prototype ----> Student.prototype ----> Object.prototype ----> null\n    ```\n    此时需要一个中间对象来实现，将中间对象的原型要指向`Student.prototype`，不能直接`PrimaryStudent.prototype = Student.prototype;`。\n    ```\n    // 空函数F:\n    function F() {}\n\n    // 把F的原型指向Student.prototype:\n    F.prototype = Student.prototype;\n\n    // 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:\n    PrimaryStudent.prototype = new F();\n\n    // 把PrimaryStudent原型的构造函数修复为PrimaryStudent:\n    PrimaryStudent.prototype.constructor = PrimaryStudent;\n\n    // 在PrimaryStudent原型（就是new F()对象）上定义方法：\n    PrimaryStudent.prototype.getGrade = function () {\n        return this.grade;\n    };\n\n    var Lilei = new PrimaryStudent({\n        name: '李雷',\n        grade: 2\n    });\n    // 验证原型:\n    Lilei.__proto__ === PrimaryStudent.prototype; // true\n    Lilei.__proto__.__proto__ === Student.prototype; // true\n\n    // 验证继承关系:\n    Lilei instanceof PrimaryStudent; // true\n    Lilei instanceof Student; // true\n    ```\n    原来的原型链：\n    ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l)\n    新的原型链：\n    ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l)\n\n    封装这个继承过程：\n    ```\n    function inherits(Child, Parent) {\n        var F = function () {};\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.prototype.constructor = Child;\n    }\n    ```\n    最后JavaScript的原型继承实现方式就是：\n        定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；\n        借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；\n        继续在新的构造函数的原型上定义新方法。\n    参考（还需要深入研究）：\n    [廖雪峰js教程](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n    [继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n    - Object.defineProperty\n    使用它实现响应式数据功能（数据绑定）。\n    ```\n    // vue 内定义响应式数据\n    export function defineReactive (\n        obj: Object,\n        key: string,\n        val: any,\n        customSetter?: ?Function,\n        shallow?: boolean\n    ) {\n        .....\n        Object.defineProperty(obj, key, {\n            enumerable: true, // 是否可以遍历该key\n            configurable: true, // 是否可以删除该key或者重新配置该key\n            get: function reactiveGetter () {\n                const value = getter ? getter.call(obj) : val\n                if (Dep.target) {\n                    dep.depend()\n                    if (childOb) {\n                        childOb.dep.depend()\n                        if (Array.isArray(value)) {\n                            dependArray(value)\n                        }\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter (newVal) {\n                const value = getter ? getter.call(obj) : val\n                /* eslint-disable no-self-compare */\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                /* eslint-enable no-self-compare */\n                if (process.env.NODE_ENV !== 'production' && customSetter) {\n                    customSetter()\n                }\n                if (setter) {\n                    setter.call(obj, newVal)\n                } else {\n                    val = newVal\n                }\n                childOb = !shallow && observe(newVal)\n                dep.notify()\n            }\n        })\n    }\n    ```\n    `Object.defineProperty`这个函数有三个参数，第一个参数即为需要设置的对象，第二个参数为要设置的键值，第三个参数是一个配置对象，里面可以有：\n    value: 对应key的值\n    configurable：是否可以删除该key或者重新配置该key\n    enumerable：是否可以遍历该key\n    writable：是否可以修改该key\n    get: 获取该key值时调用的函数\n    set: 设置该key值时调用的函数\n\n    ```\n    let x = {}\n    x['name'] = 'vue'\n    console.log(Object.getOwnPropertyDescriptor(x,'name'))\n    // Object.getOwnPropertyDescriptor可以获取对象某个key的描述对象\n    /*\n     * {\n     *  value: \"vue\",\n     *  writable: true, \n     *  enumerable: true, \n     *  configurable: true\n     *  }\n    */\n    ```\n    此时对其进行操作：\n    ```\n    Object.defineProperty(x, 'name', {\n      configurable: false\n    })\n    // 结果\n    delete x[\"name\"]; // false\n\n    Object.defineProperty(x, 0, {\n        enumerable: false\n    })\n    // 不能使用for等循环对x进行遍历\n    ```\n    在vue的Observer类中有下面一行代码：\n    ```\n    def(value, '__ob__', this);\n    ```\n    这里def是个工具函数，目的是想给value添加一个key为__ob__，值为this，程序下面要遍历value对其子内容进行递归设置，如果直接用value.__ob__这种方式，在遍历时又会取到造成，这显然不是本意，所以def函数是利用Object.defineProperty给value添加的属性，同时enumerable设置为false。\n    `set`和`get`类似于在获取对象值和设置对象值时加了一个代理。\n    ```\n    Object.defineProperty(x, 'name', {\n        get: function(){\n           console.log(\"getter called!\")\n        },\n        set: function(newVal){\n            console.log(\"setter called! newVal is:\" + newVal)\n        }\n    })\n    ```\n    所以在访问x['name']时回打印getter called，在设置x['name'] = 'httishere'时会打印setter called! newVal is:httishere，正是通过这种方式实现了访问属性时收集依赖，设置属性时源码有一句dep.notify，里面便是通知视图更新的相关操作。\n\n    - Vnode\n    virtual node，虚拟节点，原生dom节点对象非常大，若直接操作dom，性能代价会比较大。\n    ```\n    // vue 内对vnode的定义\n    export default class VNode {\n        tag: string | void;\n        data: VNodeData | void;\n        children: ?Array<VNode>;\n        text: string | void;\n        elm: Node | void;\n        ns: string | void;\n        context: Component | void; // rendered in this component's scope\n        key: string | number | void;\n        componentOptions: VNodeComponentOptions | void;\n        componentInstance: Component | void; // component instance\n        parent: VNode | void; // component placeholder node\n\n        // strictly internal\n        raw: boolean; // contains raw HTML? (server only)\n        isStatic: boolean; // hoisted static node\n        isRootInsert: boolean; // necessary for enter transition check\n        isComment: boolean; // empty comment placeholder?\n        isCloned: boolean; // is a cloned node?\n        isOnce: boolean; // is a v-once node?\n        asyncFactory: Function | void; // async component factory function\n        asyncMeta: Object | void;\n        isAsyncPlaceholder: boolean;\n        ssrContext: Object | void;\n        fnContext: Component | void; // real context vm for functional nodes\n        fnOptions: ?ComponentOptions; // for SSR caching\n        fnScopeId: ?string;\n        ....\n    }\n    ```\n    发生修改时，从全局看问题的方式就是异步，先把修改放到队列中，然后整成一批去修改，做diff：\n    ```\n    queueWatcher(this);\n    ```\n\n    - 函数柯里化\n    将多参数的函数化作多个部分函数去调用。\n    ```\n    // 例子 一个需要两个参数的函数\n    function getSum(a,b){\n        return a+b;\n    }\n    // 有时候可能参数的获得是异步的，其他参数会在另一个时间点再传入\n    function getSum(a){\n        return function(b){\n            return a+b;\n        }\n    }\n    let f = getSum(2)\n    console.log(f(3))\n    console.log(getSum(2)(3)) // 5\n    ```\n    这样参数就可以在不同的时间点传入，Vue源码中有一个platform目录，专门存放和平台相关的源码，对函数进行柯里化就可以不用每次运行就进行平台判断。\n    ```\n    function ...(平台相关参数){\n        return function(平台不相关参数){\n          处理逻辑\n        }\n    }\n    ```\n    在Vue的patch以及编译环节都应用了这种方式。\n\n    - Macrotask与Microtask\n    与js的事件循环机制息息相关，Vue更新不是数据一改马上同步更新视图，而是将更改都放入到队列中，同一个watcher不会重复，然后异步处理更新逻辑。在实现异步的方式时，js实际提供了两种task--Macrotask与Microtask。\n    ```\n    console.log('script start');\n    setTimeout(function() {\n        console.log('setTimeout');\n        Promise.resolve().then(function() {\n            console.log('promise3');\n        }).then(function() {\n            console.log('promise4');\n        });\n    }, 0);\n    Promise.resolve().then(function() {\n        console.log('promise1');\n    }).then(function() {\n        console.log('promise2');\n    });\n    console.log('script end');\n    // 结果\n    script start\n    script end\n    promise1\n    promise2\n    setTimeout\n    promise3\n    promise4\n    ```\n    js事件循环中有两个队列，一个叫MacroTask，一个MircroTask，大任务队列（MacroTask）跑大任务，比如主流程程序、事件处理函数、setTimeout等等，小任务队列（MircroTask）跑小任务，比如Promise，js总是先从大任务队列拿一个执行，然后再把所有小任务队列全部执行再循环往复。\n    上述代码整体的代码段就是一个大任务在执行，执行完毕再执行同级所有小任务，执行完之后再取一个大任务执行，此时就是取setTimeout，之后再是这里面的小任务。\n    重点是**上面程序本身也是一个大任务**，\n    [Macrotask Vs Microtask](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n    [理解js中Macrotask和Microtask](https://juejin.im/entry/58d4df3b5c497d0057eb99ff)\n    [阮一峰 Eventloop理解](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\n    - 递归编程算法\n    Vue源码中大量使用了递归算法--比如dom diff算法、ast的优化、目标代码的生成等等。\n    ```\n    // 经典dom diff算法\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    ```\n    主要是用于比较新旧Vnode节点然后更新子节点，调用者是patchVnode函数，我们发现这部分函数中又会调用会patchVnode，调用链条为:patchVnode->updateChildren->patchVnode。同时，即便没有直接应用递归，在将模板编译成AST（抽象语法树）的过程中，其使用了栈去模拟了递归的思想，由此可见递归算法的重要性。不管是真实dom还是vnode，其实本质都是树状结构，本来就是递归定义的东西。\n\n    - 编译原理基础知识\n    ```\n    // vue内\n    const ast = parse(template.trim(), options)\n    if (options.optimize !== false) {\n        optimize(ast, options)\n    }\n    const code = generate(ast, options)\n    return {\n        ast,\n        render: code.render,\n        staticRenderFns: code.staticRenderFns\n    }\n    ```\n    首先通过parse函数将template编译为抽象语法树ast，然后对ast进行代码优化，最后生成render函数。就是将模板html编译为render函数。\n    AST（抽象语法树），就是一种表现大家共同点的结构，得到ast是翻译的基础。\n\n参考文章：[Vue源码解析准备篇 from 海洋之木](https://www.jianshu.com/p/c914ccd498e7)","source":"_posts/vue1.0.md","raw":"---\ntitle: vue source code 1.0\ndate: 2019-01-22 15:00:23 +0800\ntags: \n    - '从入门到放弃'\ncategories: vue\n---\n\n- 前置准备\n![](https://upload-images.jianshu.io/upload_images/14447586-b4092d45e1f254ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp)\n    - Flow基本语法\n    对类型的限制，检测。\n    ```\n    function sum(a: number, b:number) {\n        return a + b;\n    }\n    ```\n    ```\n    // vue源码内的一个函数\n    export function renderList (\n        val: any, // any表示传入的类型可以是任何类型\n        render: (\n            val: any,\n            keyOrIndex: string | number, // 表示需要是字符串或者数字\n            index?: number // ?代表index可以不传，但是传的话一定要传入数字类型；\n                           // 如果问号是在冒号后面，则这个参数必须要传，但可以是数字类型也可以是空\n        ) => VNode\n    ): ?Array<VNode>{\n        ...\n    }\n    ```\n\n    - 原型和原型继承\n    Vue代码中是使用原型继承的方式实现父子组件共享初始化代码的。\n    ```\n    function Student(props) {\n        this.name = props.name || 'Unnamed';\n    }\n\n    Student.prototype.hello = function () {\n        alert('Hello, ' + this.name + '!');\n    }\n\n    // 基于Student拓展出PrimaryStudent\n    function PrimaryStudent(props) {\n        // 调用Student构造函数，绑定this变量:\n        Student.call(this, props);\n        this.grade = props.grade || 1;\n    }\n    ```\n    此时PrimaryStudent并没有继承Student，其原型链还是：\n    ```\n    new PrimaryStudent() ----> PrimaryStudent.prototype ----> Object.prototype ----> null\n    ```\n    若是继承则原型链：\n    ```\n    new PrimaryStudent() ----> PrimaryStudent.prototype ----> Student.prototype ----> Object.prototype ----> null\n    ```\n    此时需要一个中间对象来实现，将中间对象的原型要指向`Student.prototype`，不能直接`PrimaryStudent.prototype = Student.prototype;`。\n    ```\n    // 空函数F:\n    function F() {}\n\n    // 把F的原型指向Student.prototype:\n    F.prototype = Student.prototype;\n\n    // 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:\n    PrimaryStudent.prototype = new F();\n\n    // 把PrimaryStudent原型的构造函数修复为PrimaryStudent:\n    PrimaryStudent.prototype.constructor = PrimaryStudent;\n\n    // 在PrimaryStudent原型（就是new F()对象）上定义方法：\n    PrimaryStudent.prototype.getGrade = function () {\n        return this.grade;\n    };\n\n    var Lilei = new PrimaryStudent({\n        name: '李雷',\n        grade: 2\n    });\n    // 验证原型:\n    Lilei.__proto__ === PrimaryStudent.prototype; // true\n    Lilei.__proto__.__proto__ === Student.prototype; // true\n\n    // 验证继承关系:\n    Lilei instanceof PrimaryStudent; // true\n    Lilei instanceof Student; // true\n    ```\n    原来的原型链：\n    ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l)\n    新的原型链：\n    ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l)\n\n    封装这个继承过程：\n    ```\n    function inherits(Child, Parent) {\n        var F = function () {};\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.prototype.constructor = Child;\n    }\n    ```\n    最后JavaScript的原型继承实现方式就是：\n        定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；\n        借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；\n        继续在新的构造函数的原型上定义新方法。\n    参考（还需要深入研究）：\n    [廖雪峰js教程](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n    [继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n    - Object.defineProperty\n    使用它实现响应式数据功能（数据绑定）。\n    ```\n    // vue 内定义响应式数据\n    export function defineReactive (\n        obj: Object,\n        key: string,\n        val: any,\n        customSetter?: ?Function,\n        shallow?: boolean\n    ) {\n        .....\n        Object.defineProperty(obj, key, {\n            enumerable: true, // 是否可以遍历该key\n            configurable: true, // 是否可以删除该key或者重新配置该key\n            get: function reactiveGetter () {\n                const value = getter ? getter.call(obj) : val\n                if (Dep.target) {\n                    dep.depend()\n                    if (childOb) {\n                        childOb.dep.depend()\n                        if (Array.isArray(value)) {\n                            dependArray(value)\n                        }\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter (newVal) {\n                const value = getter ? getter.call(obj) : val\n                /* eslint-disable no-self-compare */\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                /* eslint-enable no-self-compare */\n                if (process.env.NODE_ENV !== 'production' && customSetter) {\n                    customSetter()\n                }\n                if (setter) {\n                    setter.call(obj, newVal)\n                } else {\n                    val = newVal\n                }\n                childOb = !shallow && observe(newVal)\n                dep.notify()\n            }\n        })\n    }\n    ```\n    `Object.defineProperty`这个函数有三个参数，第一个参数即为需要设置的对象，第二个参数为要设置的键值，第三个参数是一个配置对象，里面可以有：\n    value: 对应key的值\n    configurable：是否可以删除该key或者重新配置该key\n    enumerable：是否可以遍历该key\n    writable：是否可以修改该key\n    get: 获取该key值时调用的函数\n    set: 设置该key值时调用的函数\n\n    ```\n    let x = {}\n    x['name'] = 'vue'\n    console.log(Object.getOwnPropertyDescriptor(x,'name'))\n    // Object.getOwnPropertyDescriptor可以获取对象某个key的描述对象\n    /*\n     * {\n     *  value: \"vue\",\n     *  writable: true, \n     *  enumerable: true, \n     *  configurable: true\n     *  }\n    */\n    ```\n    此时对其进行操作：\n    ```\n    Object.defineProperty(x, 'name', {\n      configurable: false\n    })\n    // 结果\n    delete x[\"name\"]; // false\n\n    Object.defineProperty(x, 0, {\n        enumerable: false\n    })\n    // 不能使用for等循环对x进行遍历\n    ```\n    在vue的Observer类中有下面一行代码：\n    ```\n    def(value, '__ob__', this);\n    ```\n    这里def是个工具函数，目的是想给value添加一个key为__ob__，值为this，程序下面要遍历value对其子内容进行递归设置，如果直接用value.__ob__这种方式，在遍历时又会取到造成，这显然不是本意，所以def函数是利用Object.defineProperty给value添加的属性，同时enumerable设置为false。\n    `set`和`get`类似于在获取对象值和设置对象值时加了一个代理。\n    ```\n    Object.defineProperty(x, 'name', {\n        get: function(){\n           console.log(\"getter called!\")\n        },\n        set: function(newVal){\n            console.log(\"setter called! newVal is:\" + newVal)\n        }\n    })\n    ```\n    所以在访问x['name']时回打印getter called，在设置x['name'] = 'httishere'时会打印setter called! newVal is:httishere，正是通过这种方式实现了访问属性时收集依赖，设置属性时源码有一句dep.notify，里面便是通知视图更新的相关操作。\n\n    - Vnode\n    virtual node，虚拟节点，原生dom节点对象非常大，若直接操作dom，性能代价会比较大。\n    ```\n    // vue 内对vnode的定义\n    export default class VNode {\n        tag: string | void;\n        data: VNodeData | void;\n        children: ?Array<VNode>;\n        text: string | void;\n        elm: Node | void;\n        ns: string | void;\n        context: Component | void; // rendered in this component's scope\n        key: string | number | void;\n        componentOptions: VNodeComponentOptions | void;\n        componentInstance: Component | void; // component instance\n        parent: VNode | void; // component placeholder node\n\n        // strictly internal\n        raw: boolean; // contains raw HTML? (server only)\n        isStatic: boolean; // hoisted static node\n        isRootInsert: boolean; // necessary for enter transition check\n        isComment: boolean; // empty comment placeholder?\n        isCloned: boolean; // is a cloned node?\n        isOnce: boolean; // is a v-once node?\n        asyncFactory: Function | void; // async component factory function\n        asyncMeta: Object | void;\n        isAsyncPlaceholder: boolean;\n        ssrContext: Object | void;\n        fnContext: Component | void; // real context vm for functional nodes\n        fnOptions: ?ComponentOptions; // for SSR caching\n        fnScopeId: ?string;\n        ....\n    }\n    ```\n    发生修改时，从全局看问题的方式就是异步，先把修改放到队列中，然后整成一批去修改，做diff：\n    ```\n    queueWatcher(this);\n    ```\n\n    - 函数柯里化\n    将多参数的函数化作多个部分函数去调用。\n    ```\n    // 例子 一个需要两个参数的函数\n    function getSum(a,b){\n        return a+b;\n    }\n    // 有时候可能参数的获得是异步的，其他参数会在另一个时间点再传入\n    function getSum(a){\n        return function(b){\n            return a+b;\n        }\n    }\n    let f = getSum(2)\n    console.log(f(3))\n    console.log(getSum(2)(3)) // 5\n    ```\n    这样参数就可以在不同的时间点传入，Vue源码中有一个platform目录，专门存放和平台相关的源码，对函数进行柯里化就可以不用每次运行就进行平台判断。\n    ```\n    function ...(平台相关参数){\n        return function(平台不相关参数){\n          处理逻辑\n        }\n    }\n    ```\n    在Vue的patch以及编译环节都应用了这种方式。\n\n    - Macrotask与Microtask\n    与js的事件循环机制息息相关，Vue更新不是数据一改马上同步更新视图，而是将更改都放入到队列中，同一个watcher不会重复，然后异步处理更新逻辑。在实现异步的方式时，js实际提供了两种task--Macrotask与Microtask。\n    ```\n    console.log('script start');\n    setTimeout(function() {\n        console.log('setTimeout');\n        Promise.resolve().then(function() {\n            console.log('promise3');\n        }).then(function() {\n            console.log('promise4');\n        });\n    }, 0);\n    Promise.resolve().then(function() {\n        console.log('promise1');\n    }).then(function() {\n        console.log('promise2');\n    });\n    console.log('script end');\n    // 结果\n    script start\n    script end\n    promise1\n    promise2\n    setTimeout\n    promise3\n    promise4\n    ```\n    js事件循环中有两个队列，一个叫MacroTask，一个MircroTask，大任务队列（MacroTask）跑大任务，比如主流程程序、事件处理函数、setTimeout等等，小任务队列（MircroTask）跑小任务，比如Promise，js总是先从大任务队列拿一个执行，然后再把所有小任务队列全部执行再循环往复。\n    上述代码整体的代码段就是一个大任务在执行，执行完毕再执行同级所有小任务，执行完之后再取一个大任务执行，此时就是取setTimeout，之后再是这里面的小任务。\n    重点是**上面程序本身也是一个大任务**，\n    [Macrotask Vs Microtask](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n    [理解js中Macrotask和Microtask](https://juejin.im/entry/58d4df3b5c497d0057eb99ff)\n    [阮一峰 Eventloop理解](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\n    - 递归编程算法\n    Vue源码中大量使用了递归算法--比如dom diff算法、ast的优化、目标代码的生成等等。\n    ```\n    // 经典dom diff算法\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    ```\n    主要是用于比较新旧Vnode节点然后更新子节点，调用者是patchVnode函数，我们发现这部分函数中又会调用会patchVnode，调用链条为:patchVnode->updateChildren->patchVnode。同时，即便没有直接应用递归，在将模板编译成AST（抽象语法树）的过程中，其使用了栈去模拟了递归的思想，由此可见递归算法的重要性。不管是真实dom还是vnode，其实本质都是树状结构，本来就是递归定义的东西。\n\n    - 编译原理基础知识\n    ```\n    // vue内\n    const ast = parse(template.trim(), options)\n    if (options.optimize !== false) {\n        optimize(ast, options)\n    }\n    const code = generate(ast, options)\n    return {\n        ast,\n        render: code.render,\n        staticRenderFns: code.staticRenderFns\n    }\n    ```\n    首先通过parse函数将template编译为抽象语法树ast，然后对ast进行代码优化，最后生成render函数。就是将模板html编译为render函数。\n    AST（抽象语法树），就是一种表现大家共同点的结构，得到ast是翻译的基础。\n\n参考文章：[Vue源码解析准备篇 from 海洋之木](https://www.jianshu.com/p/c914ccd498e7)","slug":"vue1.0","published":1,"updated":"2020-04-21T08:53:30.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrpb0010e36kci6q6wgq","content":"<ul>\n<li><p>前置准备<br><img src=\"https://upload-images.jianshu.io/upload_images/14447586-b4092d45e1f254ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp\" alt=\"\"></p>\n<ul>\n<li><p>Flow基本语法<br>对类型的限制，检测。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a: number, b:number) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue源码内的一个函数</span><br><span class=\"line\">export function renderList (</span><br><span class=\"line\">    val: any, // any表示传入的类型可以是任何类型</span><br><span class=\"line\">    render: (</span><br><span class=\"line\">        val: any,</span><br><span class=\"line\">        keyOrIndex: string | number, // 表示需要是字符串或者数字</span><br><span class=\"line\">        index?: number // ?代表index可以不传，但是传的话一定要传入数字类型；</span><br><span class=\"line\">                       // 如果问号是在冒号后面，则这个参数必须要传，但可以是数字类型也可以是空</span><br><span class=\"line\">    ) =&gt; VNode</span><br><span class=\"line\">): ?Array&lt;VNode&gt;&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型和原型继承<br>Vue代码中是使用原型继承的方式实现父子组件共享初始化代码的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Student(props) &#123;</span><br><span class=\"line\">    this.name = props.name || &apos;Unnamed&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.hello = function () &#123;</span><br><span class=\"line\">    alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 基于Student拓展出PrimaryStudent</span><br><span class=\"line\">function PrimaryStudent(props) &#123;</span><br><span class=\"line\">    // 调用Student构造函数，绑定this变量:</span><br><span class=\"line\">    Student.call(this, props);</span><br><span class=\"line\">    this.grade = props.grade || 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时PrimaryStudent并没有继承Student，其原型链还是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null</span><br></pre></td></tr></table></figure>\n<p>若是继承则原型链：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null</span><br></pre></td></tr></table></figure>\n<p>此时需要一个中间对象来实现，将中间对象的原型要指向<code>Student.prototype</code>，不能直接<code>PrimaryStudent.prototype = Student.prototype;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 空函数F:</span><br><span class=\"line\">function F() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 把F的原型指向Student.prototype:</span><br><span class=\"line\">F.prototype = Student.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span><br><span class=\"line\">PrimaryStudent.prototype = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span><br><span class=\"line\">PrimaryStudent.prototype.constructor = PrimaryStudent;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在PrimaryStudent原型（就是new F()对象）上定义方法：</span><br><span class=\"line\">PrimaryStudent.prototype.getGrade = function () &#123;</span><br><span class=\"line\">    return this.grade;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Lilei = new PrimaryStudent(&#123;</span><br><span class=\"line\">    name: &apos;李雷&apos;,</span><br><span class=\"line\">    grade: 2</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 验证原型:</span><br><span class=\"line\">Lilei.__proto__ === PrimaryStudent.prototype; // true</span><br><span class=\"line\">Lilei.__proto__.__proto__ === Student.prototype; // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证继承关系:</span><br><span class=\"line\">Lilei instanceof PrimaryStudent; // true</span><br><span class=\"line\">Lilei instanceof Student; // true</span><br></pre></td></tr></table></figure>\n<p>原来的原型链：<br><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l\" alt=\"\"><br>新的原型链：<br><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l\" alt=\"\"></p>\n<p>封装这个继承过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inherits(Child, Parent) &#123;</span><br><span class=\"line\">    var F = function () &#123;&#125;;</span><br><span class=\"line\">    F.prototype = Parent.prototype;</span><br><span class=\"line\">    Child.prototype = new F();</span><br><span class=\"line\">    Child.prototype.constructor = Child;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后JavaScript的原型继承实现方式就是：<br>  定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；<br>  借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；<br>  继续在新的构造函数的原型上定义新方法。<br>参考（还需要深入研究）：<br><a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">廖雪峰js教程</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n</li>\n<li><p>Object.defineProperty<br>使用它实现响应式数据功能（数据绑定）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue 内定义响应式数据</span><br><span class=\"line\">export function defineReactive (</span><br><span class=\"line\">    obj: Object,</span><br><span class=\"line\">    key: string,</span><br><span class=\"line\">    val: any,</span><br><span class=\"line\">    customSetter?: ?Function,</span><br><span class=\"line\">    shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: true, // 是否可以遍历该key</span><br><span class=\"line\">        configurable: true, // 是否可以删除该key或者重新配置该key</span><br><span class=\"line\">        get: function reactiveGetter () &#123;</span><br><span class=\"line\">            const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">            if (Dep.target) &#123;</span><br><span class=\"line\">                dep.depend()</span><br><span class=\"line\">                if (childOb) &#123;</span><br><span class=\"line\">                    childOb.dep.depend()</span><br><span class=\"line\">                    if (Array.isArray(value)) &#123;</span><br><span class=\"line\">                        dependArray(value)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">            const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">            /* eslint-disable no-self-compare */</span><br><span class=\"line\">            if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            /* eslint-enable no-self-compare */</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">                customSetter()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (setter) &#123;</span><br><span class=\"line\">                setter.call(obj, newVal)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                val = newVal</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">            dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Object.defineProperty</code>这个函数有三个参数，第一个参数即为需要设置的对象，第二个参数为要设置的键值，第三个参数是一个配置对象，里面可以有：<br>value: 对应key的值<br>configurable：是否可以删除该key或者重新配置该key<br>enumerable：是否可以遍历该key<br>writable：是否可以修改该key<br>get: 获取该key值时调用的函数<br>set: 设置该key值时调用的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#123;&#125;</span><br><span class=\"line\">x[&apos;name&apos;] = &apos;vue&apos;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(x,&apos;name&apos;))</span><br><span class=\"line\">// Object.getOwnPropertyDescriptor可以获取对象某个key的描述对象</span><br><span class=\"line\">/*</span><br><span class=\"line\"> * &#123;</span><br><span class=\"line\"> *  value: &quot;vue&quot;,</span><br><span class=\"line\"> *  writable: true, </span><br><span class=\"line\"> *  enumerable: true, </span><br><span class=\"line\"> *  configurable: true</span><br><span class=\"line\"> *  &#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>此时对其进行操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(x, &apos;name&apos;, &#123;</span><br><span class=\"line\">  configurable: false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">delete x[&quot;name&quot;]; // false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(x, 0, &#123;</span><br><span class=\"line\">    enumerable: false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 不能使用for等循环对x进行遍历</span><br></pre></td></tr></table></figure>\n<p>在vue的Observer类中有下面一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def(value, &apos;__ob__&apos;, this);</span><br></pre></td></tr></table></figure>\n<p>这里def是个工具函数，目的是想给value添加一个key为<strong>ob</strong>，值为this，程序下面要遍历value对其子内容进行递归设置，如果直接用value.<strong>ob</strong>这种方式，在遍历时又会取到造成，这显然不是本意，所以def函数是利用Object.defineProperty给value添加的属性，同时enumerable设置为false。<br><code>set</code>和<code>get</code>类似于在获取对象值和设置对象值时加了一个代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(x, &apos;name&apos;, &#123;</span><br><span class=\"line\">    get: function()&#123;</span><br><span class=\"line\">       console.log(&quot;getter called!&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(newVal)&#123;</span><br><span class=\"line\">        console.log(&quot;setter called! newVal is:&quot; + newVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以在访问x[‘name’]时回打印getter called，在设置x[‘name’] = ‘httishere’时会打印setter called! newVal is:httishere，正是通过这种方式实现了访问属性时收集依赖，设置属性时源码有一句dep.notify，里面便是通知视图更新的相关操作。</p>\n</li>\n<li><p>Vnode<br>virtual node，虚拟节点，原生dom节点对象非常大，若直接操作dom，性能代价会比较大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue 内对vnode的定义</span><br><span class=\"line\">export default class VNode &#123;</span><br><span class=\"line\">    tag: string | void;</span><br><span class=\"line\">    data: VNodeData | void;</span><br><span class=\"line\">    children: ?Array&lt;VNode&gt;;</span><br><span class=\"line\">    text: string | void;</span><br><span class=\"line\">    elm: Node | void;</span><br><span class=\"line\">    ns: string | void;</span><br><span class=\"line\">    context: Component | void; // rendered in this component&apos;s scope</span><br><span class=\"line\">    key: string | number | void;</span><br><span class=\"line\">    componentOptions: VNodeComponentOptions | void;</span><br><span class=\"line\">    componentInstance: Component | void; // component instance</span><br><span class=\"line\">    parent: VNode | void; // component placeholder node</span><br><span class=\"line\"></span><br><span class=\"line\">    // strictly internal</span><br><span class=\"line\">    raw: boolean; // contains raw HTML? (server only)</span><br><span class=\"line\">    isStatic: boolean; // hoisted static node</span><br><span class=\"line\">    isRootInsert: boolean; // necessary for enter transition check</span><br><span class=\"line\">    isComment: boolean; // empty comment placeholder?</span><br><span class=\"line\">    isCloned: boolean; // is a cloned node?</span><br><span class=\"line\">    isOnce: boolean; // is a v-once node?</span><br><span class=\"line\">    asyncFactory: Function | void; // async component factory function</span><br><span class=\"line\">    asyncMeta: Object | void;</span><br><span class=\"line\">    isAsyncPlaceholder: boolean;</span><br><span class=\"line\">    ssrContext: Object | void;</span><br><span class=\"line\">    fnContext: Component | void; // real context vm for functional nodes</span><br><span class=\"line\">    fnOptions: ?ComponentOptions; // for SSR caching</span><br><span class=\"line\">    fnScopeId: ?string;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发生修改时，从全局看问题的方式就是异步，先把修改放到队列中，然后整成一批去修改，做diff：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queueWatcher(this);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数柯里化<br>将多参数的函数化作多个部分函数去调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例子 一个需要两个参数的函数</span><br><span class=\"line\">function getSum(a,b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 有时候可能参数的获得是异步的，其他参数会在另一个时间点再传入</span><br><span class=\"line\">function getSum(a)&#123;</span><br><span class=\"line\">    return function(b)&#123;</span><br><span class=\"line\">        return a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let f = getSum(2)</span><br><span class=\"line\">console.log(f(3))</span><br><span class=\"line\">console.log(getSum(2)(3)) // 5</span><br></pre></td></tr></table></figure>\n<p>这样参数就可以在不同的时间点传入，Vue源码中有一个platform目录，专门存放和平台相关的源码，对函数进行柯里化就可以不用每次运行就进行平台判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ...(平台相关参数)&#123;</span><br><span class=\"line\">    return function(平台不相关参数)&#123;</span><br><span class=\"line\">      处理逻辑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Vue的patch以及编译环节都应用了这种方式。</p>\n</li>\n<li><p>Macrotask与Microtask<br>与js的事件循环机制息息相关，Vue更新不是数据一改马上同步更新视图，而是将更改都放入到队列中，同一个watcher不会重复，然后异步处理更新逻辑。在实现异步的方式时，js实际提供了两种task–Macrotask与Microtask。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;script start&apos;);</span><br><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;);</span><br><span class=\"line\">    Promise.resolve().then(function() &#123;</span><br><span class=\"line\">        console.log(&apos;promise3&apos;);</span><br><span class=\"line\">    &#125;).then(function() &#123;</span><br><span class=\"line\">        console.log(&apos;promise4&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">Promise.resolve().then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;promise1&apos;);</span><br><span class=\"line\">&#125;).then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;promise2&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;script end&apos;);</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br><span class=\"line\">promise3</span><br><span class=\"line\">promise4</span><br></pre></td></tr></table></figure>\n<p>js事件循环中有两个队列，一个叫MacroTask，一个MircroTask，大任务队列（MacroTask）跑大任务，比如主流程程序、事件处理函数、setTimeout等等，小任务队列（MircroTask）跑小任务，比如Promise，js总是先从大任务队列拿一个执行，然后再把所有小任务队列全部执行再循环往复。<br>上述代码整体的代码段就是一个大任务在执行，执行完毕再执行同级所有小任务，执行完之后再取一个大任务执行，此时就是取setTimeout，之后再是这里面的小任务。<br>重点是<strong>上面程序本身也是一个大任务</strong>，<br><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Macrotask Vs Microtask</a><br><a href=\"https://juejin.im/entry/58d4df3b5c497d0057eb99ff\" target=\"_blank\" rel=\"noopener\">理解js中Macrotask和Microtask</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 Eventloop理解</a></p>\n</li>\n<li><p>递归编程算法<br>Vue源码中大量使用了递归算法–比如dom diff算法、ast的优化、目标代码的生成等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 经典dom diff算法</span><br><span class=\"line\">while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">  if (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left</span><br><span class=\"line\">  &#125; else if (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">    newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; // Vnode moved right</span><br><span class=\"line\">    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">    newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; // Vnode moved left</span><br><span class=\"line\">    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (isUndef(oldKeyToIdx)) &#123; oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); &#125;</span><br><span class=\"line\">    idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">      ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">      : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">    if (isUndef(idxInOld)) &#123; // New element</span><br><span class=\"line\">      createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      vnodeToMove = oldCh[idxInOld];</span><br><span class=\"line\">      if (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldCh[idxInOld] = undefined;</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // same key but different element. treat as new element</span><br><span class=\"line\">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>主要是用于比较新旧Vnode节点然后更新子节点，调用者是patchVnode函数，我们发现这部分函数中又会调用会patchVnode，调用链条为:patchVnode-&gt;updateChildren-&gt;patchVnode。同时，即便没有直接应用递归，在将模板编译成AST（抽象语法树）的过程中，其使用了栈去模拟了递归的思想，由此可见递归算法的重要性。不管是真实dom还是vnode，其实本质都是树状结构，本来就是递归定义的东西。</p>\n</li>\n<li><p>编译原理基础知识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue内</span><br><span class=\"line\">const ast = parse(template.trim(), options)</span><br><span class=\"line\">if (options.optimize !== false) &#123;</span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const code = generate(ast, options)</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先通过parse函数将template编译为抽象语法树ast，然后对ast进行代码优化，最后生成render函数。就是将模板html编译为render函数。<br>AST（抽象语法树），就是一种表现大家共同点的结构，得到ast是翻译的基础。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>参考文章：<a href=\"https://www.jianshu.com/p/c914ccd498e7\" target=\"_blank\" rel=\"noopener\">Vue源码解析准备篇 from 海洋之木</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>前置准备<br><img src=\"https://upload-images.jianshu.io/upload_images/14447586-b4092d45e1f254ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp\" alt=\"\"></p>\n<ul>\n<li><p>Flow基本语法<br>对类型的限制，检测。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a: number, b:number) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue源码内的一个函数</span><br><span class=\"line\">export function renderList (</span><br><span class=\"line\">    val: any, // any表示传入的类型可以是任何类型</span><br><span class=\"line\">    render: (</span><br><span class=\"line\">        val: any,</span><br><span class=\"line\">        keyOrIndex: string | number, // 表示需要是字符串或者数字</span><br><span class=\"line\">        index?: number // ?代表index可以不传，但是传的话一定要传入数字类型；</span><br><span class=\"line\">                       // 如果问号是在冒号后面，则这个参数必须要传，但可以是数字类型也可以是空</span><br><span class=\"line\">    ) =&gt; VNode</span><br><span class=\"line\">): ?Array&lt;VNode&gt;&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型和原型继承<br>Vue代码中是使用原型继承的方式实现父子组件共享初始化代码的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Student(props) &#123;</span><br><span class=\"line\">    this.name = props.name || &apos;Unnamed&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.hello = function () &#123;</span><br><span class=\"line\">    alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 基于Student拓展出PrimaryStudent</span><br><span class=\"line\">function PrimaryStudent(props) &#123;</span><br><span class=\"line\">    // 调用Student构造函数，绑定this变量:</span><br><span class=\"line\">    Student.call(this, props);</span><br><span class=\"line\">    this.grade = props.grade || 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时PrimaryStudent并没有继承Student，其原型链还是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null</span><br></pre></td></tr></table></figure>\n<p>若是继承则原型链：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null</span><br></pre></td></tr></table></figure>\n<p>此时需要一个中间对象来实现，将中间对象的原型要指向<code>Student.prototype</code>，不能直接<code>PrimaryStudent.prototype = Student.prototype;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 空函数F:</span><br><span class=\"line\">function F() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 把F的原型指向Student.prototype:</span><br><span class=\"line\">F.prototype = Student.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span><br><span class=\"line\">PrimaryStudent.prototype = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span><br><span class=\"line\">PrimaryStudent.prototype.constructor = PrimaryStudent;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在PrimaryStudent原型（就是new F()对象）上定义方法：</span><br><span class=\"line\">PrimaryStudent.prototype.getGrade = function () &#123;</span><br><span class=\"line\">    return this.grade;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Lilei = new PrimaryStudent(&#123;</span><br><span class=\"line\">    name: &apos;李雷&apos;,</span><br><span class=\"line\">    grade: 2</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 验证原型:</span><br><span class=\"line\">Lilei.__proto__ === PrimaryStudent.prototype; // true</span><br><span class=\"line\">Lilei.__proto__.__proto__ === Student.prototype; // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证继承关系:</span><br><span class=\"line\">Lilei instanceof PrimaryStudent; // true</span><br><span class=\"line\">Lilei instanceof Student; // true</span><br></pre></td></tr></table></figure>\n<p>原来的原型链：<br><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l\" alt=\"\"><br>新的原型链：<br><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l\" alt=\"\"></p>\n<p>封装这个继承过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inherits(Child, Parent) &#123;</span><br><span class=\"line\">    var F = function () &#123;&#125;;</span><br><span class=\"line\">    F.prototype = Parent.prototype;</span><br><span class=\"line\">    Child.prototype = new F();</span><br><span class=\"line\">    Child.prototype.constructor = Child;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后JavaScript的原型继承实现方式就是：<br>  定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；<br>  借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；<br>  继续在新的构造函数的原型上定义新方法。<br>参考（还需要深入研究）：<br><a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">廖雪峰js教程</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n</li>\n<li><p>Object.defineProperty<br>使用它实现响应式数据功能（数据绑定）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue 内定义响应式数据</span><br><span class=\"line\">export function defineReactive (</span><br><span class=\"line\">    obj: Object,</span><br><span class=\"line\">    key: string,</span><br><span class=\"line\">    val: any,</span><br><span class=\"line\">    customSetter?: ?Function,</span><br><span class=\"line\">    shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: true, // 是否可以遍历该key</span><br><span class=\"line\">        configurable: true, // 是否可以删除该key或者重新配置该key</span><br><span class=\"line\">        get: function reactiveGetter () &#123;</span><br><span class=\"line\">            const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">            if (Dep.target) &#123;</span><br><span class=\"line\">                dep.depend()</span><br><span class=\"line\">                if (childOb) &#123;</span><br><span class=\"line\">                    childOb.dep.depend()</span><br><span class=\"line\">                    if (Array.isArray(value)) &#123;</span><br><span class=\"line\">                        dependArray(value)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">            const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">            /* eslint-disable no-self-compare */</span><br><span class=\"line\">            if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            /* eslint-enable no-self-compare */</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">                customSetter()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (setter) &#123;</span><br><span class=\"line\">                setter.call(obj, newVal)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                val = newVal</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">            dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Object.defineProperty</code>这个函数有三个参数，第一个参数即为需要设置的对象，第二个参数为要设置的键值，第三个参数是一个配置对象，里面可以有：<br>value: 对应key的值<br>configurable：是否可以删除该key或者重新配置该key<br>enumerable：是否可以遍历该key<br>writable：是否可以修改该key<br>get: 获取该key值时调用的函数<br>set: 设置该key值时调用的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#123;&#125;</span><br><span class=\"line\">x[&apos;name&apos;] = &apos;vue&apos;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(x,&apos;name&apos;))</span><br><span class=\"line\">// Object.getOwnPropertyDescriptor可以获取对象某个key的描述对象</span><br><span class=\"line\">/*</span><br><span class=\"line\"> * &#123;</span><br><span class=\"line\"> *  value: &quot;vue&quot;,</span><br><span class=\"line\"> *  writable: true, </span><br><span class=\"line\"> *  enumerable: true, </span><br><span class=\"line\"> *  configurable: true</span><br><span class=\"line\"> *  &#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>此时对其进行操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(x, &apos;name&apos;, &#123;</span><br><span class=\"line\">  configurable: false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">delete x[&quot;name&quot;]; // false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(x, 0, &#123;</span><br><span class=\"line\">    enumerable: false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 不能使用for等循环对x进行遍历</span><br></pre></td></tr></table></figure>\n<p>在vue的Observer类中有下面一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def(value, &apos;__ob__&apos;, this);</span><br></pre></td></tr></table></figure>\n<p>这里def是个工具函数，目的是想给value添加一个key为<strong>ob</strong>，值为this，程序下面要遍历value对其子内容进行递归设置，如果直接用value.<strong>ob</strong>这种方式，在遍历时又会取到造成，这显然不是本意，所以def函数是利用Object.defineProperty给value添加的属性，同时enumerable设置为false。<br><code>set</code>和<code>get</code>类似于在获取对象值和设置对象值时加了一个代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(x, &apos;name&apos;, &#123;</span><br><span class=\"line\">    get: function()&#123;</span><br><span class=\"line\">       console.log(&quot;getter called!&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(newVal)&#123;</span><br><span class=\"line\">        console.log(&quot;setter called! newVal is:&quot; + newVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以在访问x[‘name’]时回打印getter called，在设置x[‘name’] = ‘httishere’时会打印setter called! newVal is:httishere，正是通过这种方式实现了访问属性时收集依赖，设置属性时源码有一句dep.notify，里面便是通知视图更新的相关操作。</p>\n</li>\n<li><p>Vnode<br>virtual node，虚拟节点，原生dom节点对象非常大，若直接操作dom，性能代价会比较大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue 内对vnode的定义</span><br><span class=\"line\">export default class VNode &#123;</span><br><span class=\"line\">    tag: string | void;</span><br><span class=\"line\">    data: VNodeData | void;</span><br><span class=\"line\">    children: ?Array&lt;VNode&gt;;</span><br><span class=\"line\">    text: string | void;</span><br><span class=\"line\">    elm: Node | void;</span><br><span class=\"line\">    ns: string | void;</span><br><span class=\"line\">    context: Component | void; // rendered in this component&apos;s scope</span><br><span class=\"line\">    key: string | number | void;</span><br><span class=\"line\">    componentOptions: VNodeComponentOptions | void;</span><br><span class=\"line\">    componentInstance: Component | void; // component instance</span><br><span class=\"line\">    parent: VNode | void; // component placeholder node</span><br><span class=\"line\"></span><br><span class=\"line\">    // strictly internal</span><br><span class=\"line\">    raw: boolean; // contains raw HTML? (server only)</span><br><span class=\"line\">    isStatic: boolean; // hoisted static node</span><br><span class=\"line\">    isRootInsert: boolean; // necessary for enter transition check</span><br><span class=\"line\">    isComment: boolean; // empty comment placeholder?</span><br><span class=\"line\">    isCloned: boolean; // is a cloned node?</span><br><span class=\"line\">    isOnce: boolean; // is a v-once node?</span><br><span class=\"line\">    asyncFactory: Function | void; // async component factory function</span><br><span class=\"line\">    asyncMeta: Object | void;</span><br><span class=\"line\">    isAsyncPlaceholder: boolean;</span><br><span class=\"line\">    ssrContext: Object | void;</span><br><span class=\"line\">    fnContext: Component | void; // real context vm for functional nodes</span><br><span class=\"line\">    fnOptions: ?ComponentOptions; // for SSR caching</span><br><span class=\"line\">    fnScopeId: ?string;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发生修改时，从全局看问题的方式就是异步，先把修改放到队列中，然后整成一批去修改，做diff：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queueWatcher(this);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数柯里化<br>将多参数的函数化作多个部分函数去调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例子 一个需要两个参数的函数</span><br><span class=\"line\">function getSum(a,b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 有时候可能参数的获得是异步的，其他参数会在另一个时间点再传入</span><br><span class=\"line\">function getSum(a)&#123;</span><br><span class=\"line\">    return function(b)&#123;</span><br><span class=\"line\">        return a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let f = getSum(2)</span><br><span class=\"line\">console.log(f(3))</span><br><span class=\"line\">console.log(getSum(2)(3)) // 5</span><br></pre></td></tr></table></figure>\n<p>这样参数就可以在不同的时间点传入，Vue源码中有一个platform目录，专门存放和平台相关的源码，对函数进行柯里化就可以不用每次运行就进行平台判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ...(平台相关参数)&#123;</span><br><span class=\"line\">    return function(平台不相关参数)&#123;</span><br><span class=\"line\">      处理逻辑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Vue的patch以及编译环节都应用了这种方式。</p>\n</li>\n<li><p>Macrotask与Microtask<br>与js的事件循环机制息息相关，Vue更新不是数据一改马上同步更新视图，而是将更改都放入到队列中，同一个watcher不会重复，然后异步处理更新逻辑。在实现异步的方式时，js实际提供了两种task–Macrotask与Microtask。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;script start&apos;);</span><br><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;);</span><br><span class=\"line\">    Promise.resolve().then(function() &#123;</span><br><span class=\"line\">        console.log(&apos;promise3&apos;);</span><br><span class=\"line\">    &#125;).then(function() &#123;</span><br><span class=\"line\">        console.log(&apos;promise4&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">Promise.resolve().then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;promise1&apos;);</span><br><span class=\"line\">&#125;).then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;promise2&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;script end&apos;);</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br><span class=\"line\">promise3</span><br><span class=\"line\">promise4</span><br></pre></td></tr></table></figure>\n<p>js事件循环中有两个队列，一个叫MacroTask，一个MircroTask，大任务队列（MacroTask）跑大任务，比如主流程程序、事件处理函数、setTimeout等等，小任务队列（MircroTask）跑小任务，比如Promise，js总是先从大任务队列拿一个执行，然后再把所有小任务队列全部执行再循环往复。<br>上述代码整体的代码段就是一个大任务在执行，执行完毕再执行同级所有小任务，执行完之后再取一个大任务执行，此时就是取setTimeout，之后再是这里面的小任务。<br>重点是<strong>上面程序本身也是一个大任务</strong>，<br><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Macrotask Vs Microtask</a><br><a href=\"https://juejin.im/entry/58d4df3b5c497d0057eb99ff\" target=\"_blank\" rel=\"noopener\">理解js中Macrotask和Microtask</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 Eventloop理解</a></p>\n</li>\n<li><p>递归编程算法<br>Vue源码中大量使用了递归算法–比如dom diff算法、ast的优化、目标代码的生成等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 经典dom diff算法</span><br><span class=\"line\">while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">  if (isUndef(oldStartVnode)) &#123;</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left</span><br><span class=\"line\">  &#125; else if (isUndef(oldEndVnode)) &#123;</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">    newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; // Vnode moved right</span><br><span class=\"line\">    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));</span><br><span class=\"line\">    oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">    newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">  &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; // Vnode moved left</span><br><span class=\"line\">    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);</span><br><span class=\"line\">    oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (isUndef(oldKeyToIdx)) &#123; oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); &#125;</span><br><span class=\"line\">    idxInOld = isDef(newStartVnode.key)</span><br><span class=\"line\">      ? oldKeyToIdx[newStartVnode.key]</span><br><span class=\"line\">      : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">    if (isUndef(idxInOld)) &#123; // New element</span><br><span class=\"line\">      createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      vnodeToMove = oldCh[idxInOld];</span><br><span class=\"line\">      if (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldCh[idxInOld] = undefined;</span><br><span class=\"line\">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // same key but different element. treat as new element</span><br><span class=\"line\">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>主要是用于比较新旧Vnode节点然后更新子节点，调用者是patchVnode函数，我们发现这部分函数中又会调用会patchVnode，调用链条为:patchVnode-&gt;updateChildren-&gt;patchVnode。同时，即便没有直接应用递归，在将模板编译成AST（抽象语法树）的过程中，其使用了栈去模拟了递归的思想，由此可见递归算法的重要性。不管是真实dom还是vnode，其实本质都是树状结构，本来就是递归定义的东西。</p>\n</li>\n<li><p>编译原理基础知识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue内</span><br><span class=\"line\">const ast = parse(template.trim(), options)</span><br><span class=\"line\">if (options.optimize !== false) &#123;</span><br><span class=\"line\">    optimize(ast, options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const code = generate(ast, options)</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先通过parse函数将template编译为抽象语法树ast，然后对ast进行代码优化，最后生成render函数。就是将模板html编译为render函数。<br>AST（抽象语法树），就是一种表现大家共同点的结构，得到ast是翻译的基础。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>参考文章：<a href=\"https://www.jianshu.com/p/c914ccd498e7\" target=\"_blank\" rel=\"noopener\">Vue源码解析准备篇 from 海洋之木</a></p>\n"},{"title":"vue source code 2.0","date":"2019-01-23T02:30:23.000Z","_content":"\n## Vue options\n核心代码->core/index，暴露一个Vue类（core/instance/index），在该文件内发现初始定义了一个Vue：\n```\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n其中传入的参数options，即我妈实例化Vue对象时传入的：\n```\n{\n    el: '#data',\n    data: {\n        ...\n    },\n    methods: {\n        ...\n    }\n}\n```\n再定义完这个Vue类之后执行了5个方法：\n\n- initMixin(Vue)\n主要为Vue原型定义了`_init`方法，再实例化过程中会执行`_init`方法，其中先对options进行了判断，若非组件则会进入`mergeOptions`方法，该方法是将`resolveConstructorOptions(vm.constructor)`和`options`合在一起。\n那`resolveConstructorOptions`时干嘛的呢，`Ctor.super`可想而知是上级，所以主要是来判断该类是否为Vue的子类，进而判断父类中的options有没有发生变化，当Vue混入一些options时`superOptions`会发生变化，之后就会更新子类的`superOptions`，Vue混入options的情况：\n```\nVue.extend(options)\nVue.mixin(options)\n```\n在`mergeOptions`根据不同的key采用不同的merge策略，ue提供了一个strats对象，其本身就是一个hook，如果strats有提供特殊的逻辑，就走strats，否则走默认merge逻辑，能很好的区分对待公共处理逻辑与特殊处理逻辑。\n`initMixin`就是把业务逻辑以及组件的一些特性全都放到了vm.$options中了，后续的操作我们都可以从vm.$options拿到可用的信息，后续动态添加任何东西都可以规范的收入到`vm.$options`内。\n后续的执行：\n```\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, 'beforeCreate')\n    initInjections(vm)\n    initState(vm)\n    initProvide(vm)\n    callHook(vm, 'created')\n```\n需要先了解响应式数据原理（订阅-发布模式）：\n![](https://camo.githubusercontent.com/f60a57d4d89744f5947ca53c6ce80d3105171185/687474703a2f2f696d672e736f756368652e636f6d2f6632652f38613963383033353763623834626161653532383564653437663461656165622e706e67)\n\n#### Observer\n```\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  /**\n   * Walk through all properties and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n当实例化Observer对象时，会执行`walk`这个方法, 主要是遍历obj属性, 然后通过`Object.defineProperty`来定义响应式数据。\ndefineReactive: \n```\nexport function defineReactive (\n obj: Object,\n key: string,\n val: any,\n customSetter?: ?Function,\n shallow?: boolean\n) {\n  const dep = new Dep() // 订阅器\n  ...\n  Object.defineProperty(obj, key, {\n      ...\n      get: function reactiveGetter () {\n        ...\n        dep.depend()\n        ...\n        return value\n      },\n      set: function reactiveSetter (newVal) {\n        ...\n        dep.notify()\n      }\n    })\n}\n```\n主要是做了Dep的两个操作: \n```\ndep.depend()\ndep.notify()\n```\nDom上通过指令或者双大括号绑定的数据, 会添加观察者`watcher`, 当实例化Watcher的时候 会触发属性的getter方法，此时会调用dep.depend()。\n```\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n```\n在进行Watcher实例化时会调用内部get函数, 为其初始化:\n```\nget () {\n  pushTarget(this) // 就是为Dep.target绑定此watcher实例\n  ...\n}\n```\n当更新data的时候, 会触发set方法, 执行dep.notify()函数:\n```\nnotify () {\n  // stabilize the subscriber list first\n  const subs = this.subs.slice()\n  for (let i = 0, l = subs.length; i < l; i++) {\n    subs[i].update()\n  }\n}\n```\n就是遍历dep中收集到的watcher实例，进行update()。也就是进行数据更新操作。这也就是简单的数据响应式。\n其实还需要注意的是： 当数据的getter触发后，会收集依赖，但也不是所有的触发方式都会收集依赖，只有通过watcher触发的getter会收集依赖：`if (Dep.target) { dep.depend() }`，而所谓的被收集的依赖就是当前watcher，DOM中的数据必须通过watcher来绑定，只通过watcher来读取。\n\n#### initLifecycle\n```\nexport function initLifecycle (vm: Component) {\n  const options = vm.$options\n  /**\n   * 这里判断是否存在父示例，如果存在，则通过 while 循环，建立所有组建的父子关系\n   */\n  let parent = options.parent\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n  /**\n   * 为组件实例挂载相应属性，并初始化\n   */\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n\n  vm.$children = []\n  vm.$refs = {}\n\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n}\n```\n\n#### initEvents\n```\nexport function initEvents (vm: Component) {\n  /**\n   * 创建事件对象，用于存储事件\n   */\n  vm._events = Object.create(null)\n  /**\n   * 这里应该是系统事件标识位\n   */\n  vm._hasHookEvent = false\n  // init parent attached events\n  // _parentListeners其实是父组件模板中写的v-on\n  // 所以下面这段就是将父组件模板中注册的事件放到当前组件实例的listeners里面\n  const listeners = vm.$options._parentListeners\n  if (listeners) {\n    updateComponentListeners(vm, listeners)\n  }\n}\n```\n\n#### initRender\n主要是为组件实例，初始化一些渲染属性，比如$slots和$createElement等。\n```\nexport function initRender (vm: Component) {\n  vm._vnode = null // the root of the child tree\n  const options = vm.$options\n  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n  const renderContext = parentVnode && parentVnode.context\n\n  // 处理组件slot，返回slot插槽对象\n\n  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n  vm.$scopedSlots = emptyObject\n\n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n\n\n  /**\n   * 定义v2.4中新增的$attrs及$listeners属性，需要为其绑定响应式数据更新\n   */\n   \n  const parentData = parentVnode && parentVnode.data\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n    }, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n    }, true)\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n  }\n}\n```\n\n#### callHook\n调用钩子函数的方法，即触发之前options中定义的相应的生命周期函数。\n进行到此处便开始调用了beforeCreate钩子函数。\n```\nexport function callHook (vm: Component, hook: string) {\n  const handlers = vm.$options[hook]\n  if (handlers) {\n    for (let i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm)\n      } catch (e) {\n        handleError(e, vm, `${hook} hook`)\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook)\n  }\n}\n```\n\n#### initInjections 和 initProvide\n```\nexport function initInjections (vm: Component) {\n  // 因为并没有vm._provided此时result 返回的是个 null，也就没有进行defineReactive\n  const result = resolveInject(vm.$options.inject, vm)\n  if (result) {\n    observerState.shouldConvert = false\n    Object.keys(result).forEach(key => {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], () => {\n          warn(\n            `Avoid mutating an injected value directly since the changes will be ` +\n            `overwritten whenever the provided component re-renders. ` +\n            `injection being mutated: \"${key}\"`,\n            vm\n          )\n        })\n      } else {\n        defineReactive(vm, key, result[key])\n      }\n    })\n    observerState.shouldConvert = true\n  }\n}\nexport function initProvide (vm: Component) {\n  const provide = vm.$options.provide\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide\n  }\n}\n```\n\n#### initState\n主要是定义的数据进行defineReactive。","source":"_posts/vue2.0.md","raw":"---\ntitle: vue source code 2.0\ndate: 2019-01-23 10:30:23 +0800\ntags: \n    - '从入门到放弃'\ncategories: vue\n---\n\n## Vue options\n核心代码->core/index，暴露一个Vue类（core/instance/index），在该文件内发现初始定义了一个Vue：\n```\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n其中传入的参数options，即我妈实例化Vue对象时传入的：\n```\n{\n    el: '#data',\n    data: {\n        ...\n    },\n    methods: {\n        ...\n    }\n}\n```\n再定义完这个Vue类之后执行了5个方法：\n\n- initMixin(Vue)\n主要为Vue原型定义了`_init`方法，再实例化过程中会执行`_init`方法，其中先对options进行了判断，若非组件则会进入`mergeOptions`方法，该方法是将`resolveConstructorOptions(vm.constructor)`和`options`合在一起。\n那`resolveConstructorOptions`时干嘛的呢，`Ctor.super`可想而知是上级，所以主要是来判断该类是否为Vue的子类，进而判断父类中的options有没有发生变化，当Vue混入一些options时`superOptions`会发生变化，之后就会更新子类的`superOptions`，Vue混入options的情况：\n```\nVue.extend(options)\nVue.mixin(options)\n```\n在`mergeOptions`根据不同的key采用不同的merge策略，ue提供了一个strats对象，其本身就是一个hook，如果strats有提供特殊的逻辑，就走strats，否则走默认merge逻辑，能很好的区分对待公共处理逻辑与特殊处理逻辑。\n`initMixin`就是把业务逻辑以及组件的一些特性全都放到了vm.$options中了，后续的操作我们都可以从vm.$options拿到可用的信息，后续动态添加任何东西都可以规范的收入到`vm.$options`内。\n后续的执行：\n```\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, 'beforeCreate')\n    initInjections(vm)\n    initState(vm)\n    initProvide(vm)\n    callHook(vm, 'created')\n```\n需要先了解响应式数据原理（订阅-发布模式）：\n![](https://camo.githubusercontent.com/f60a57d4d89744f5947ca53c6ce80d3105171185/687474703a2f2f696d672e736f756368652e636f6d2f6632652f38613963383033353763623834626161653532383564653437663461656165622e706e67)\n\n#### Observer\n```\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  /**\n   * Walk through all properties and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n当实例化Observer对象时，会执行`walk`这个方法, 主要是遍历obj属性, 然后通过`Object.defineProperty`来定义响应式数据。\ndefineReactive: \n```\nexport function defineReactive (\n obj: Object,\n key: string,\n val: any,\n customSetter?: ?Function,\n shallow?: boolean\n) {\n  const dep = new Dep() // 订阅器\n  ...\n  Object.defineProperty(obj, key, {\n      ...\n      get: function reactiveGetter () {\n        ...\n        dep.depend()\n        ...\n        return value\n      },\n      set: function reactiveSetter (newVal) {\n        ...\n        dep.notify()\n      }\n    })\n}\n```\n主要是做了Dep的两个操作: \n```\ndep.depend()\ndep.notify()\n```\nDom上通过指令或者双大括号绑定的数据, 会添加观察者`watcher`, 当实例化Watcher的时候 会触发属性的getter方法，此时会调用dep.depend()。\n```\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n```\n在进行Watcher实例化时会调用内部get函数, 为其初始化:\n```\nget () {\n  pushTarget(this) // 就是为Dep.target绑定此watcher实例\n  ...\n}\n```\n当更新data的时候, 会触发set方法, 执行dep.notify()函数:\n```\nnotify () {\n  // stabilize the subscriber list first\n  const subs = this.subs.slice()\n  for (let i = 0, l = subs.length; i < l; i++) {\n    subs[i].update()\n  }\n}\n```\n就是遍历dep中收集到的watcher实例，进行update()。也就是进行数据更新操作。这也就是简单的数据响应式。\n其实还需要注意的是： 当数据的getter触发后，会收集依赖，但也不是所有的触发方式都会收集依赖，只有通过watcher触发的getter会收集依赖：`if (Dep.target) { dep.depend() }`，而所谓的被收集的依赖就是当前watcher，DOM中的数据必须通过watcher来绑定，只通过watcher来读取。\n\n#### initLifecycle\n```\nexport function initLifecycle (vm: Component) {\n  const options = vm.$options\n  /**\n   * 这里判断是否存在父示例，如果存在，则通过 while 循环，建立所有组建的父子关系\n   */\n  let parent = options.parent\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n  /**\n   * 为组件实例挂载相应属性，并初始化\n   */\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n\n  vm.$children = []\n  vm.$refs = {}\n\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n}\n```\n\n#### initEvents\n```\nexport function initEvents (vm: Component) {\n  /**\n   * 创建事件对象，用于存储事件\n   */\n  vm._events = Object.create(null)\n  /**\n   * 这里应该是系统事件标识位\n   */\n  vm._hasHookEvent = false\n  // init parent attached events\n  // _parentListeners其实是父组件模板中写的v-on\n  // 所以下面这段就是将父组件模板中注册的事件放到当前组件实例的listeners里面\n  const listeners = vm.$options._parentListeners\n  if (listeners) {\n    updateComponentListeners(vm, listeners)\n  }\n}\n```\n\n#### initRender\n主要是为组件实例，初始化一些渲染属性，比如$slots和$createElement等。\n```\nexport function initRender (vm: Component) {\n  vm._vnode = null // the root of the child tree\n  const options = vm.$options\n  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n  const renderContext = parentVnode && parentVnode.context\n\n  // 处理组件slot，返回slot插槽对象\n\n  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n  vm.$scopedSlots = emptyObject\n\n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n\n\n  /**\n   * 定义v2.4中新增的$attrs及$listeners属性，需要为其绑定响应式数据更新\n   */\n   \n  const parentData = parentVnode && parentVnode.data\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n    }, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n    }, true)\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n  }\n}\n```\n\n#### callHook\n调用钩子函数的方法，即触发之前options中定义的相应的生命周期函数。\n进行到此处便开始调用了beforeCreate钩子函数。\n```\nexport function callHook (vm: Component, hook: string) {\n  const handlers = vm.$options[hook]\n  if (handlers) {\n    for (let i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm)\n      } catch (e) {\n        handleError(e, vm, `${hook} hook`)\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook)\n  }\n}\n```\n\n#### initInjections 和 initProvide\n```\nexport function initInjections (vm: Component) {\n  // 因为并没有vm._provided此时result 返回的是个 null，也就没有进行defineReactive\n  const result = resolveInject(vm.$options.inject, vm)\n  if (result) {\n    observerState.shouldConvert = false\n    Object.keys(result).forEach(key => {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], () => {\n          warn(\n            `Avoid mutating an injected value directly since the changes will be ` +\n            `overwritten whenever the provided component re-renders. ` +\n            `injection being mutated: \"${key}\"`,\n            vm\n          )\n        })\n      } else {\n        defineReactive(vm, key, result[key])\n      }\n    })\n    observerState.shouldConvert = true\n  }\n}\nexport function initProvide (vm: Component) {\n  const provide = vm.$options.provide\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide\n  }\n}\n```\n\n#### initState\n主要是定义的数据进行defineReactive。","slug":"vue2.0","published":1,"updated":"2020-04-21T08:53:30.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrpd0015e36krioze4mz","content":"<h2 id=\"Vue-options\"><a href=\"#Vue-options\" class=\"headerlink\" title=\"Vue options\"></a>Vue options</h2><p>核心代码-&gt;core/index，暴露一个Vue类（core/instance/index），在该文件内发现初始定义了一个Vue：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue (options) &#123;</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中传入的参数options，即我妈实例化Vue对象时传入的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    el: &apos;#data&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再定义完这个Vue类之后执行了5个方法：</p>\n<ul>\n<li>initMixin(Vue)<br>主要为Vue原型定义了<code>_init</code>方法，再实例化过程中会执行<code>_init</code>方法，其中先对options进行了判断，若非组件则会进入<code>mergeOptions</code>方法，该方法是将<code>resolveConstructorOptions(vm.constructor)</code>和<code>options</code>合在一起。<br>那<code>resolveConstructorOptions</code>时干嘛的呢，<code>Ctor.super</code>可想而知是上级，所以主要是来判断该类是否为Vue的子类，进而判断父类中的options有没有发生变化，当Vue混入一些options时<code>superOptions</code>会发生变化，之后就会更新子类的<code>superOptions</code>，Vue混入options的情况：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.extend(options)</span><br><span class=\"line\">Vue.mixin(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在<code>mergeOptions</code>根据不同的key采用不同的merge策略，ue提供了一个strats对象，其本身就是一个hook，如果strats有提供特殊的逻辑，就走strats，否则走默认merge逻辑，能很好的区分对待公共处理逻辑与特殊处理逻辑。<br><code>initMixin</code>就是把业务逻辑以及组件的一些特性全都放到了vm.$options中了，后续的操作我们都可以从vm.$options拿到可用的信息，后续动态添加任何东西都可以规范的收入到<code>vm.$options</code>内。<br>后续的执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLifecycle(vm)</span><br><span class=\"line\">initEvents(vm)</span><br><span class=\"line\">initRender(vm)</span><br><span class=\"line\">callHook(vm, &apos;beforeCreate&apos;)</span><br><span class=\"line\">initInjections(vm)</span><br><span class=\"line\">initState(vm)</span><br><span class=\"line\">initProvide(vm)</span><br><span class=\"line\">callHook(vm, &apos;created&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>需要先了解响应式数据原理（订阅-发布模式）：<br><img src=\"https://camo.githubusercontent.com/f60a57d4d89744f5947ca53c6ce80d3105171185/687474703a2f2f696d672e736f756368652e636f6d2f6632652f38613963383033353763623834626161653532383564653437663461656165622e706e67\" alt=\"\"></p>\n<h4 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Observer &#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; // number of vms that have this object as root $data</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor (value: any) &#123;</span><br><span class=\"line\">    this.value = value</span><br><span class=\"line\">    this.dep = new Dep()</span><br><span class=\"line\">    this.vmCount = 0</span><br><span class=\"line\">    def(value, &apos;__ob__&apos;, this)</span><br><span class=\"line\">    if (Array.isArray(value)) &#123;</span><br><span class=\"line\">      if (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.observeArray(value)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Walk through all properties and convert them into</span><br><span class=\"line\">   * getter/setters. This method should only be called when</span><br><span class=\"line\">   * value type is Object.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  walk (obj: Object) &#123;</span><br><span class=\"line\">    const keys = Object.keys(obj)</span><br><span class=\"line\">    for (let i = 0; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">      defineReactive(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Observe a list of Array items.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  observeArray (items: Array&lt;any&gt;) &#123;</span><br><span class=\"line\">    for (let i = 0, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当实例化Observer对象时，会执行<code>walk</code>这个方法, 主要是遍历obj属性, 然后通过<code>Object.defineProperty</code>来定义响应式数据。<br>defineReactive:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function defineReactive (</span><br><span class=\"line\"> obj: Object,</span><br><span class=\"line\"> key: string,</span><br><span class=\"line\"> val: any,</span><br><span class=\"line\"> customSetter?: ?Function,</span><br><span class=\"line\"> shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const dep = new Dep() // 订阅器</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      get: function reactiveGetter () &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        dep.depend()</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        dep.notify()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主要是做了Dep的两个操作:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dep.depend()</span><br><span class=\"line\">dep.notify()</span><br></pre></td></tr></table></figure></p>\n<p>Dom上通过指令或者双大括号绑定的数据, 会添加观察者<code>watcher</code>, 当实例化Watcher的时候 会触发属性的getter方法，此时会调用dep.depend()。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  if (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在进行Watcher实例化时会调用内部get函数, 为其初始化:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">  pushTarget(this) // 就是为Dep.target绑定此watcher实例</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当更新data的时候, 会触发set方法, 执行dep.notify()函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify () &#123;</span><br><span class=\"line\">  // stabilize the subscriber list first</span><br><span class=\"line\">  const subs = this.subs.slice()</span><br><span class=\"line\">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是遍历dep中收集到的watcher实例，进行update()。也就是进行数据更新操作。这也就是简单的数据响应式。<br>其实还需要注意的是： 当数据的getter触发后，会收集依赖，但也不是所有的触发方式都会收集依赖，只有通过watcher触发的getter会收集依赖：<code>if (Dep.target) { dep.depend() }</code>，而所谓的被收集的依赖就是当前watcher，DOM中的数据必须通过watcher来绑定，只通过watcher来读取。</p>\n<h4 id=\"initLifecycle\"><a href=\"#initLifecycle\" class=\"headerlink\" title=\"initLifecycle\"></a>initLifecycle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initLifecycle (vm: Component) &#123;</span><br><span class=\"line\">  const options = vm.$options</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 这里判断是否存在父示例，如果存在，则通过 while 循环，建立所有组建的父子关系</span><br><span class=\"line\">   */</span><br><span class=\"line\">  let parent = options.parent</span><br><span class=\"line\">  if (parent &amp;&amp; !options.abstract) &#123;</span><br><span class=\"line\">    while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class=\"line\">      parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent.$children.push(vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 为组件实例挂载相应属性，并初始化</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm.$parent = parent</span><br><span class=\"line\">  vm.$root = parent ? parent.$root : vm</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$children = []</span><br><span class=\"line\">  vm.$refs = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._watcher = null</span><br><span class=\"line\">  vm._inactive = null</span><br><span class=\"line\">  vm._directInactive = false</span><br><span class=\"line\">  vm._isMounted = false</span><br><span class=\"line\">  vm._isDestroyed = false</span><br><span class=\"line\">  vm._isBeingDestroyed = false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initEvents\"><a href=\"#initEvents\" class=\"headerlink\" title=\"initEvents\"></a>initEvents</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initEvents (vm: Component) &#123;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 创建事件对象，用于存储事件</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm._events = Object.create(null)</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 这里应该是系统事件标识位</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm._hasHookEvent = false</span><br><span class=\"line\">  // init parent attached events</span><br><span class=\"line\">  // _parentListeners其实是父组件模板中写的v-on</span><br><span class=\"line\">  // 所以下面这段就是将父组件模板中注册的事件放到当前组件实例的listeners里面</span><br><span class=\"line\">  const listeners = vm.$options._parentListeners</span><br><span class=\"line\">  if (listeners) &#123;</span><br><span class=\"line\">    updateComponentListeners(vm, listeners)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initRender\"><a href=\"#initRender\" class=\"headerlink\" title=\"initRender\"></a>initRender</h4><p>主要是为组件实例，初始化一些渲染属性，比如$slots和$createElement等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initRender (vm: Component) &#123;</span><br><span class=\"line\">  vm._vnode = null // the root of the child tree</span><br><span class=\"line\">  const options = vm.$options</span><br><span class=\"line\">  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree</span><br><span class=\"line\">  const renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class=\"line\"></span><br><span class=\"line\">  // 处理组件slot，返回slot插槽对象</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$slots = resolveSlots(options._renderChildren, renderContext)</span><br><span class=\"line\">  vm.$scopedSlots = emptyObject</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false)</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 定义v2.4中新增的$attrs及$listeners属性，需要为其绑定响应式数据更新</span><br><span class=\"line\">   */</span><br><span class=\"line\">   </span><br><span class=\"line\">  const parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore else */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">    defineReactive(vm, &apos;$attrs&apos;, parentData &amp;&amp; parentData.attrs || emptyObject, () =&gt; &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; warn(`$attrs is readonly.`, vm)</span><br><span class=\"line\">    &#125;, true)</span><br><span class=\"line\">    defineReactive(vm, &apos;$listeners&apos;, options._parentListeners || emptyObject, () =&gt; &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; warn(`$listeners is readonly.`, vm)</span><br><span class=\"line\">    &#125;, true)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    defineReactive(vm, &apos;$attrs&apos;, parentData &amp;&amp; parentData.attrs || emptyObject, null, true)</span><br><span class=\"line\">    defineReactive(vm, &apos;$listeners&apos;, options._parentListeners || emptyObject, null, true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"callHook\"><a href=\"#callHook\" class=\"headerlink\" title=\"callHook\"></a>callHook</h4><p>调用钩子函数的方法，即触发之前options中定义的相应的生命周期函数。<br>进行到此处便开始调用了beforeCreate钩子函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function callHook (vm: Component, hook: string) &#123;</span><br><span class=\"line\">  const handlers = vm.$options[hook]</span><br><span class=\"line\">  if (handlers) &#123;</span><br><span class=\"line\">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        handlers[i].call(vm)</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (vm._hasHookEvent) &#123;</span><br><span class=\"line\">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"initInjections-和-initProvide\"><a href=\"#initInjections-和-initProvide\" class=\"headerlink\" title=\"initInjections 和 initProvide\"></a>initInjections 和 initProvide</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initInjections (vm: Component) &#123;</span><br><span class=\"line\">  // 因为并没有vm._provided此时result 返回的是个 null，也就没有进行defineReactive</span><br><span class=\"line\">  const result = resolveInject(vm.$options.inject, vm)</span><br><span class=\"line\">  if (result) &#123;</span><br><span class=\"line\">    observerState.shouldConvert = false</span><br><span class=\"line\">    Object.keys(result).forEach(key =&gt; &#123;</span><br><span class=\"line\">      /* istanbul ignore else */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">        defineReactive(vm, key, result[key], () =&gt; &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            `Avoid mutating an injected value directly since the changes will be ` +</span><br><span class=\"line\">            `overwritten whenever the provided component re-renders. ` +</span><br><span class=\"line\">            `injection being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        defineReactive(vm, key, result[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    observerState.shouldConvert = true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function initProvide (vm: Component) &#123;</span><br><span class=\"line\">  const provide = vm.$options.provide</span><br><span class=\"line\">  if (provide) &#123;</span><br><span class=\"line\">    vm._provided = typeof provide === &apos;function&apos;</span><br><span class=\"line\">      ? provide.call(vm)</span><br><span class=\"line\">      : provide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initState\"><a href=\"#initState\" class=\"headerlink\" title=\"initState\"></a>initState</h4><p>主要是定义的数据进行defineReactive。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-options\"><a href=\"#Vue-options\" class=\"headerlink\" title=\"Vue options\"></a>Vue options</h2><p>核心代码-&gt;core/index，暴露一个Vue类（core/instance/index），在该文件内发现初始定义了一个Vue：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue (options) &#123;</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中传入的参数options，即我妈实例化Vue对象时传入的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    el: &apos;#data&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再定义完这个Vue类之后执行了5个方法：</p>\n<ul>\n<li>initMixin(Vue)<br>主要为Vue原型定义了<code>_init</code>方法，再实例化过程中会执行<code>_init</code>方法，其中先对options进行了判断，若非组件则会进入<code>mergeOptions</code>方法，该方法是将<code>resolveConstructorOptions(vm.constructor)</code>和<code>options</code>合在一起。<br>那<code>resolveConstructorOptions</code>时干嘛的呢，<code>Ctor.super</code>可想而知是上级，所以主要是来判断该类是否为Vue的子类，进而判断父类中的options有没有发生变化，当Vue混入一些options时<code>superOptions</code>会发生变化，之后就会更新子类的<code>superOptions</code>，Vue混入options的情况：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.extend(options)</span><br><span class=\"line\">Vue.mixin(options)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在<code>mergeOptions</code>根据不同的key采用不同的merge策略，ue提供了一个strats对象，其本身就是一个hook，如果strats有提供特殊的逻辑，就走strats，否则走默认merge逻辑，能很好的区分对待公共处理逻辑与特殊处理逻辑。<br><code>initMixin</code>就是把业务逻辑以及组件的一些特性全都放到了vm.$options中了，后续的操作我们都可以从vm.$options拿到可用的信息，后续动态添加任何东西都可以规范的收入到<code>vm.$options</code>内。<br>后续的执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLifecycle(vm)</span><br><span class=\"line\">initEvents(vm)</span><br><span class=\"line\">initRender(vm)</span><br><span class=\"line\">callHook(vm, &apos;beforeCreate&apos;)</span><br><span class=\"line\">initInjections(vm)</span><br><span class=\"line\">initState(vm)</span><br><span class=\"line\">initProvide(vm)</span><br><span class=\"line\">callHook(vm, &apos;created&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>需要先了解响应式数据原理（订阅-发布模式）：<br><img src=\"https://camo.githubusercontent.com/f60a57d4d89744f5947ca53c6ce80d3105171185/687474703a2f2f696d672e736f756368652e636f6d2f6632652f38613963383033353763623834626161653532383564653437663461656165622e706e67\" alt=\"\"></p>\n<h4 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Observer &#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; // number of vms that have this object as root $data</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor (value: any) &#123;</span><br><span class=\"line\">    this.value = value</span><br><span class=\"line\">    this.dep = new Dep()</span><br><span class=\"line\">    this.vmCount = 0</span><br><span class=\"line\">    def(value, &apos;__ob__&apos;, this)</span><br><span class=\"line\">    if (Array.isArray(value)) &#123;</span><br><span class=\"line\">      if (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.observeArray(value)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Walk through all properties and convert them into</span><br><span class=\"line\">   * getter/setters. This method should only be called when</span><br><span class=\"line\">   * value type is Object.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  walk (obj: Object) &#123;</span><br><span class=\"line\">    const keys = Object.keys(obj)</span><br><span class=\"line\">    for (let i = 0; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">      defineReactive(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Observe a list of Array items.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  observeArray (items: Array&lt;any&gt;) &#123;</span><br><span class=\"line\">    for (let i = 0, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当实例化Observer对象时，会执行<code>walk</code>这个方法, 主要是遍历obj属性, 然后通过<code>Object.defineProperty</code>来定义响应式数据。<br>defineReactive:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function defineReactive (</span><br><span class=\"line\"> obj: Object,</span><br><span class=\"line\"> key: string,</span><br><span class=\"line\"> val: any,</span><br><span class=\"line\"> customSetter?: ?Function,</span><br><span class=\"line\"> shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const dep = new Dep() // 订阅器</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      get: function reactiveGetter () &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        dep.depend()</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        dep.notify()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主要是做了Dep的两个操作:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dep.depend()</span><br><span class=\"line\">dep.notify()</span><br></pre></td></tr></table></figure></p>\n<p>Dom上通过指令或者双大括号绑定的数据, 会添加观察者<code>watcher</code>, 当实例化Watcher的时候 会触发属性的getter方法，此时会调用dep.depend()。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  if (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在进行Watcher实例化时会调用内部get函数, 为其初始化:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">  pushTarget(this) // 就是为Dep.target绑定此watcher实例</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当更新data的时候, 会触发set方法, 执行dep.notify()函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify () &#123;</span><br><span class=\"line\">  // stabilize the subscriber list first</span><br><span class=\"line\">  const subs = this.subs.slice()</span><br><span class=\"line\">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是遍历dep中收集到的watcher实例，进行update()。也就是进行数据更新操作。这也就是简单的数据响应式。<br>其实还需要注意的是： 当数据的getter触发后，会收集依赖，但也不是所有的触发方式都会收集依赖，只有通过watcher触发的getter会收集依赖：<code>if (Dep.target) { dep.depend() }</code>，而所谓的被收集的依赖就是当前watcher，DOM中的数据必须通过watcher来绑定，只通过watcher来读取。</p>\n<h4 id=\"initLifecycle\"><a href=\"#initLifecycle\" class=\"headerlink\" title=\"initLifecycle\"></a>initLifecycle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initLifecycle (vm: Component) &#123;</span><br><span class=\"line\">  const options = vm.$options</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 这里判断是否存在父示例，如果存在，则通过 while 循环，建立所有组建的父子关系</span><br><span class=\"line\">   */</span><br><span class=\"line\">  let parent = options.parent</span><br><span class=\"line\">  if (parent &amp;&amp; !options.abstract) &#123;</span><br><span class=\"line\">    while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class=\"line\">      parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent.$children.push(vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 为组件实例挂载相应属性，并初始化</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm.$parent = parent</span><br><span class=\"line\">  vm.$root = parent ? parent.$root : vm</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$children = []</span><br><span class=\"line\">  vm.$refs = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._watcher = null</span><br><span class=\"line\">  vm._inactive = null</span><br><span class=\"line\">  vm._directInactive = false</span><br><span class=\"line\">  vm._isMounted = false</span><br><span class=\"line\">  vm._isDestroyed = false</span><br><span class=\"line\">  vm._isBeingDestroyed = false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initEvents\"><a href=\"#initEvents\" class=\"headerlink\" title=\"initEvents\"></a>initEvents</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initEvents (vm: Component) &#123;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 创建事件对象，用于存储事件</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm._events = Object.create(null)</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 这里应该是系统事件标识位</span><br><span class=\"line\">   */</span><br><span class=\"line\">  vm._hasHookEvent = false</span><br><span class=\"line\">  // init parent attached events</span><br><span class=\"line\">  // _parentListeners其实是父组件模板中写的v-on</span><br><span class=\"line\">  // 所以下面这段就是将父组件模板中注册的事件放到当前组件实例的listeners里面</span><br><span class=\"line\">  const listeners = vm.$options._parentListeners</span><br><span class=\"line\">  if (listeners) &#123;</span><br><span class=\"line\">    updateComponentListeners(vm, listeners)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initRender\"><a href=\"#initRender\" class=\"headerlink\" title=\"initRender\"></a>initRender</h4><p>主要是为组件实例，初始化一些渲染属性，比如$slots和$createElement等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initRender (vm: Component) &#123;</span><br><span class=\"line\">  vm._vnode = null // the root of the child tree</span><br><span class=\"line\">  const options = vm.$options</span><br><span class=\"line\">  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree</span><br><span class=\"line\">  const renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class=\"line\"></span><br><span class=\"line\">  // 处理组件slot，返回slot插槽对象</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$slots = resolveSlots(options._renderChildren, renderContext)</span><br><span class=\"line\">  vm.$scopedSlots = emptyObject</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false)</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 定义v2.4中新增的$attrs及$listeners属性，需要为其绑定响应式数据更新</span><br><span class=\"line\">   */</span><br><span class=\"line\">   </span><br><span class=\"line\">  const parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore else */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">    defineReactive(vm, &apos;$attrs&apos;, parentData &amp;&amp; parentData.attrs || emptyObject, () =&gt; &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; warn(`$attrs is readonly.`, vm)</span><br><span class=\"line\">    &#125;, true)</span><br><span class=\"line\">    defineReactive(vm, &apos;$listeners&apos;, options._parentListeners || emptyObject, () =&gt; &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; warn(`$listeners is readonly.`, vm)</span><br><span class=\"line\">    &#125;, true)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    defineReactive(vm, &apos;$attrs&apos;, parentData &amp;&amp; parentData.attrs || emptyObject, null, true)</span><br><span class=\"line\">    defineReactive(vm, &apos;$listeners&apos;, options._parentListeners || emptyObject, null, true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"callHook\"><a href=\"#callHook\" class=\"headerlink\" title=\"callHook\"></a>callHook</h4><p>调用钩子函数的方法，即触发之前options中定义的相应的生命周期函数。<br>进行到此处便开始调用了beforeCreate钩子函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function callHook (vm: Component, hook: string) &#123;</span><br><span class=\"line\">  const handlers = vm.$options[hook]</span><br><span class=\"line\">  if (handlers) &#123;</span><br><span class=\"line\">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        handlers[i].call(vm)</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (vm._hasHookEvent) &#123;</span><br><span class=\"line\">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"initInjections-和-initProvide\"><a href=\"#initInjections-和-initProvide\" class=\"headerlink\" title=\"initInjections 和 initProvide\"></a>initInjections 和 initProvide</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initInjections (vm: Component) &#123;</span><br><span class=\"line\">  // 因为并没有vm._provided此时result 返回的是个 null，也就没有进行defineReactive</span><br><span class=\"line\">  const result = resolveInject(vm.$options.inject, vm)</span><br><span class=\"line\">  if (result) &#123;</span><br><span class=\"line\">    observerState.shouldConvert = false</span><br><span class=\"line\">    Object.keys(result).forEach(key =&gt; &#123;</span><br><span class=\"line\">      /* istanbul ignore else */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">        defineReactive(vm, key, result[key], () =&gt; &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            `Avoid mutating an injected value directly since the changes will be ` +</span><br><span class=\"line\">            `overwritten whenever the provided component re-renders. ` +</span><br><span class=\"line\">            `injection being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        defineReactive(vm, key, result[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    observerState.shouldConvert = true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function initProvide (vm: Component) &#123;</span><br><span class=\"line\">  const provide = vm.$options.provide</span><br><span class=\"line\">  if (provide) &#123;</span><br><span class=\"line\">    vm._provided = typeof provide === &apos;function&apos;</span><br><span class=\"line\">      ? provide.call(vm)</span><br><span class=\"line\">      : provide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initState\"><a href=\"#initState\" class=\"headerlink\" title=\"initState\"></a>initState</h4><p>主要是定义的数据进行defineReactive。</p>\n"},{"title":"vultr搭建shadowsock","date":"2020-03-24T01:39:08.000Z","_content":"\n#### 购买服务器\n\n- 注册vultr, [vultr官网](https://www.vultr.com/);\n- 测试速度选择节点;\n- 充值, 最低充值为10刀;\n\n![国内用户可以选择alipay](vultr-ss/vultr.png)\n\n- 搭建服务器, 点击右侧加号, 依次选择Server Location, Server Type(CentOS 7*64), Server Size($5/mon), 然后点击Deploy Now, 等待安装完成;\n\n![安装成功](vultr-ss/running.png)\n\n点击可查看服务器详情:\n\n![](vultr-ss/server-detail.png)\n\n#### 远程服务器配置\n\n","source":"_posts/vultr-ss.md","raw":"---\ntitle: vultr搭建shadowsock\ndate: 2020-03-24 09:39:08\ntags:\n    - '实用'\n    - '工具'\n---\n\n#### 购买服务器\n\n- 注册vultr, [vultr官网](https://www.vultr.com/);\n- 测试速度选择节点;\n- 充值, 最低充值为10刀;\n\n![国内用户可以选择alipay](vultr-ss/vultr.png)\n\n- 搭建服务器, 点击右侧加号, 依次选择Server Location, Server Type(CentOS 7*64), Server Size($5/mon), 然后点击Deploy Now, 等待安装完成;\n\n![安装成功](vultr-ss/running.png)\n\n点击可查看服务器详情:\n\n![](vultr-ss/server-detail.png)\n\n#### 远程服务器配置\n\n","slug":"vultr-ss","published":1,"updated":"2020-04-21T08:53:30.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrpe0017e36k8q2h67pw","content":"<h4 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h4><ul>\n<li>注册vultr, <a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">vultr官网</a>;</li>\n<li>测试速度选择节点;</li>\n<li>充值, 最低充值为10刀;</li>\n</ul>\n<p><img src=\"/2020/03/24/vultr-ss/vultr.png\" alt=\"国内用户可以选择alipay\"></p>\n<ul>\n<li>搭建服务器, 点击右侧加号, 依次选择Server Location, Server Type(CentOS 7*64), Server Size($5/mon), 然后点击Deploy Now, 等待安装完成;</li>\n</ul>\n<p><img src=\"/2020/03/24/vultr-ss/running.png\" alt=\"安装成功\"></p>\n<p>点击可查看服务器详情:</p>\n<p><img src=\"/2020/03/24/vultr-ss/server-detail.png\" alt=\"\"></p>\n<h4 id=\"远程服务器配置\"><a href=\"#远程服务器配置\" class=\"headerlink\" title=\"远程服务器配置\"></a>远程服务器配置</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h4><ul>\n<li>注册vultr, <a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">vultr官网</a>;</li>\n<li>测试速度选择节点;</li>\n<li>充值, 最低充值为10刀;</li>\n</ul>\n<p><img src=\"/2020/03/24/vultr-ss/vultr.png\" alt=\"国内用户可以选择alipay\"></p>\n<ul>\n<li>搭建服务器, 点击右侧加号, 依次选择Server Location, Server Type(CentOS 7*64), Server Size($5/mon), 然后点击Deploy Now, 等待安装完成;</li>\n</ul>\n<p><img src=\"/2020/03/24/vultr-ss/running.png\" alt=\"安装成功\"></p>\n<p>点击可查看服务器详情:</p>\n<p><img src=\"/2020/03/24/vultr-ss/server-detail.png\" alt=\"\"></p>\n<h4 id=\"远程服务器配置\"><a href=\"#远程服务器配置\" class=\"headerlink\" title=\"远程服务器配置\"></a>远程服务器配置</h4>"},{"title":"底部input获得焦点, 页面弹出软键盘时页面上移问题处理","date":"2020-01-15T01:19:12.000Z","_content":"\n在开发时经常会遇到底部输入框的需求, 比如聊天界面, 评论, 直播弹幕等等, 但是在微信小程序内存在一个问题, 在底部`input`获得焦点时页面弹出软键盘页面会整体上移, 不管页面元素是否为`fixed`等.\n\n正常未获得焦点情况:\n![normal](https://upload-images.jianshu.io/upload_images/6080416-965e7d9b93fea702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n获取焦点后：\n![focus](https://upload-images.jianshu.io/upload_images/6080416-bbb25ecc107a5c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n微信官方提供了一个`adjustPosition`属性, 键盘弹起时，是否自动上推页面.\n\n将`input`的`adjust-position`设为`false`之后, 弹出软键盘后页面不会上移, 但是会导致输入框被软键盘覆盖.\n\n```html\n<input className=\"barrage-input\" adjustPosition=\"{false}\" />\n```\n![adjust-position](https://upload-images.jianshu.io/upload_images/6080416-55f0fa43775a3ffd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以需要通过输入框获得焦点, 失去焦点以及软键盘高度变化时获取软键盘高度对`input`位置进行手动设置.\n\n```html\n<View\n  className={[\"barrage-bar\", keyboard_height ? \"untouch-bottom\" : \"\"]}\n  style={{ bottom: keyboard_height + \"px\" }}\n>\n  <View className=\"barrage-bar-inner\">\n    <Input\n      className=\"barrage-input\"\n      value={input_msg}\n      placeholder=\"有疑问？弹幕问老师...\"\n      placeholderStyle=\"color:#999999;\"\n      adjustPosition={false}\n      onInput={this.inputMsgChange.bind(this)}\n      onFocus={this.inputFocus.bind(this)}\n      onBlur={this.inputBlur.bind(this)}\n      onKeyboardHeightChange={this.keyboardHeightChange.bind(this)}\n    ></Input>\n    <View\n      className={[\"btn btn-send\", input_msg.length ? \"btn-can-send\" : \"\"]}\n      onClick={this.sendMessageOnPage.bind(this)}\n    >\n      发送\n    </View>\n  </View>\n</View>\n```\n\n```js\n  inputFocus(e) {\n    // 输入框获取焦点, 通过软键盘高度设置输入框位置\n    this.setState({\n      keyboard_height: e.detail.height\n    });\n  }\n\n  inputBlur(e) {\n    this.setState({\n      keyboard_height: 0\n    });\n  }\n\n  keyboardHeightChange(e) {\n    this.setState({\n      keyboard_height: e.detail.height\n    });\n  }\n```\n最终:\n![](https://upload-images.jianshu.io/upload_images/6080416-7ee8dca6ada06335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/6080416-f921dac1f7f705dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/wx-input.md","raw":"---\ntitle: 底部input获得焦点, 页面弹出软键盘时页面上移问题处理\ndate: 2020-01-15 09:19:12\ntags:\n    - 'wx'\n    - '微信开发'\ncategories: \n    - '微信小程序'\n---\n\n在开发时经常会遇到底部输入框的需求, 比如聊天界面, 评论, 直播弹幕等等, 但是在微信小程序内存在一个问题, 在底部`input`获得焦点时页面弹出软键盘页面会整体上移, 不管页面元素是否为`fixed`等.\n\n正常未获得焦点情况:\n![normal](https://upload-images.jianshu.io/upload_images/6080416-965e7d9b93fea702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n获取焦点后：\n![focus](https://upload-images.jianshu.io/upload_images/6080416-bbb25ecc107a5c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n微信官方提供了一个`adjustPosition`属性, 键盘弹起时，是否自动上推页面.\n\n将`input`的`adjust-position`设为`false`之后, 弹出软键盘后页面不会上移, 但是会导致输入框被软键盘覆盖.\n\n```html\n<input className=\"barrage-input\" adjustPosition=\"{false}\" />\n```\n![adjust-position](https://upload-images.jianshu.io/upload_images/6080416-55f0fa43775a3ffd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以需要通过输入框获得焦点, 失去焦点以及软键盘高度变化时获取软键盘高度对`input`位置进行手动设置.\n\n```html\n<View\n  className={[\"barrage-bar\", keyboard_height ? \"untouch-bottom\" : \"\"]}\n  style={{ bottom: keyboard_height + \"px\" }}\n>\n  <View className=\"barrage-bar-inner\">\n    <Input\n      className=\"barrage-input\"\n      value={input_msg}\n      placeholder=\"有疑问？弹幕问老师...\"\n      placeholderStyle=\"color:#999999;\"\n      adjustPosition={false}\n      onInput={this.inputMsgChange.bind(this)}\n      onFocus={this.inputFocus.bind(this)}\n      onBlur={this.inputBlur.bind(this)}\n      onKeyboardHeightChange={this.keyboardHeightChange.bind(this)}\n    ></Input>\n    <View\n      className={[\"btn btn-send\", input_msg.length ? \"btn-can-send\" : \"\"]}\n      onClick={this.sendMessageOnPage.bind(this)}\n    >\n      发送\n    </View>\n  </View>\n</View>\n```\n\n```js\n  inputFocus(e) {\n    // 输入框获取焦点, 通过软键盘高度设置输入框位置\n    this.setState({\n      keyboard_height: e.detail.height\n    });\n  }\n\n  inputBlur(e) {\n    this.setState({\n      keyboard_height: 0\n    });\n  }\n\n  keyboardHeightChange(e) {\n    this.setState({\n      keyboard_height: e.detail.height\n    });\n  }\n```\n最终:\n![](https://upload-images.jianshu.io/upload_images/6080416-7ee8dca6ada06335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/6080416-f921dac1f7f705dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"wx-input","published":1,"updated":"2020-04-21T08:53:30.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrpf001ce36kzps23mlt","content":"<p>在开发时经常会遇到底部输入框的需求, 比如聊天界面, 评论, 直播弹幕等等, 但是在微信小程序内存在一个问题, 在底部<code>input</code>获得焦点时页面弹出软键盘页面会整体上移, 不管页面元素是否为<code>fixed</code>等.</p>\n<p>正常未获得焦点情况:<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-965e7d9b93fea702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"normal\"></p>\n<p>获取焦点后：<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-bbb25ecc107a5c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"focus\"></p>\n<p>微信官方提供了一个<code>adjustPosition</code>属性, 键盘弹起时，是否自动上推页面.</p>\n<p>将<code>input</code>的<code>adjust-position</code>设为<code>false</code>之后, 弹出软键盘后页面不会上移, 但是会导致输入框被软键盘覆盖.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-input\"</span> <span class=\"attr\">adjustPosition</span>=<span class=\"string\">\"&#123;false&#125;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-55f0fa43775a3ffd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"adjust-position\"></p>\n<p>所以需要通过输入框获得焦点, 失去焦点以及软键盘高度变化时获取软键盘高度对<code>input</code>位置进行手动设置.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">className</span>=<span class=\"string\">&#123;[</span>\"<span class=\"attr\">barrage-bar</span>\", <span class=\"attr\">keyboard_height</span> ? \"<span class=\"attr\">untouch-bottom</span>\" <span class=\"attr\">:</span> \"\"]&#125;</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">bottom:</span> <span class=\"attr\">keyboard_height</span> + \"<span class=\"attr\">px</span>\" &#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-bar-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-input\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;input_msg&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"有疑问？弹幕问老师...\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholderStyle</span>=<span class=\"string\">\"color:#999999;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">adjustPosition</span>=<span class=\"string\">&#123;false&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;this.inputMsgChange.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onFocus</span>=<span class=\"string\">&#123;this.inputFocus.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onBlur</span>=<span class=\"string\">&#123;this.inputBlur.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onKeyboardHeightChange</span>=<span class=\"string\">&#123;this.keyboardHeightChange.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">className</span>=<span class=\"string\">&#123;[</span>\"<span class=\"attr\">btn</span> <span class=\"attr\">btn-send</span>\", <span class=\"attr\">input_msg.length</span> ? \"<span class=\"attr\">btn-can-send</span>\" <span class=\"attr\">:</span> \"\"]&#125;</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.sendMessageOnPage.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      发送</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputFocus(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输入框获取焦点, 通过软键盘高度设置输入框位置</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: e.detail.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inputBlur(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">keyboardHeightChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: e.detail.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终:<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-7ee8dca6ada06335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-f921dac1f7f705dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发时经常会遇到底部输入框的需求, 比如聊天界面, 评论, 直播弹幕等等, 但是在微信小程序内存在一个问题, 在底部<code>input</code>获得焦点时页面弹出软键盘页面会整体上移, 不管页面元素是否为<code>fixed</code>等.</p>\n<p>正常未获得焦点情况:<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-965e7d9b93fea702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"normal\"></p>\n<p>获取焦点后：<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-bbb25ecc107a5c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"focus\"></p>\n<p>微信官方提供了一个<code>adjustPosition</code>属性, 键盘弹起时，是否自动上推页面.</p>\n<p>将<code>input</code>的<code>adjust-position</code>设为<code>false</code>之后, 弹出软键盘后页面不会上移, 但是会导致输入框被软键盘覆盖.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-input\"</span> <span class=\"attr\">adjustPosition</span>=<span class=\"string\">\"&#123;false&#125;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-55f0fa43775a3ffd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"adjust-position\"></p>\n<p>所以需要通过输入框获得焦点, 失去焦点以及软键盘高度变化时获取软键盘高度对<code>input</code>位置进行手动设置.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">className</span>=<span class=\"string\">&#123;[</span>\"<span class=\"attr\">barrage-bar</span>\", <span class=\"attr\">keyboard_height</span> ? \"<span class=\"attr\">untouch-bottom</span>\" <span class=\"attr\">:</span> \"\"]&#125;</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">bottom:</span> <span class=\"attr\">keyboard_height</span> + \"<span class=\"attr\">px</span>\" &#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-bar-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">className</span>=<span class=\"string\">\"barrage-input\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;input_msg&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"有疑问？弹幕问老师...\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholderStyle</span>=<span class=\"string\">\"color:#999999;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">adjustPosition</span>=<span class=\"string\">&#123;false&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;this.inputMsgChange.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onFocus</span>=<span class=\"string\">&#123;this.inputFocus.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onBlur</span>=<span class=\"string\">&#123;this.inputBlur.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onKeyboardHeightChange</span>=<span class=\"string\">&#123;this.keyboardHeightChange.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">className</span>=<span class=\"string\">&#123;[</span>\"<span class=\"attr\">btn</span> <span class=\"attr\">btn-send</span>\", <span class=\"attr\">input_msg.length</span> ? \"<span class=\"attr\">btn-can-send</span>\" <span class=\"attr\">:</span> \"\"]&#125;</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.sendMessageOnPage.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      发送</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputFocus(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输入框获取焦点, 通过软键盘高度设置输入框位置</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: e.detail.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inputBlur(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">keyboardHeightChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    keyboard_height: e.detail.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终:<br><img src=\"https://upload-images.jianshu.io/upload_images/6080416-7ee8dca6ada06335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6080416-f921dac1f7f705dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"2019总结，2020要开心","urlname":"hggpph","date":"2020-01-04T09:49:34.000Z","_content":"今年发生了很多事，多得我也想不起来了。<br />一月，年初成功的约到了九价疫苗，打完了三针HPV九价，希望以后健健康康。<br />二月，农历年后开始搞起了副业，虽然并没有什么成效，但还是继续坚持，好事多磨，没有什么事是一帆风顺的。<br />三月，买了新手机，于是穷到吃土，但还是花了好多钱在吃吃喝喝上。<br />四月，经历了一年的空白期终于下定决心去再考科三，安排假期安排时间但是最后都没有如意，不是其他人没有安排好就是凑不到。<br />五月，开始周末经常出门逛一逛，开始每周自律计划，但是最后还是没有坚持住，开始找公司附近的房子，然后搬了新的房子，大概步行7,8分钟，离地铁站3分钟，但是没有电梯也没有洗衣机，上半年还会经常做做饭，包包饺子，下半年很久没有开火了。<br />六月，开始和超级温柔的同事小姐姐熟悉，一起约饭，话说小姐姐请了我好多顿饭我都没回礼，在优衣库买了一件小口袋里是柯哀的T恤，不开心，加了很多班，吃了很多外卖。<br />七月，生日月，还是会经常做饭带到公司去吃，收到了妈妈的生日祝福，也开始经常吃饭吃零食点外卖，看了好看的电影，一个人吃了生日蛋糕。<br />八月，有大大的台风，吃了很多零食，开始开发新的小程序，买了好多香水小样，胖了很多。<br />九月，满城桂花香，秋天到了，发生了一点小摩擦，认同感很重要但是千万不要强迫别人接受自己的观念，学会正面面对矛盾是一件很重要的事，同事问我要不要养小猫猫，我想，可我连自己都养不好，还没条件对其他生命负责，想着最后还是要看着他们离开其实对自己对他们都是一件残忍的事情，宁愿从未拥有。温柔的同事小姐姐邀请我去她家做客，吃东北菜，送了我好几件衣服，真的太温柔了。<br />十月，没抢到30号晚上和1号的票，国庆小长假第一天去公司看了阅兵，一个人去看了电影，2号回家过了小长假，以后一定要好好对父母对自己，买了数位板想学画画，但是用了几次就闲置了。同事说要送我小守宫，开心，小蕾蕾送了大闸蟹，谢谢可爱的同事小伙伴们~<br />十一月，为了双十一活动疯狂盖楼，不小心还被人举报了，新成员小oo终于领回家了，周末部门大家一起去了团建拍了很多照，小明也来了杭州一起聚了聚，突然很想家里，觉得很累，不知道自己一个人坚持是为了什么，感觉自己就没有什么顺利的事情，有时候不说不做都是一种错误。换了工位，换了工牌，又要重新适应。终于重新开始练车，连着两个周末周六日都去练车。<br />十二月，经历2年终于把我的驾照拿出来了。妹妹到杭州和我一起过生日，我们逛了西湖，天气很好，心情很平和，但我什么好的都给不了她。和同事一起过了好玩的圣诞节，收到了可爱的圣诞礼物。来了超级可爱的新同事，很甜。喜欢的唱见确诊了癌症，爷爷生病还住在ICU，离春节那么近。<br />今年坚持了一段时间早睡早起以及晨练，然后又懈怠了，希望明年能继续坚持。<br />每次一些不好的想法最后总会发生，新的一年要多想想一些好的事情。<br />今年依旧是继续等待结局的一年，依旧是坚持贫穷的一年，依旧是有很多想法但又三分热度的一年，学数学，学画画，做运动，拍视频，新的一年要多学习多读书多运动，毕竟已经24岁了。<br />人类在疾病面前真的很渺小。<br />愿一直做一个善良的人。<br />愿年年身体健康，万事如意。\n\n","source":"_posts/yuque/2019总结，2020要开心.md","raw":"\n---\n\ntitle: 2019总结，2020要开心\n\nurlname: hggpph\n\ndate: 2020-01-04 17:49:34 +0800\n\ntags: []\n\ncategories: []\n\n---\n今年发生了很多事，多得我也想不起来了。<br />一月，年初成功的约到了九价疫苗，打完了三针HPV九价，希望以后健健康康。<br />二月，农历年后开始搞起了副业，虽然并没有什么成效，但还是继续坚持，好事多磨，没有什么事是一帆风顺的。<br />三月，买了新手机，于是穷到吃土，但还是花了好多钱在吃吃喝喝上。<br />四月，经历了一年的空白期终于下定决心去再考科三，安排假期安排时间但是最后都没有如意，不是其他人没有安排好就是凑不到。<br />五月，开始周末经常出门逛一逛，开始每周自律计划，但是最后还是没有坚持住，开始找公司附近的房子，然后搬了新的房子，大概步行7,8分钟，离地铁站3分钟，但是没有电梯也没有洗衣机，上半年还会经常做做饭，包包饺子，下半年很久没有开火了。<br />六月，开始和超级温柔的同事小姐姐熟悉，一起约饭，话说小姐姐请了我好多顿饭我都没回礼，在优衣库买了一件小口袋里是柯哀的T恤，不开心，加了很多班，吃了很多外卖。<br />七月，生日月，还是会经常做饭带到公司去吃，收到了妈妈的生日祝福，也开始经常吃饭吃零食点外卖，看了好看的电影，一个人吃了生日蛋糕。<br />八月，有大大的台风，吃了很多零食，开始开发新的小程序，买了好多香水小样，胖了很多。<br />九月，满城桂花香，秋天到了，发生了一点小摩擦，认同感很重要但是千万不要强迫别人接受自己的观念，学会正面面对矛盾是一件很重要的事，同事问我要不要养小猫猫，我想，可我连自己都养不好，还没条件对其他生命负责，想着最后还是要看着他们离开其实对自己对他们都是一件残忍的事情，宁愿从未拥有。温柔的同事小姐姐邀请我去她家做客，吃东北菜，送了我好几件衣服，真的太温柔了。<br />十月，没抢到30号晚上和1号的票，国庆小长假第一天去公司看了阅兵，一个人去看了电影，2号回家过了小长假，以后一定要好好对父母对自己，买了数位板想学画画，但是用了几次就闲置了。同事说要送我小守宫，开心，小蕾蕾送了大闸蟹，谢谢可爱的同事小伙伴们~<br />十一月，为了双十一活动疯狂盖楼，不小心还被人举报了，新成员小oo终于领回家了，周末部门大家一起去了团建拍了很多照，小明也来了杭州一起聚了聚，突然很想家里，觉得很累，不知道自己一个人坚持是为了什么，感觉自己就没有什么顺利的事情，有时候不说不做都是一种错误。换了工位，换了工牌，又要重新适应。终于重新开始练车，连着两个周末周六日都去练车。<br />十二月，经历2年终于把我的驾照拿出来了。妹妹到杭州和我一起过生日，我们逛了西湖，天气很好，心情很平和，但我什么好的都给不了她。和同事一起过了好玩的圣诞节，收到了可爱的圣诞礼物。来了超级可爱的新同事，很甜。喜欢的唱见确诊了癌症，爷爷生病还住在ICU，离春节那么近。<br />今年坚持了一段时间早睡早起以及晨练，然后又懈怠了，希望明年能继续坚持。<br />每次一些不好的想法最后总会发生，新的一年要多想想一些好的事情。<br />今年依旧是继续等待结局的一年，依旧是坚持贫穷的一年，依旧是有很多想法但又三分热度的一年，学数学，学画画，做运动，拍视频，新的一年要多学习多读书多运动，毕竟已经24岁了。<br />人类在疾病面前真的很渺小。<br />愿一直做一个善良的人。<br />愿年年身体健康，万事如意。\n\n","slug":"yuque/2019总结，2020要开心","published":1,"updated":"2020-04-22T02:25:07.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqo002oe36kcv6rjuu0","content":"<p>今年发生了很多事，多得我也想不起来了。<br>一月，年初成功的约到了九价疫苗，打完了三针HPV九价，希望以后健健康康。<br>二月，农历年后开始搞起了副业，虽然并没有什么成效，但还是继续坚持，好事多磨，没有什么事是一帆风顺的。<br>三月，买了新手机，于是穷到吃土，但还是花了好多钱在吃吃喝喝上。<br>四月，经历了一年的空白期终于下定决心去再考科三，安排假期安排时间但是最后都没有如意，不是其他人没有安排好就是凑不到。<br>五月，开始周末经常出门逛一逛，开始每周自律计划，但是最后还是没有坚持住，开始找公司附近的房子，然后搬了新的房子，大概步行7,8分钟，离地铁站3分钟，但是没有电梯也没有洗衣机，上半年还会经常做做饭，包包饺子，下半年很久没有开火了。<br>六月，开始和超级温柔的同事小姐姐熟悉，一起约饭，话说小姐姐请了我好多顿饭我都没回礼，在优衣库买了一件小口袋里是柯哀的T恤，不开心，加了很多班，吃了很多外卖。<br>七月，生日月，还是会经常做饭带到公司去吃，收到了妈妈的生日祝福，也开始经常吃饭吃零食点外卖，看了好看的电影，一个人吃了生日蛋糕。<br>八月，有大大的台风，吃了很多零食，开始开发新的小程序，买了好多香水小样，胖了很多。<br>九月，满城桂花香，秋天到了，发生了一点小摩擦，认同感很重要但是千万不要强迫别人接受自己的观念，学会正面面对矛盾是一件很重要的事，同事问我要不要养小猫猫，我想，可我连自己都养不好，还没条件对其他生命负责，想着最后还是要看着他们离开其实对自己对他们都是一件残忍的事情，宁愿从未拥有。温柔的同事小姐姐邀请我去她家做客，吃东北菜，送了我好几件衣服，真的太温柔了。<br>十月，没抢到30号晚上和1号的票，国庆小长假第一天去公司看了阅兵，一个人去看了电影，2号回家过了小长假，以后一定要好好对父母对自己，买了数位板想学画画，但是用了几次就闲置了。同事说要送我小守宫，开心，小蕾蕾送了大闸蟹，谢谢可爱的同事小伙伴们~<br>十一月，为了双十一活动疯狂盖楼，不小心还被人举报了，新成员小oo终于领回家了，周末部门大家一起去了团建拍了很多照，小明也来了杭州一起聚了聚，突然很想家里，觉得很累，不知道自己一个人坚持是为了什么，感觉自己就没有什么顺利的事情，有时候不说不做都是一种错误。换了工位，换了工牌，又要重新适应。终于重新开始练车，连着两个周末周六日都去练车。<br>十二月，经历2年终于把我的驾照拿出来了。妹妹到杭州和我一起过生日，我们逛了西湖，天气很好，心情很平和，但我什么好的都给不了她。和同事一起过了好玩的圣诞节，收到了可爱的圣诞礼物。来了超级可爱的新同事，很甜。喜欢的唱见确诊了癌症，爷爷生病还住在ICU，离春节那么近。<br>今年坚持了一段时间早睡早起以及晨练，然后又懈怠了，希望明年能继续坚持。<br>每次一些不好的想法最后总会发生，新的一年要多想想一些好的事情。<br>今年依旧是继续等待结局的一年，依旧是坚持贫穷的一年，依旧是有很多想法但又三分热度的一年，学数学，学画画，做运动，拍视频，新的一年要多学习多读书多运动，毕竟已经24岁了。<br>人类在疾病面前真的很渺小。<br>愿一直做一个善良的人。<br>愿年年身体健康，万事如意。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年发生了很多事，多得我也想不起来了。<br>一月，年初成功的约到了九价疫苗，打完了三针HPV九价，希望以后健健康康。<br>二月，农历年后开始搞起了副业，虽然并没有什么成效，但还是继续坚持，好事多磨，没有什么事是一帆风顺的。<br>三月，买了新手机，于是穷到吃土，但还是花了好多钱在吃吃喝喝上。<br>四月，经历了一年的空白期终于下定决心去再考科三，安排假期安排时间但是最后都没有如意，不是其他人没有安排好就是凑不到。<br>五月，开始周末经常出门逛一逛，开始每周自律计划，但是最后还是没有坚持住，开始找公司附近的房子，然后搬了新的房子，大概步行7,8分钟，离地铁站3分钟，但是没有电梯也没有洗衣机，上半年还会经常做做饭，包包饺子，下半年很久没有开火了。<br>六月，开始和超级温柔的同事小姐姐熟悉，一起约饭，话说小姐姐请了我好多顿饭我都没回礼，在优衣库买了一件小口袋里是柯哀的T恤，不开心，加了很多班，吃了很多外卖。<br>七月，生日月，还是会经常做饭带到公司去吃，收到了妈妈的生日祝福，也开始经常吃饭吃零食点外卖，看了好看的电影，一个人吃了生日蛋糕。<br>八月，有大大的台风，吃了很多零食，开始开发新的小程序，买了好多香水小样，胖了很多。<br>九月，满城桂花香，秋天到了，发生了一点小摩擦，认同感很重要但是千万不要强迫别人接受自己的观念，学会正面面对矛盾是一件很重要的事，同事问我要不要养小猫猫，我想，可我连自己都养不好，还没条件对其他生命负责，想着最后还是要看着他们离开其实对自己对他们都是一件残忍的事情，宁愿从未拥有。温柔的同事小姐姐邀请我去她家做客，吃东北菜，送了我好几件衣服，真的太温柔了。<br>十月，没抢到30号晚上和1号的票，国庆小长假第一天去公司看了阅兵，一个人去看了电影，2号回家过了小长假，以后一定要好好对父母对自己，买了数位板想学画画，但是用了几次就闲置了。同事说要送我小守宫，开心，小蕾蕾送了大闸蟹，谢谢可爱的同事小伙伴们~<br>十一月，为了双十一活动疯狂盖楼，不小心还被人举报了，新成员小oo终于领回家了，周末部门大家一起去了团建拍了很多照，小明也来了杭州一起聚了聚，突然很想家里，觉得很累，不知道自己一个人坚持是为了什么，感觉自己就没有什么顺利的事情，有时候不说不做都是一种错误。换了工位，换了工牌，又要重新适应。终于重新开始练车，连着两个周末周六日都去练车。<br>十二月，经历2年终于把我的驾照拿出来了。妹妹到杭州和我一起过生日，我们逛了西湖，天气很好，心情很平和，但我什么好的都给不了她。和同事一起过了好玩的圣诞节，收到了可爱的圣诞礼物。来了超级可爱的新同事，很甜。喜欢的唱见确诊了癌症，爷爷生病还住在ICU，离春节那么近。<br>今年坚持了一段时间早睡早起以及晨练，然后又懈怠了，希望明年能继续坚持。<br>每次一些不好的想法最后总会发生，新的一年要多想想一些好的事情。<br>今年依旧是继续等待结局的一年，依旧是坚持贫穷的一年，依旧是有很多想法但又三分热度的一年，学数学，学画画，做运动，拍视频，新的一年要多学习多读书多运动，毕竟已经24岁了。<br>人类在疾病面前真的很渺小。<br>愿一直做一个善良的人。<br>愿年年身体健康，万事如意。</p>\n"},{"title":"2020.03.18 QS(04.17更新)","urlname":"zdoq3p","date":"2020-03-18T02:19:24.000Z","_content":"tags: [daily]\ncategories: [Daily_QS]\ncover:\n---<br /><!-- more --><br />\n\n<a name=\"Hr5Na\"></a>\n#### 1、$.ajax请求方法为post时传参问题\n\n<br />原先：发现data参数是直接以拼接的方式传递，导致后台无法正确获取参数。<br />\n\n```javascript\n  $.ajax({\n    type: \"POST\",\n    url,\n    dataType: \"json\",\n    data: params,\n    headers: {\n      Authorization: \"Bearer \" + JSON.parse(_this.token),\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"Content-Type\": \"application/json\"\n    },\n    success(res) {}\n  })\n```\n解决：<br />去掉`dataType: \"json\"`和`\"Content-Type\": \"application/json\"`。<br />\n\n<a name=\"6qOKE\"></a>\n#### 2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1584947869189-6c02b1cc-d402-4ae3-857a-3194591796cc.png#align=left&display=inline&height=407&margin=%5Bobject%20Object%5D&name=image.png&originHeight=407&originWidth=754&size=164405&status=done&style=none&width=754)<br />\n\n<a name=\"Dirb9\"></a>\n#### 3、yuque-hexo升级后拉取语雀文章list包权限错误\n\n<br />![yuque-hexo-error.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1584949994741-fcc831b7-3456-4262-8e2b-279bd2d8bd96.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&name=yuque-hexo-error.PNG&originHeight=59&originWidth=719&size=5650&status=done&style=none&width=719)<br />解决：<br />在package.json的yuqueConfig新增私人token配置。<br />![yuque-hexo-token.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1584950263184-edaa0783-73e4-4d42-aadc-8d4d65f4316b.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=yuque-hexo-token.png&originHeight=159&originWidth=432&size=7027&status=done&style=none&width=432)<br />\n--> [个人token获取](https://www.yuque.com/yuque/developer/api#785a3731) <--<br />\n\n<a name=\"BV7Yf\"></a>\n#### 4、hexo dev时报错\n\n<br />YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 8<br />\n原因：\n\n- _config.yml文件内英文冒号后面需要有一个空格\n- 文章标题内不能存在特殊标识比如我在标题内加了[]方括号也会导致错误\n\n\n\n<a name=\"9J9mb\"></a>\n#### 5、在使用[yuque-hexo](https://github.com/x-cold/yuque-hexo)拉取文章时会出现图片加载失败\nyuque的防盗链问题，解决方法在hexo页面的模板文件头部增加：[yuque-hexo/issue/#41](https://github.com/x-cold/yuque-hexo/issues/41)\n```html\n<meta name=\"referrer\" content=\"no-referrer\" />\n```\nReferrer Policy(引用策略)<br />引用策略就是从一个文档发出请求时，是否在请求头部定义 Referrer 的设置。<br />\n很多网站的防盗链机制都是用头部定义 Referrer 来判断是否是盗链。<br />\nReferrer Policy 的值\n\n- 空字符串：默认值，一般浏览器的默认值是 no-referrer-when-downgrade；\n- no-referrer：所有请求不发送 referrer；\n- no-referrer-when-downgrade：当请求安全级别下降时不发送 referrer。目前，只有一种情况会发生安全级别下降，即从 HTTPS 到 HTTP。HTTPS 到 HTTP 的资源引用和链接跳转都不会发送 referrer\n- same-origin：对于同源的链接和引用发送referrer，其他的不会，同源的意思是指同一个域名且同一协议；\n- origin：会发送 referrer，但只会发送源信息，源信息包括访问协议和域名；\n- strict-origin：相当于 origin 和 no-referrer-when-downgrade 的 AND 合体，即在安全级别下降时不发送 referrer；安全级别未下降时发送源信息，新加的标准，有些浏览器可能还不支持；\n- origin-when-cross-origin：相当于 origin 和 same-origin 的 OR 合体，同源的链接和引用，会发送完全的 referrer 信息；但非同源链接和引用时，只发送源信息；\n- strict-origin-when-cross-origin：同源的链接和引用，会发送 referrer，安全级别下降时不发送 referrer，其它情况下发送源信息（New）；yarn\n- unsafe-url：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息；\n\n\n<br />引用策略说明转自：[Web 页面 Meta 的 Referrer Policy](https://www.jianshu.com/p/b12c5b4fd9df)<br />\n\n<a name=\"Pf1cV\"></a>\n#### 6、更换远端GitHub库之后出现pull和push失败的问题\n报错：fatal: refusing to merge unrelated histories<br />将本地的库更换远端之后，使用然后本地库去推送到远端， 远端库觉得这个本地库跟自己不相干， 所以告知无法合并。\n\n- 最好将远端库重新clone下来，把本地代码放进去再推送。\n- 当然也可以强行合并\n\n`git pull origin master --allow-unrelated-histories`，后面加上` --allow-unrelated-histories` ， 把两段不相干的 分支进行强行合并。\n\n","source":"_posts/yuque/2020.03.18 QS(04.17更新).md","raw":"\n---\n\ntitle: 2020.03.18 QS(04.17更新)\n\nurlname: zdoq3p\n\ndate: 2020-03-18 10:19:24 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [daily]\ncategories: [Daily_QS]\ncover:\n---<br /><!-- more --><br />\n\n<a name=\"Hr5Na\"></a>\n#### 1、$.ajax请求方法为post时传参问题\n\n<br />原先：发现data参数是直接以拼接的方式传递，导致后台无法正确获取参数。<br />\n\n```javascript\n  $.ajax({\n    type: \"POST\",\n    url,\n    dataType: \"json\",\n    data: params,\n    headers: {\n      Authorization: \"Bearer \" + JSON.parse(_this.token),\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"Content-Type\": \"application/json\"\n    },\n    success(res) {}\n  })\n```\n解决：<br />去掉`dataType: \"json\"`和`\"Content-Type\": \"application/json\"`。<br />\n\n<a name=\"6qOKE\"></a>\n#### 2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1584947869189-6c02b1cc-d402-4ae3-857a-3194591796cc.png#align=left&display=inline&height=407&margin=%5Bobject%20Object%5D&name=image.png&originHeight=407&originWidth=754&size=164405&status=done&style=none&width=754)<br />\n\n<a name=\"Dirb9\"></a>\n#### 3、yuque-hexo升级后拉取语雀文章list包权限错误\n\n<br />![yuque-hexo-error.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1584949994741-fcc831b7-3456-4262-8e2b-279bd2d8bd96.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&name=yuque-hexo-error.PNG&originHeight=59&originWidth=719&size=5650&status=done&style=none&width=719)<br />解决：<br />在package.json的yuqueConfig新增私人token配置。<br />![yuque-hexo-token.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1584950263184-edaa0783-73e4-4d42-aadc-8d4d65f4316b.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=yuque-hexo-token.png&originHeight=159&originWidth=432&size=7027&status=done&style=none&width=432)<br />\n--> [个人token获取](https://www.yuque.com/yuque/developer/api#785a3731) <--<br />\n\n<a name=\"BV7Yf\"></a>\n#### 4、hexo dev时报错\n\n<br />YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 8<br />\n原因：\n\n- _config.yml文件内英文冒号后面需要有一个空格\n- 文章标题内不能存在特殊标识比如我在标题内加了[]方括号也会导致错误\n\n\n\n<a name=\"9J9mb\"></a>\n#### 5、在使用[yuque-hexo](https://github.com/x-cold/yuque-hexo)拉取文章时会出现图片加载失败\nyuque的防盗链问题，解决方法在hexo页面的模板文件头部增加：[yuque-hexo/issue/#41](https://github.com/x-cold/yuque-hexo/issues/41)\n```html\n<meta name=\"referrer\" content=\"no-referrer\" />\n```\nReferrer Policy(引用策略)<br />引用策略就是从一个文档发出请求时，是否在请求头部定义 Referrer 的设置。<br />\n很多网站的防盗链机制都是用头部定义 Referrer 来判断是否是盗链。<br />\nReferrer Policy 的值\n\n- 空字符串：默认值，一般浏览器的默认值是 no-referrer-when-downgrade；\n- no-referrer：所有请求不发送 referrer；\n- no-referrer-when-downgrade：当请求安全级别下降时不发送 referrer。目前，只有一种情况会发生安全级别下降，即从 HTTPS 到 HTTP。HTTPS 到 HTTP 的资源引用和链接跳转都不会发送 referrer\n- same-origin：对于同源的链接和引用发送referrer，其他的不会，同源的意思是指同一个域名且同一协议；\n- origin：会发送 referrer，但只会发送源信息，源信息包括访问协议和域名；\n- strict-origin：相当于 origin 和 no-referrer-when-downgrade 的 AND 合体，即在安全级别下降时不发送 referrer；安全级别未下降时发送源信息，新加的标准，有些浏览器可能还不支持；\n- origin-when-cross-origin：相当于 origin 和 same-origin 的 OR 合体，同源的链接和引用，会发送完全的 referrer 信息；但非同源链接和引用时，只发送源信息；\n- strict-origin-when-cross-origin：同源的链接和引用，会发送 referrer，安全级别下降时不发送 referrer，其它情况下发送源信息（New）；yarn\n- unsafe-url：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息；\n\n\n<br />引用策略说明转自：[Web 页面 Meta 的 Referrer Policy](https://www.jianshu.com/p/b12c5b4fd9df)<br />\n\n<a name=\"Pf1cV\"></a>\n#### 6、更换远端GitHub库之后出现pull和push失败的问题\n报错：fatal: refusing to merge unrelated histories<br />将本地的库更换远端之后，使用然后本地库去推送到远端， 远端库觉得这个本地库跟自己不相干， 所以告知无法合并。\n\n- 最好将远端库重新clone下来，把本地代码放进去再推送。\n- 当然也可以强行合并\n\n`git pull origin master --allow-unrelated-histories`，后面加上` --allow-unrelated-histories` ， 把两段不相干的 分支进行强行合并。\n\n","slug":"yuque/2020.03.18 QS(04.17更新)","published":1,"updated":"2020-04-22T02:25:07.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqo002pe36k9vbr0w88","content":"<p>tags: [daily]<br>categories: [Daily_QS]<br>cover:<br>—<br><a id=\"more\"></a><br></p>\n<p><a name=\"Hr5Na\"></a></p>\n<h4 id=\"1、-ajax请求方法为post时传参问题\"><a href=\"#1、-ajax请求方法为post时传参问题\" class=\"headerlink\" title=\"1、$.ajax请求方法为post时传参问题\"></a>1、$.ajax请求方法为post时传参问题</h4><p><br>原先：发现data参数是直接以拼接的方式传递，导致后台无法正确获取参数。<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url,</span><br><span class=\"line\">  dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  data: params,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    Authorization: <span class=\"string\">\"Bearer \"</span> + <span class=\"built_in\">JSON</span>.parse(_this.token),</span><br><span class=\"line\">    <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">\"XMLHttpRequest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success(res) &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>解决：<br>去掉<code>dataType: &quot;json&quot;</code>和<code>&quot;Content-Type&quot;: &quot;application/json&quot;</code>。<br></p>\n<p><a name=\"6qOKE\"></a></p>\n<h4 id=\"2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\"><a href=\"#2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\" class=\"headerlink\" title=\"2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\"></a>2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网</h4><p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584947869189-6c02b1cc-d402-4ae3-857a-3194591796cc.png#align=left&amp;display=inline&amp;height=407&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=407&amp;originWidth=754&amp;size=164405&amp;status=done&amp;style=none&amp;width=754\" alt=\"image.png\"><br></p>\n<p><a name=\"Dirb9\"></a></p>\n<h4 id=\"3、yuque-hexo升级后拉取语雀文章list包权限错误\"><a href=\"#3、yuque-hexo升级后拉取语雀文章list包权限错误\" class=\"headerlink\" title=\"3、yuque-hexo升级后拉取语雀文章list包权限错误\"></a>3、yuque-hexo升级后拉取语雀文章list包权限错误</h4><p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584949994741-fcc831b7-3456-4262-8e2b-279bd2d8bd96.png#align=left&amp;display=inline&amp;height=59&amp;margin=%5Bobject%20Object%5D&amp;name=yuque-hexo-error.PNG&amp;originHeight=59&amp;originWidth=719&amp;size=5650&amp;status=done&amp;style=none&amp;width=719\" alt=\"yuque-hexo-error.PNG\"><br>解决：<br>在package.json的yuqueConfig新增私人token配置。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584950263184-edaa0783-73e4-4d42-aadc-8d4d65f4316b.png#align=left&amp;display=inline&amp;height=159&amp;margin=%5Bobject%20Object%5D&amp;name=yuque-hexo-token.png&amp;originHeight=159&amp;originWidth=432&amp;size=7027&amp;status=done&amp;style=none&amp;width=432\" alt=\"yuque-hexo-token.png\"><br><br>–&gt; <a href=\"https://www.yuque.com/yuque/developer/api#785a3731\" target=\"_blank\" rel=\"noopener\">个人token获取</a> &lt;–<br></p>\n<p><a name=\"BV7Yf\"></a></p>\n<h4 id=\"4、hexo-dev时报错\"><a href=\"#4、hexo-dev时报错\" class=\"headerlink\" title=\"4、hexo dev时报错\"></a>4、hexo dev时报错</h4><p><br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 8<br><br>原因：</p>\n<ul>\n<li>_config.yml文件内英文冒号后面需要有一个空格</li>\n<li>文章标题内不能存在特殊标识比如我在标题内加了[]方括号也会导致错误</li>\n</ul>\n<p><a name=\"9J9mb\"></a></p>\n<h4 id=\"5、在使用yuque-hexo拉取文章时会出现图片加载失败\"><a href=\"#5、在使用yuque-hexo拉取文章时会出现图片加载失败\" class=\"headerlink\" title=\"5、在使用yuque-hexo拉取文章时会出现图片加载失败\"></a>5、在使用<a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener\">yuque-hexo</a>拉取文章时会出现图片加载失败</h4><p>yuque的防盗链问题，解决方法在hexo页面的模板文件头部增加：<a href=\"https://github.com/x-cold/yuque-hexo/issues/41\" target=\"_blank\" rel=\"noopener\">yuque-hexo/issue/#41</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"referrer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-referrer\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Referrer Policy(引用策略)<br>引用策略就是从一个文档发出请求时，是否在请求头部定义 Referrer 的设置。<br><br>很多网站的防盗链机制都是用头部定义 Referrer 来判断是否是盗链。<br><br>Referrer Policy 的值</p>\n<ul>\n<li>空字符串：默认值，一般浏览器的默认值是 no-referrer-when-downgrade；</li>\n<li>no-referrer：所有请求不发送 referrer；</li>\n<li>no-referrer-when-downgrade：当请求安全级别下降时不发送 referrer。目前，只有一种情况会发生安全级别下降，即从 HTTPS 到 HTTP。HTTPS 到 HTTP 的资源引用和链接跳转都不会发送 referrer</li>\n<li>same-origin：对于同源的链接和引用发送referrer，其他的不会，同源的意思是指同一个域名且同一协议；</li>\n<li>origin：会发送 referrer，但只会发送源信息，源信息包括访问协议和域名；</li>\n<li>strict-origin：相当于 origin 和 no-referrer-when-downgrade 的 AND 合体，即在安全级别下降时不发送 referrer；安全级别未下降时发送源信息，新加的标准，有些浏览器可能还不支持；</li>\n<li>origin-when-cross-origin：相当于 origin 和 same-origin 的 OR 合体，同源的链接和引用，会发送完全的 referrer 信息；但非同源链接和引用时，只发送源信息；</li>\n<li>strict-origin-when-cross-origin：同源的链接和引用，会发送 referrer，安全级别下降时不发送 referrer，其它情况下发送源信息（New）；yarn</li>\n<li>unsafe-url：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息；</li>\n</ul>\n<p><br>引用策略说明转自：<a href=\"https://www.jianshu.com/p/b12c5b4fd9df\" target=\"_blank\" rel=\"noopener\">Web 页面 Meta 的 Referrer Policy</a><br></p>\n<p><a name=\"Pf1cV\"></a></p>\n<h4 id=\"6、更换远端GitHub库之后出现pull和push失败的问题\"><a href=\"#6、更换远端GitHub库之后出现pull和push失败的问题\" class=\"headerlink\" title=\"6、更换远端GitHub库之后出现pull和push失败的问题\"></a>6、更换远端GitHub库之后出现pull和push失败的问题</h4><p>报错：fatal: refusing to merge unrelated histories<br>将本地的库更换远端之后，使用然后本地库去推送到远端， 远端库觉得这个本地库跟自己不相干， 所以告知无法合并。</p>\n<ul>\n<li>最好将远端库重新clone下来，把本地代码放进去再推送。</li>\n<li>当然也可以强行合并</li>\n</ul>\n<p><code>git pull origin master --allow-unrelated-histories</code>，后面加上<code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并。</p>\n","site":{"data":{}},"excerpt":"<p>tags: [daily]<br>categories: [Daily_QS]<br>cover:<br>—<br></p>","more":"<br><p></p>\n<p><a name=\"Hr5Na\"></a></p>\n<h4 id=\"1、-ajax请求方法为post时传参问题\"><a href=\"#1、-ajax请求方法为post时传参问题\" class=\"headerlink\" title=\"1、$.ajax请求方法为post时传参问题\"></a>1、$.ajax请求方法为post时传参问题</h4><p><br>原先：发现data参数是直接以拼接的方式传递，导致后台无法正确获取参数。<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url,</span><br><span class=\"line\">  dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  data: params,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    Authorization: <span class=\"string\">\"Bearer \"</span> + <span class=\"built_in\">JSON</span>.parse(_this.token),</span><br><span class=\"line\">    <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">\"XMLHttpRequest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success(res) &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>解决：<br>去掉<code>dataType: &quot;json&quot;</code>和<code>&quot;Content-Type&quot;: &quot;application/json&quot;</code>。<br></p>\n<p><a name=\"6qOKE\"></a></p>\n<h4 id=\"2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\"><a href=\"#2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\" class=\"headerlink\" title=\"2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网\"></a>2、注册密码输入框表现形式，可通过动态提示密码要求来提高交互性，如下：vultr官网</h4><p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584947869189-6c02b1cc-d402-4ae3-857a-3194591796cc.png#align=left&amp;display=inline&amp;height=407&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=407&amp;originWidth=754&amp;size=164405&amp;status=done&amp;style=none&amp;width=754\" alt=\"image.png\"><br></p>\n<p><a name=\"Dirb9\"></a></p>\n<h4 id=\"3、yuque-hexo升级后拉取语雀文章list包权限错误\"><a href=\"#3、yuque-hexo升级后拉取语雀文章list包权限错误\" class=\"headerlink\" title=\"3、yuque-hexo升级后拉取语雀文章list包权限错误\"></a>3、yuque-hexo升级后拉取语雀文章list包权限错误</h4><p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584949994741-fcc831b7-3456-4262-8e2b-279bd2d8bd96.png#align=left&amp;display=inline&amp;height=59&amp;margin=%5Bobject%20Object%5D&amp;name=yuque-hexo-error.PNG&amp;originHeight=59&amp;originWidth=719&amp;size=5650&amp;status=done&amp;style=none&amp;width=719\" alt=\"yuque-hexo-error.PNG\"><br>解决：<br>在package.json的yuqueConfig新增私人token配置。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1584950263184-edaa0783-73e4-4d42-aadc-8d4d65f4316b.png#align=left&amp;display=inline&amp;height=159&amp;margin=%5Bobject%20Object%5D&amp;name=yuque-hexo-token.png&amp;originHeight=159&amp;originWidth=432&amp;size=7027&amp;status=done&amp;style=none&amp;width=432\" alt=\"yuque-hexo-token.png\"><br><br>–&gt; <a href=\"https://www.yuque.com/yuque/developer/api#785a3731\" target=\"_blank\" rel=\"noopener\">个人token获取</a> &lt;–<br></p>\n<p><a name=\"BV7Yf\"></a></p>\n<h4 id=\"4、hexo-dev时报错\"><a href=\"#4、hexo-dev时报错\" class=\"headerlink\" title=\"4、hexo dev时报错\"></a>4、hexo dev时报错</h4><p><br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 8<br><br>原因：</p>\n<ul>\n<li>_config.yml文件内英文冒号后面需要有一个空格</li>\n<li>文章标题内不能存在特殊标识比如我在标题内加了[]方括号也会导致错误</li>\n</ul>\n<p><a name=\"9J9mb\"></a></p>\n<h4 id=\"5、在使用yuque-hexo拉取文章时会出现图片加载失败\"><a href=\"#5、在使用yuque-hexo拉取文章时会出现图片加载失败\" class=\"headerlink\" title=\"5、在使用yuque-hexo拉取文章时会出现图片加载失败\"></a>5、在使用<a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener\">yuque-hexo</a>拉取文章时会出现图片加载失败</h4><p>yuque的防盗链问题，解决方法在hexo页面的模板文件头部增加：<a href=\"https://github.com/x-cold/yuque-hexo/issues/41\" target=\"_blank\" rel=\"noopener\">yuque-hexo/issue/#41</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"referrer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-referrer\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Referrer Policy(引用策略)<br>引用策略就是从一个文档发出请求时，是否在请求头部定义 Referrer 的设置。<br><br>很多网站的防盗链机制都是用头部定义 Referrer 来判断是否是盗链。<br><br>Referrer Policy 的值</p>\n<ul>\n<li>空字符串：默认值，一般浏览器的默认值是 no-referrer-when-downgrade；</li>\n<li>no-referrer：所有请求不发送 referrer；</li>\n<li>no-referrer-when-downgrade：当请求安全级别下降时不发送 referrer。目前，只有一种情况会发生安全级别下降，即从 HTTPS 到 HTTP。HTTPS 到 HTTP 的资源引用和链接跳转都不会发送 referrer</li>\n<li>same-origin：对于同源的链接和引用发送referrer，其他的不会，同源的意思是指同一个域名且同一协议；</li>\n<li>origin：会发送 referrer，但只会发送源信息，源信息包括访问协议和域名；</li>\n<li>strict-origin：相当于 origin 和 no-referrer-when-downgrade 的 AND 合体，即在安全级别下降时不发送 referrer；安全级别未下降时发送源信息，新加的标准，有些浏览器可能还不支持；</li>\n<li>origin-when-cross-origin：相当于 origin 和 same-origin 的 OR 合体，同源的链接和引用，会发送完全的 referrer 信息；但非同源链接和引用时，只发送源信息；</li>\n<li>strict-origin-when-cross-origin：同源的链接和引用，会发送 referrer，安全级别下降时不发送 referrer，其它情况下发送源信息（New）；yarn</li>\n<li>unsafe-url：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息；</li>\n</ul>\n<p><br>引用策略说明转自：<a href=\"https://www.jianshu.com/p/b12c5b4fd9df\" target=\"_blank\" rel=\"noopener\">Web 页面 Meta 的 Referrer Policy</a><br></p>\n<p><a name=\"Pf1cV\"></a></p>\n<h4 id=\"6、更换远端GitHub库之后出现pull和push失败的问题\"><a href=\"#6、更换远端GitHub库之后出现pull和push失败的问题\" class=\"headerlink\" title=\"6、更换远端GitHub库之后出现pull和push失败的问题\"></a>6、更换远端GitHub库之后出现pull和push失败的问题</h4><p>报错：fatal: refusing to merge unrelated histories<br>将本地的库更换远端之后，使用然后本地库去推送到远端， 远端库觉得这个本地库跟自己不相干， 所以告知无法合并。</p>\n<ul>\n<li>最好将远端库重新clone下来，把本地代码放进去再推送。</li>\n<li>当然也可以强行合并</li>\n</ul>\n<p><code>git pull origin master --allow-unrelated-histories</code>，后面加上<code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并。</p>"},{"title":"Less 记录","urlname":"wi7qsa","date":"2020-04-13T07:22:33.000Z","_content":"![](https://cdn.nlark.com/yuque/0/2020/png/250093/1586762618421-4b4d86d0-4c18-444e-97be-73a9ff5fc5a2.png#align=left&display=inline&height=81&margin=%5Bobject%20Object%5D&originHeight=81&originWidth=199&size=0&status=done&style=none&width=199)\n> 特性：变量、Mixin、函数。\n\n\n\n1. 循环类名\n```less\n// 定义循环函数\n.part-title-loop(@n, @i: 0) when (@i < @n) {\n    .part-title-@{i} {\n        background: url(\".../trial-part-title_@{i}.png\");\n        background-size: 100% 100%;\n    }\n  \t.part-title-loop(@i+1);\n}\n.part-box {\n    padding: 0 .64rem;\n    .part-title {\n        width: 12.16rem;\n        height: 1.365rem;\n        margin: 0 auto 1.344rem;\n    }\n  \t// 调用循环函数\n    .part-title-loop(8);\n}\n```\n\n\n2. 使用兄弟选择器时如果采用嵌套写法可能会有问题，所以最好写在外层。\n\n\n\n\n|  |  |\n| --- | --- |\n|  |  |\n|  |  |\n\n\n\n\n","source":"_posts/yuque/Less 记录.md","raw":"\n---\n\ntitle: Less 记录\n\nurlname: wi7qsa\n\ndate: 2020-04-13 15:22:33 +0800\n\ntags: []\n\ncategories: []\n\n---\n![](https://cdn.nlark.com/yuque/0/2020/png/250093/1586762618421-4b4d86d0-4c18-444e-97be-73a9ff5fc5a2.png#align=left&display=inline&height=81&margin=%5Bobject%20Object%5D&originHeight=81&originWidth=199&size=0&status=done&style=none&width=199)\n> 特性：变量、Mixin、函数。\n\n\n\n1. 循环类名\n```less\n// 定义循环函数\n.part-title-loop(@n, @i: 0) when (@i < @n) {\n    .part-title-@{i} {\n        background: url(\".../trial-part-title_@{i}.png\");\n        background-size: 100% 100%;\n    }\n  \t.part-title-loop(@i+1);\n}\n.part-box {\n    padding: 0 .64rem;\n    .part-title {\n        width: 12.16rem;\n        height: 1.365rem;\n        margin: 0 auto 1.344rem;\n    }\n  \t// 调用循环函数\n    .part-title-loop(8);\n}\n```\n\n\n2. 使用兄弟选择器时如果采用嵌套写法可能会有问题，所以最好写在外层。\n\n\n\n\n|  |  |\n| --- | --- |\n|  |  |\n|  |  |\n\n\n\n\n","slug":"yuque/Less 记录","published":1,"updated":"2020-04-22T02:25:07.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqp002qe36k46hs82s3","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1586762618421-4b4d86d0-4c18-444e-97be-73a9ff5fc5a2.png#align=left&amp;display=inline&amp;height=81&amp;margin=%5Bobject%20Object%5D&amp;originHeight=81&amp;originWidth=199&amp;size=0&amp;status=done&amp;style=none&amp;width=199\" alt=\"\"></p>\n<blockquote>\n<p>特性：变量、Mixin、函数。</p>\n</blockquote>\n<ol>\n<li><p>循环类名</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义循环函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.part-title-loop</span>(<span class=\"variable\">@n</span>, <span class=\"variable\">@i</span>: <span class=\"number\">0</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; <span class=\"variable\">@n</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.part-title-</span><span class=\"variable\">@&#123;i&#125;</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: url(<span class=\"string\">\".../trial-part-title_@&#123;i&#125;.png\"</span>);</span><br><span class=\"line\">        <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"selector-class\">.part-title-loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.part-box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> .<span class=\"number\">64rem</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.part-title</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">12.16rem</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">1.365rem</span>;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto <span class=\"number\">1.344rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"comment\">// 调用循环函数</span></span><br><span class=\"line\">    <span class=\"selector-class\">.part-title-loop</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用兄弟选择器时如果采用嵌套写法可能会有问题，所以最好写在外层。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1586762618421-4b4d86d0-4c18-444e-97be-73a9ff5fc5a2.png#align=left&amp;display=inline&amp;height=81&amp;margin=%5Bobject%20Object%5D&amp;originHeight=81&amp;originWidth=199&amp;size=0&amp;status=done&amp;style=none&amp;width=199\" alt=\"\"></p>\n<blockquote>\n<p>特性：变量、Mixin、函数。</p>\n</blockquote>\n<ol>\n<li><p>循环类名</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义循环函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.part-title-loop</span>(<span class=\"variable\">@n</span>, <span class=\"variable\">@i</span>: <span class=\"number\">0</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; <span class=\"variable\">@n</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.part-title-</span><span class=\"variable\">@&#123;i&#125;</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: url(<span class=\"string\">\".../trial-part-title_@&#123;i&#125;.png\"</span>);</span><br><span class=\"line\">        <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"selector-class\">.part-title-loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.part-box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> .<span class=\"number\">64rem</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.part-title</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">12.16rem</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">1.365rem</span>;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto <span class=\"number\">1.344rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"comment\">// 调用循环函数</span></span><br><span class=\"line\">    <span class=\"selector-class\">.part-title-loop</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用兄弟选择器时如果采用嵌套写法可能会有问题，所以最好写在外层。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"MAC book 从0到开发","urlname":"ovolxl","date":"2020-04-21T02:56:45.000Z","_content":"<a name=\"QFqNQ\"></a>\n## node\n\n\n> [https://nodejs.org/en/download/](https://nodejs.org/en/download/) 下载node安装包\n\n点击安装成功之后，在命令行输入node -v检查是否成功安装：<br />![截屏2020-04-21下午1.37.12.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1587447473899-35e0b89f-9835-4df6-bfe1-d33f4170f411.png#align=left&display=inline&height=55&margin=%5Bobject%20Object%5D&name=%E6%88%AA%E5%B1%8F2020-04-21%E4%B8%8B%E5%8D%881.37.12.png&originHeight=110&originWidth=2160&size=76268&status=done&style=none&width=1080)\n<a name=\"pStNy\"></a>\n## git\n\n\n> [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载git安装包\n\n\n<br />下载成功后双击pkg文件弹出无法安装的弹窗，需要按住control同时点击pkg文件。<br />安装后，在命令行输入git检查git是否安装成功，成功后在命令行配置git信息：<br />\n\n- 创建ssh key\n```basic\n# 找不到就说明还未创建ssh\ncd ~/.ssh \n\n# 使用自己的邮箱，然后根据自己的需求选择创建的目录等\nssh-keygen -t rsa -C xxxx@xxx.com\n\n# 打开ssh key目录，查看id_rsa.pub这个文件并打开拷贝key值\nopen ~/.ssh\n```\n登录github并在设置中创建ssh粘贴刚刚复制的ssh key。\n```basic\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n\n\n<a name=\"rbdUA\"></a>\n## docker\n> [https://www.docker.com](https://www.docker.com) 下载安装docker\n\n同样的等待安装完成并启动，启动成功之后，将docker镜像设置为国内镜像加快速度，网易镜像比较快`[http://hub-mirror.c.163.com](http://hub-mirror.c.163.com)。`\n```json\n{\n  \"registry-mirrors\": [\n    \"http://hub-mirror.c.163.com\",\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"http://f1361db2.m.daocloud.io\"\n  ],\n  \"insecure-registries\": [],\n  \"debug\": true,\n  \"experimental\": false\n}\n```\n进入配置文件目录，启动所有容器：\n```basic\ndocker-compose up -d\n```\n发生以下报错：<br />ERROR: Get [https://docker-registry.lanqb.com/v2/:](https://docker-registry.lanqb.com/v2/:) net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br />原因：项目镜像源错误。\n```yaml\n  maestro-api-gateway:\n    image: registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine\n    environment:\n      WEBROOT: '/var/www/html/public'\n      ERRORS: 1\n      RUN_SCRIPTS: 0\n      ENABLE_XDEBUG: 1\n      XDEBUG_CONFIG: \"remote_host=192.168.1.133\"\n      XDEBUG_PORT: 9015\n      PUID: 1000\n      PGID: 1000\n    volumes:\n      - /Users/httishere/workspace/maestro-api-gateway:/var/www/html\n    ports:\n      - \"8015:80\"\n```\n\n\n\n","source":"_posts/yuque/MAC book 从0到开发.md","raw":"\n---\n\ntitle: MAC book 从0到开发\n\nurlname: ovolxl\n\ndate: 2020-04-21 10:56:45 +0800\n\ntags: []\n\ncategories: []\n\n---\n<a name=\"QFqNQ\"></a>\n## node\n\n\n> [https://nodejs.org/en/download/](https://nodejs.org/en/download/) 下载node安装包\n\n点击安装成功之后，在命令行输入node -v检查是否成功安装：<br />![截屏2020-04-21下午1.37.12.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1587447473899-35e0b89f-9835-4df6-bfe1-d33f4170f411.png#align=left&display=inline&height=55&margin=%5Bobject%20Object%5D&name=%E6%88%AA%E5%B1%8F2020-04-21%E4%B8%8B%E5%8D%881.37.12.png&originHeight=110&originWidth=2160&size=76268&status=done&style=none&width=1080)\n<a name=\"pStNy\"></a>\n## git\n\n\n> [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载git安装包\n\n\n<br />下载成功后双击pkg文件弹出无法安装的弹窗，需要按住control同时点击pkg文件。<br />安装后，在命令行输入git检查git是否安装成功，成功后在命令行配置git信息：<br />\n\n- 创建ssh key\n```basic\n# 找不到就说明还未创建ssh\ncd ~/.ssh \n\n# 使用自己的邮箱，然后根据自己的需求选择创建的目录等\nssh-keygen -t rsa -C xxxx@xxx.com\n\n# 打开ssh key目录，查看id_rsa.pub这个文件并打开拷贝key值\nopen ~/.ssh\n```\n登录github并在设置中创建ssh粘贴刚刚复制的ssh key。\n```basic\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n\n\n<a name=\"rbdUA\"></a>\n## docker\n> [https://www.docker.com](https://www.docker.com) 下载安装docker\n\n同样的等待安装完成并启动，启动成功之后，将docker镜像设置为国内镜像加快速度，网易镜像比较快`[http://hub-mirror.c.163.com](http://hub-mirror.c.163.com)。`\n```json\n{\n  \"registry-mirrors\": [\n    \"http://hub-mirror.c.163.com\",\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"http://f1361db2.m.daocloud.io\"\n  ],\n  \"insecure-registries\": [],\n  \"debug\": true,\n  \"experimental\": false\n}\n```\n进入配置文件目录，启动所有容器：\n```basic\ndocker-compose up -d\n```\n发生以下报错：<br />ERROR: Get [https://docker-registry.lanqb.com/v2/:](https://docker-registry.lanqb.com/v2/:) net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br />原因：项目镜像源错误。\n```yaml\n  maestro-api-gateway:\n    image: registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine\n    environment:\n      WEBROOT: '/var/www/html/public'\n      ERRORS: 1\n      RUN_SCRIPTS: 0\n      ENABLE_XDEBUG: 1\n      XDEBUG_CONFIG: \"remote_host=192.168.1.133\"\n      XDEBUG_PORT: 9015\n      PUID: 1000\n      PGID: 1000\n    volumes:\n      - /Users/httishere/workspace/maestro-api-gateway:/var/www/html\n    ports:\n      - \"8015:80\"\n```\n\n\n\n","slug":"yuque/MAC book 从0到开发","published":1,"updated":"2020-04-22T02:25:07.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqq002re36krgpgnjgx","content":"<p><a name=\"QFqNQ\"></a></p>\n<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><blockquote>\n<p><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a> 下载node安装包</p>\n</blockquote>\n<p>点击安装成功之后，在命令行输入node -v检查是否成功安装：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1587447473899-35e0b89f-9835-4df6-bfe1-d33f4170f411.png#align=left&amp;display=inline&amp;height=55&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2020-04-21%E4%B8%8B%E5%8D%881.37.12.png&amp;originHeight=110&amp;originWidth=2160&amp;size=76268&amp;status=done&amp;style=none&amp;width=1080\" alt=\"截屏2020-04-21下午1.37.12.png\"><br><a name=\"pStNy\"></a></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><blockquote>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a> 下载git安装包</p>\n</blockquote>\n<p><br>下载成功后双击pkg文件弹出无法安装的弹窗，需要按住control同时点击pkg文件。<br>安装后，在命令行输入git检查git是否安装成功，成功后在命令行配置git信息：<br></p>\n<ul>\n<li>创建ssh key<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 找不到就说明还未创建ssh</span><br><span class=\"line\">cd ~/.ssh </span><br><span class=\"line\"></span><br><span class=\"line\"># 使用自己的邮箱，然后根据自己的需求选择创建的目录等</span><br><span class=\"line\">ssh-keygen -t rsa -C xxxx@xxx.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开ssh key目录，查看id_rsa.pub这个文件并打开拷贝key值</span><br><span class=\"line\">open ~/.ssh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>登录github并在设置中创建ssh粘贴刚刚复制的ssh key。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name \"John Doe\"</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"rbdUA\"></a></p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><blockquote>\n<p><a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener\">https://www.docker.com</a> 下载安装docker</p>\n</blockquote>\n<p>同样的等待安装完成并启动，启动成功之后，将docker镜像设置为国内镜像加快速度，网易镜像比较快<code>[http://hub-mirror.c.163.com](http://hub-mirror.c.163.com)。</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"http://hub-mirror.c.163.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://docker.mirrors.ustc.edu.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://f1361db2.m.daocloud.io\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"debug\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"experimental\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入配置文件目录，启动所有容器：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>发生以下报错：<br>ERROR: Get <a href=\"https://docker-registry.lanqb.com/v2/:\" target=\"_blank\" rel=\"noopener\">https://docker-registry.lanqb.com/v2/:</a> net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br>原因：项目镜像源错误。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">maestro-api-gateway:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">    WEBROOT:</span> <span class=\"string\">'/var/www/html/public'</span></span><br><span class=\"line\"><span class=\"attr\">    ERRORS:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    RUN_SCRIPTS:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">    ENABLE_XDEBUG:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    XDEBUG_CONFIG:</span> <span class=\"string\">\"remote_host=192.168.1.133\"</span></span><br><span class=\"line\"><span class=\"attr\">    XDEBUG_PORT:</span> <span class=\"number\">9015</span></span><br><span class=\"line\"><span class=\"attr\">    PUID:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">    PGID:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/Users/httishere/workspace/maestro-api-gateway:/var/www/html</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8015:80\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"QFqNQ\"></a></p>\n<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><blockquote>\n<p><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a> 下载node安装包</p>\n</blockquote>\n<p>点击安装成功之后，在命令行输入node -v检查是否成功安装：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1587447473899-35e0b89f-9835-4df6-bfe1-d33f4170f411.png#align=left&amp;display=inline&amp;height=55&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2020-04-21%E4%B8%8B%E5%8D%881.37.12.png&amp;originHeight=110&amp;originWidth=2160&amp;size=76268&amp;status=done&amp;style=none&amp;width=1080\" alt=\"截屏2020-04-21下午1.37.12.png\"><br><a name=\"pStNy\"></a></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><blockquote>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a> 下载git安装包</p>\n</blockquote>\n<p><br>下载成功后双击pkg文件弹出无法安装的弹窗，需要按住control同时点击pkg文件。<br>安装后，在命令行输入git检查git是否安装成功，成功后在命令行配置git信息：<br></p>\n<ul>\n<li>创建ssh key<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 找不到就说明还未创建ssh</span><br><span class=\"line\">cd ~/.ssh </span><br><span class=\"line\"></span><br><span class=\"line\"># 使用自己的邮箱，然后根据自己的需求选择创建的目录等</span><br><span class=\"line\">ssh-keygen -t rsa -C xxxx@xxx.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开ssh key目录，查看id_rsa.pub这个文件并打开拷贝key值</span><br><span class=\"line\">open ~/.ssh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>登录github并在设置中创建ssh粘贴刚刚复制的ssh key。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name \"John Doe\"</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"rbdUA\"></a></p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><blockquote>\n<p><a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener\">https://www.docker.com</a> 下载安装docker</p>\n</blockquote>\n<p>同样的等待安装完成并启动，启动成功之后，将docker镜像设置为国内镜像加快速度，网易镜像比较快<code>[http://hub-mirror.c.163.com](http://hub-mirror.c.163.com)。</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"http://hub-mirror.c.163.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://docker.mirrors.ustc.edu.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://f1361db2.m.daocloud.io\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"debug\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"experimental\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入配置文件目录，启动所有容器：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>发生以下报错：<br>ERROR: Get <a href=\"https://docker-registry.lanqb.com/v2/:\" target=\"_blank\" rel=\"noopener\">https://docker-registry.lanqb.com/v2/:</a> net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br>原因：项目镜像源错误。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">maestro-api-gateway:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">    WEBROOT:</span> <span class=\"string\">'/var/www/html/public'</span></span><br><span class=\"line\"><span class=\"attr\">    ERRORS:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    RUN_SCRIPTS:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">    ENABLE_XDEBUG:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    XDEBUG_CONFIG:</span> <span class=\"string\">\"remote_host=192.168.1.133\"</span></span><br><span class=\"line\"><span class=\"attr\">    XDEBUG_PORT:</span> <span class=\"number\">9015</span></span><br><span class=\"line\"><span class=\"attr\">    PUID:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">    PGID:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/Users/httishere/workspace/maestro-api-gateway:/var/www/html</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8015:80\"</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"React Native 踩坑记","urlname":"gkbbpw","date":"2020-03-26T06:35:22.000Z","cover":null,"_content":"\n<!-- more -->\n<a name=\"eUUSe\"></a>\n### _写在前头（Taro内）_\n\n- 文字要包在 `Text` 组件里面，否则不显示。\n- `position:fixed` React Native 不支持\n- Animation 和 transform React Native 动画不支持\n- React Native 与 H5/小程序 的 Flex 布局相关属性的默认值有差异\n<a name=\"i5vbr\"></a>\n### _RN样式相关问题_\n<a name=\"saOp6\"></a>\n#### 1. 通配选择器会被忽略\n<a name=\"NiCNh\"></a>\n#### 2. background-size样式属性无效\n<a name=\"swIZ2\"></a>\n#### 3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果\n<a name=\"vKvKA\"></a>\n#### 4. 设置背景图片\nReact Native 的 Background 仅支持 backgroundColor 属性，所以需要设置背景图片时需要采用ImageBackground组件;\n<a name=\"dTgEw\"></a>\n#### 5. RN阴影样式属性\n其仅支持ios平台，在Android中需要使用elevation属性实现，但elevation仅提供一个灰色阴影。<br />react-native-shadow还需研究一下。mark<br />\n```jsx\nsystem_android ? (\n      <BoxShadow\n        setting={{\n          width: rpx2px(width),\n          height: rpx2px(height),\n          color: color,\n          border: rpx2px(border || 0) || 2,\n          radius: rpx2px(radius),\n          opacity: opacity,\n          x: rpx2px(offsetX),\n          y: rpx2px(offsetY),\n          style: { marginVertical: 0, justifyContent: \"center\" }\n        }}\n      >\n        {this.props.children}\n      </BoxShadow>\n    ) : (\n      this.props.children\n    );\n```\n\n\n<a name=\"pVbRR\"></a>\n#### 6. box-sizing不支持\n<a name=\"yp5sZ\"></a>\n#### 7. padding失效问题\n将文本内容设置为`flex: 1;`\n<a name=\"ugtC6\"></a>\n#### 8. rn的flexBox布局问题\n默认flex-direction是column。\n<a name=\"iC9eV\"></a>\n#### 9. 不支持伪元素写法\n<a name=\"vVbH2\"></a>\n#### 10. Failed prop type: Invalid props.style key `color` supplied to `View`\n同理有类似的Failed prop type: Invalid props.style key `fontSize` supplied to `View`。<br />不能给View组件添加color，fontSize等文字样式属性，需要指定Text添加样式属性。\n<a name=\"2JqSv\"></a>\n#### 11. 页面实现滑动需要使用ScrollView\n<a name=\"t2NK0\"></a>\n#### 12. input输入框未显示完全\nAndroid 输入框默认带有上下内边距，所以需要将上下padding设置为0。<br />หมดชีวิตที่เห็นเมื่อใดก็เป็นของเธอ\n<a name=\"Oj5Ba\"></a>\n### _编译问题_\n<a name=\"lIpu2\"></a>\n#### 1. react-native编译之后报错\nerror: bundling failed: Error: Unable to resolve module `./components/calendar` from `E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js`: The module `./components/calendar` could not be found from `E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js`. Indeed, none of these files exist:<br />原因：taro-ui不支持React Native。<br />\n\n<a name=\"NyPLz\"></a>\n#### 2. Application taroDemo has not been registered.\n     Hint: This error often happens when you're running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.<br /> If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run 'npm start').<br />原因：存在项目终端冲突，关闭所有终端并重启，查看项目内config/index文件是否注册应用名。<br />因为我用了taro-native-shell这个壳子，所以命名为'taroDemo'。<br />![微信图片_20200327140918.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585289424201-8a2fbe69-63c3-4df2-b98b-eb7ecef1f74e.png#align=left&display=inline&height=121&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200327140918.png&originHeight=121&originWidth=423&size=4573&status=done&style=none&width=423)<br />\n\n<a name=\"V77r0\"></a>\n#### 3. Unable to load script from assets 'index.android.bundle'. Make sure your bundle is packaged correctly\n在android/app/arc/main目录下新建一个assets文件，在IDE的terminal以命令启动`react-native run-android`。<br />\n\n<a name=\"fj1lB\"></a>\n#### 4. 运行react-native start时发现8081端口被占用问题\n找到占用8081的进程：<br />\n```bash\nnetstat -aon |findstr \"8081\"\n```\n![8081.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585469950756-fff03a59-91a5-411d-92db-5c69892bf6be.png#align=left&display=inline&height=76&margin=%5Bobject%20Object%5D&name=8081.png&originHeight=76&originWidth=588&size=4407&status=done&style=none&width=588)<br />使用pid杀死占用8081的进程：\n```bash\ntaskkill /pid xxx /F\n```\n![kill-by-pid.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585470017430-a9d85a9d-e255-44e1-bad7-80d67e630b2e.png#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&name=kill-by-pid.png&originHeight=69&originWidth=390&size=3185&status=done&style=none&width=390)<br />\n\n<a name=\"6EopV\"></a>\n#### 5. ReferenceError: ReferenceError: Can't find variable: Button(XXXX)\n解决：\n```javascript\nimport {\n  Text,\n  View,\n  Button,\n  ...\n} from 'react-native';\n```\n\n\n<a name=\"BjO3m\"></a>\n#### 6. undefined is not a function (evaluating 'transform.forEach')\n Warning: Failed prop type: Invalid prop `transform` of type `string` supplied to `View`, expected an array.<br />transform属性详情需要以array的形式：<br />![style-transform-array.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585476684072-2a4f20ce-a78f-4cc2-b9c3-6f732cff8464.png#align=left&display=inline&height=60&margin=%5Bobject%20Object%5D&name=style-transform-array.png&originHeight=60&originWidth=548&size=3017&status=done&style=none&width=548)\n\n<a name=\"grScl\"></a>\n#### 7. Invariant Violation: View config not found for name slot\nreturn的内容内组件的首字母不是大写，所以需要将组件的首字母写成大写字母。<br />\n\n<a name=\"KN7dW\"></a>\n#### 8. Error: Cannot add a child that doesn't have a YogaNode to a parent without a measure function!\n在render时不建议使用下面这种写法，建议采用三目运算符。<br />\n\n```jsx\n\t\tthis.state.amount && (\n       <View>\n         <Text>\n           hello world\n         </Text>\n       </View>\n      )\n```\n换成：<br />\n\n```jsx\nthis.state.amount ?\n       <View>\n         <Text>\n           hello world\n         </Text>\n       </View> : null\n  );\n```\n还有不要有单独的字符串暴露，应使用Text进行包裹。<br />\n\n<a name=\"bmAy7\"></a>\n#### 9. TypeError: undefined is not an object (evaluating 'course.posters.banner')\n需要对变量进行初始化或者值判断。<br />\n\n<a name=\"KIuKW\"></a>\n#### 10. Error while updating property 'height' in shadow node of type: RCTView\n![height-value-type.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585535630906-8a344136-4f69-4d1b-9c6d-7454438b8c12.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&name=height-value-type.png&originHeight=169&originWidth=463&size=64259&status=done&style=none&width=463)<br />在reactNative 写样式的时候  宽、高、padding等值不能是字符串。<br />\n\n<a name=\"S619d\"></a>\n#### 11. Failed prop type: Invalid props.style key `transform-origin` supplied to 'Image'\n\n\n<a name=\"dZojP\"></a>\n#### 12. Error while updating property 'transform' of a view managed by: RCTImageView\n因为我的transform内有rotate的操作，我原来是直接设置`rotate: rotateValue+'deg'`，但是发现会出现上述报错，后来看了相关问题需要通过插值器的方法将int转换成他需要的deg。<br />[React Native loading旋转动画的实现](https://www.jianshu.com/p/e131375eb8c4)<br />\n\n<a name=\"ca5yW\"></a>\n#### 13. has been blocked by CORS policy\nAccess to fetch at 'http://localhost:8081/rn_temp/index.delta?platform=android&dev=true&minify=false' from origin 'http://127.0.0.1:8081' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.<br />访问的域名不同导致, 浏览器地址栏为127.0.0.1:8081/debugger-ui/, 真机或模拟器访问的地址为http://localhost:8081/rn_temp/index.bundle?platform=android&dev=true。<br />\n\n<a name=\"MgIQl\"></a>\n#### 14.  React.createElement: type is invalid\nReact.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.<br />可能是引入子组件时出现问题，我原来子组件内export组件为<br />\n```jsx\nexport class PhoneCode extends Component {\n// 调整为\nexport default class PhoneCode extends Component {\n```\n\n\n<a name=\"x0xQX\"></a>\n#### 15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\n存在无效元素，可以是引入的组件或工具路径错误等。<br />\n\n<a name=\"RABEe\"></a>\n#### 16. Object.freeze can only be called on Objects\n同Q2。\n<a name=\"S0mJl\"></a>\n### _Taro Api React Native支持度_\n<a name=\"0trSF\"></a>\n#### 1. 不支持Taro.addInterceptor\n<a name=\"z7eKf\"></a>\n#### 2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）\n所以需要使用async / await + Taro.(get/set)Storage 实现，在使用时需要添加环境判断。<br />\n```bash\nregeneratorRuntime is not defined\n```\n解决:<br />\n```bash\n$ yarn add @tarojs/async-await\n# 或者使用 npm\n$ npm install --save @tarojs/async-await\n```\n在有异步操作的 页面内引入import '@tarojs/async-await'。<br />开启 async functions 支持需要安装包 `babel-plugin-transform-runtime` 和` babel-runtime`。<br />\n```bash\n$ yarn add babel-plugin-transform-runtime --dev\n$ yarn add babel-runtime\n```\n随后修改项目 [`babel` 配置](https://nervjs.github.io/taro/docs/config-detail.html#babel)，增加插件 `babel-plugin-transform-runtime`。\n```json\nbabel: {\n  sourceMap: true,\n  presets: [\n    [\n      'env',\n      {\n        modules: false\n      }\n    ]\n  ],\n  plugins: [\n    'transform-decorators-legacy',\n    'transform-class-properties',\n    'transform-object-rest-spread',\n    ['transform-runtime', {\n      \"helpers\": false,\n      \"polyfill\": false,\n      \"regenerator\": true,\n      \"moduleName\": 'babel-runtime'\n    }]\n  ]\n}\n```\n\n<br />写一个相关的存取事件，在需要时async/await进行存取。<br />\n\n<a name=\"Vit1J\"></a>\n### _其他问题_\n<a name=\"g8WBO\"></a>\n#### 1. 真机内页面无法有效上滑\n\n","source":"_posts/yuque/React Native 踩坑记.md","raw":"\n---\n\ntitle: React Native 踩坑记\n\nurlname: gkbbpw\n\ndate: 2020-03-26 14:35:22 +0800\n\ntags: [React Native]\n\ncategories: [React]\n\ncover: \n\n---\n\n<!-- more -->\n<a name=\"eUUSe\"></a>\n### _写在前头（Taro内）_\n\n- 文字要包在 `Text` 组件里面，否则不显示。\n- `position:fixed` React Native 不支持\n- Animation 和 transform React Native 动画不支持\n- React Native 与 H5/小程序 的 Flex 布局相关属性的默认值有差异\n<a name=\"i5vbr\"></a>\n### _RN样式相关问题_\n<a name=\"saOp6\"></a>\n#### 1. 通配选择器会被忽略\n<a name=\"NiCNh\"></a>\n#### 2. background-size样式属性无效\n<a name=\"swIZ2\"></a>\n#### 3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果\n<a name=\"vKvKA\"></a>\n#### 4. 设置背景图片\nReact Native 的 Background 仅支持 backgroundColor 属性，所以需要设置背景图片时需要采用ImageBackground组件;\n<a name=\"dTgEw\"></a>\n#### 5. RN阴影样式属性\n其仅支持ios平台，在Android中需要使用elevation属性实现，但elevation仅提供一个灰色阴影。<br />react-native-shadow还需研究一下。mark<br />\n```jsx\nsystem_android ? (\n      <BoxShadow\n        setting={{\n          width: rpx2px(width),\n          height: rpx2px(height),\n          color: color,\n          border: rpx2px(border || 0) || 2,\n          radius: rpx2px(radius),\n          opacity: opacity,\n          x: rpx2px(offsetX),\n          y: rpx2px(offsetY),\n          style: { marginVertical: 0, justifyContent: \"center\" }\n        }}\n      >\n        {this.props.children}\n      </BoxShadow>\n    ) : (\n      this.props.children\n    );\n```\n\n\n<a name=\"pVbRR\"></a>\n#### 6. box-sizing不支持\n<a name=\"yp5sZ\"></a>\n#### 7. padding失效问题\n将文本内容设置为`flex: 1;`\n<a name=\"ugtC6\"></a>\n#### 8. rn的flexBox布局问题\n默认flex-direction是column。\n<a name=\"iC9eV\"></a>\n#### 9. 不支持伪元素写法\n<a name=\"vVbH2\"></a>\n#### 10. Failed prop type: Invalid props.style key `color` supplied to `View`\n同理有类似的Failed prop type: Invalid props.style key `fontSize` supplied to `View`。<br />不能给View组件添加color，fontSize等文字样式属性，需要指定Text添加样式属性。\n<a name=\"2JqSv\"></a>\n#### 11. 页面实现滑动需要使用ScrollView\n<a name=\"t2NK0\"></a>\n#### 12. input输入框未显示完全\nAndroid 输入框默认带有上下内边距，所以需要将上下padding设置为0。<br />หมดชีวิตที่เห็นเมื่อใดก็เป็นของเธอ\n<a name=\"Oj5Ba\"></a>\n### _编译问题_\n<a name=\"lIpu2\"></a>\n#### 1. react-native编译之后报错\nerror: bundling failed: Error: Unable to resolve module `./components/calendar` from `E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js`: The module `./components/calendar` could not be found from `E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js`. Indeed, none of these files exist:<br />原因：taro-ui不支持React Native。<br />\n\n<a name=\"NyPLz\"></a>\n#### 2. Application taroDemo has not been registered.\n     Hint: This error often happens when you're running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.<br /> If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run 'npm start').<br />原因：存在项目终端冲突，关闭所有终端并重启，查看项目内config/index文件是否注册应用名。<br />因为我用了taro-native-shell这个壳子，所以命名为'taroDemo'。<br />![微信图片_20200327140918.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585289424201-8a2fbe69-63c3-4df2-b98b-eb7ecef1f74e.png#align=left&display=inline&height=121&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200327140918.png&originHeight=121&originWidth=423&size=4573&status=done&style=none&width=423)<br />\n\n<a name=\"V77r0\"></a>\n#### 3. Unable to load script from assets 'index.android.bundle'. Make sure your bundle is packaged correctly\n在android/app/arc/main目录下新建一个assets文件，在IDE的terminal以命令启动`react-native run-android`。<br />\n\n<a name=\"fj1lB\"></a>\n#### 4. 运行react-native start时发现8081端口被占用问题\n找到占用8081的进程：<br />\n```bash\nnetstat -aon |findstr \"8081\"\n```\n![8081.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585469950756-fff03a59-91a5-411d-92db-5c69892bf6be.png#align=left&display=inline&height=76&margin=%5Bobject%20Object%5D&name=8081.png&originHeight=76&originWidth=588&size=4407&status=done&style=none&width=588)<br />使用pid杀死占用8081的进程：\n```bash\ntaskkill /pid xxx /F\n```\n![kill-by-pid.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585470017430-a9d85a9d-e255-44e1-bad7-80d67e630b2e.png#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&name=kill-by-pid.png&originHeight=69&originWidth=390&size=3185&status=done&style=none&width=390)<br />\n\n<a name=\"6EopV\"></a>\n#### 5. ReferenceError: ReferenceError: Can't find variable: Button(XXXX)\n解决：\n```javascript\nimport {\n  Text,\n  View,\n  Button,\n  ...\n} from 'react-native';\n```\n\n\n<a name=\"BjO3m\"></a>\n#### 6. undefined is not a function (evaluating 'transform.forEach')\n Warning: Failed prop type: Invalid prop `transform` of type `string` supplied to `View`, expected an array.<br />transform属性详情需要以array的形式：<br />![style-transform-array.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585476684072-2a4f20ce-a78f-4cc2-b9c3-6f732cff8464.png#align=left&display=inline&height=60&margin=%5Bobject%20Object%5D&name=style-transform-array.png&originHeight=60&originWidth=548&size=3017&status=done&style=none&width=548)\n\n<a name=\"grScl\"></a>\n#### 7. Invariant Violation: View config not found for name slot\nreturn的内容内组件的首字母不是大写，所以需要将组件的首字母写成大写字母。<br />\n\n<a name=\"KN7dW\"></a>\n#### 8. Error: Cannot add a child that doesn't have a YogaNode to a parent without a measure function!\n在render时不建议使用下面这种写法，建议采用三目运算符。<br />\n\n```jsx\n\t\tthis.state.amount && (\n       <View>\n         <Text>\n           hello world\n         </Text>\n       </View>\n      )\n```\n换成：<br />\n\n```jsx\nthis.state.amount ?\n       <View>\n         <Text>\n           hello world\n         </Text>\n       </View> : null\n  );\n```\n还有不要有单独的字符串暴露，应使用Text进行包裹。<br />\n\n<a name=\"bmAy7\"></a>\n#### 9. TypeError: undefined is not an object (evaluating 'course.posters.banner')\n需要对变量进行初始化或者值判断。<br />\n\n<a name=\"KIuKW\"></a>\n#### 10. Error while updating property 'height' in shadow node of type: RCTView\n![height-value-type.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585535630906-8a344136-4f69-4d1b-9c6d-7454438b8c12.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&name=height-value-type.png&originHeight=169&originWidth=463&size=64259&status=done&style=none&width=463)<br />在reactNative 写样式的时候  宽、高、padding等值不能是字符串。<br />\n\n<a name=\"S619d\"></a>\n#### 11. Failed prop type: Invalid props.style key `transform-origin` supplied to 'Image'\n\n\n<a name=\"dZojP\"></a>\n#### 12. Error while updating property 'transform' of a view managed by: RCTImageView\n因为我的transform内有rotate的操作，我原来是直接设置`rotate: rotateValue+'deg'`，但是发现会出现上述报错，后来看了相关问题需要通过插值器的方法将int转换成他需要的deg。<br />[React Native loading旋转动画的实现](https://www.jianshu.com/p/e131375eb8c4)<br />\n\n<a name=\"ca5yW\"></a>\n#### 13. has been blocked by CORS policy\nAccess to fetch at 'http://localhost:8081/rn_temp/index.delta?platform=android&dev=true&minify=false' from origin 'http://127.0.0.1:8081' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.<br />访问的域名不同导致, 浏览器地址栏为127.0.0.1:8081/debugger-ui/, 真机或模拟器访问的地址为http://localhost:8081/rn_temp/index.bundle?platform=android&dev=true。<br />\n\n<a name=\"MgIQl\"></a>\n#### 14.  React.createElement: type is invalid\nReact.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.<br />可能是引入子组件时出现问题，我原来子组件内export组件为<br />\n```jsx\nexport class PhoneCode extends Component {\n// 调整为\nexport default class PhoneCode extends Component {\n```\n\n\n<a name=\"x0xQX\"></a>\n#### 15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\n存在无效元素，可以是引入的组件或工具路径错误等。<br />\n\n<a name=\"RABEe\"></a>\n#### 16. Object.freeze can only be called on Objects\n同Q2。\n<a name=\"S0mJl\"></a>\n### _Taro Api React Native支持度_\n<a name=\"0trSF\"></a>\n#### 1. 不支持Taro.addInterceptor\n<a name=\"z7eKf\"></a>\n#### 2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）\n所以需要使用async / await + Taro.(get/set)Storage 实现，在使用时需要添加环境判断。<br />\n```bash\nregeneratorRuntime is not defined\n```\n解决:<br />\n```bash\n$ yarn add @tarojs/async-await\n# 或者使用 npm\n$ npm install --save @tarojs/async-await\n```\n在有异步操作的 页面内引入import '@tarojs/async-await'。<br />开启 async functions 支持需要安装包 `babel-plugin-transform-runtime` 和` babel-runtime`。<br />\n```bash\n$ yarn add babel-plugin-transform-runtime --dev\n$ yarn add babel-runtime\n```\n随后修改项目 [`babel` 配置](https://nervjs.github.io/taro/docs/config-detail.html#babel)，增加插件 `babel-plugin-transform-runtime`。\n```json\nbabel: {\n  sourceMap: true,\n  presets: [\n    [\n      'env',\n      {\n        modules: false\n      }\n    ]\n  ],\n  plugins: [\n    'transform-decorators-legacy',\n    'transform-class-properties',\n    'transform-object-rest-spread',\n    ['transform-runtime', {\n      \"helpers\": false,\n      \"polyfill\": false,\n      \"regenerator\": true,\n      \"moduleName\": 'babel-runtime'\n    }]\n  ]\n}\n```\n\n<br />写一个相关的存取事件，在需要时async/await进行存取。<br />\n\n<a name=\"Vit1J\"></a>\n### _其他问题_\n<a name=\"g8WBO\"></a>\n#### 1. 真机内页面无法有效上滑\n\n","slug":"yuque/React Native 踩坑记","published":1,"updated":"2020-04-22T02:25:07.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqr002se36kj3nimbqd","content":"<a id=\"more\"></a>\n<p><a name=\"eUUSe\"></a></p>\n<h3 id=\"写在前头（Taro内）\"><a href=\"#写在前头（Taro内）\" class=\"headerlink\" title=\"写在前头（Taro内）\"></a><em>写在前头（Taro内）</em></h3><ul>\n<li>文字要包在 <code>Text</code> 组件里面，否则不显示。</li>\n<li><code>position:fixed</code> React Native 不支持</li>\n<li>Animation 和 transform React Native 动画不支持</li>\n<li>React Native 与 H5/小程序 的 Flex 布局相关属性的默认值有差异<br><a name=\"i5vbr\"></a><h3 id=\"RN样式相关问题\"><a href=\"#RN样式相关问题\" class=\"headerlink\" title=\"RN样式相关问题\"></a><em>RN样式相关问题</em></h3><a name=\"saOp6\"></a><h4 id=\"1-通配选择器会被忽略\"><a href=\"#1-通配选择器会被忽略\" class=\"headerlink\" title=\"1. 通配选择器会被忽略\"></a>1. 通配选择器会被忽略</h4><a name=\"NiCNh\"></a><h4 id=\"2-background-size样式属性无效\"><a href=\"#2-background-size样式属性无效\" class=\"headerlink\" title=\"2. background-size样式属性无效\"></a>2. background-size样式属性无效</h4><a name=\"swIZ2\"></a><h4 id=\"3-400-700，normal-或-bold-之外的-font-weight-值在Android上的React-Native中没有效果\"><a href=\"#3-400-700，normal-或-bold-之外的-font-weight-值在Android上的React-Native中没有效果\" class=\"headerlink\" title=\"3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果\"></a>3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果</h4><a name=\"vKvKA\"></a><h4 id=\"4-设置背景图片\"><a href=\"#4-设置背景图片\" class=\"headerlink\" title=\"4. 设置背景图片\"></a>4. 设置背景图片</h4>React Native 的 Background 仅支持 backgroundColor 属性，所以需要设置背景图片时需要采用ImageBackground组件;<br><a name=\"dTgEw\"></a><h4 id=\"5-RN阴影样式属性\"><a href=\"#5-RN阴影样式属性\" class=\"headerlink\" title=\"5. RN阴影样式属性\"></a>5. RN阴影样式属性</h4>其仅支持ios平台，在Android中需要使用elevation属性实现，但elevation仅提供一个灰色阴影。<br>react-native-shadow还需研究一下。mark<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system_android ? (</span><br><span class=\"line\">      &lt;BoxShadow</span><br><span class=\"line\">        setting=&#123;&#123;</span><br><span class=\"line\">          width: rpx2px(width),</span><br><span class=\"line\">          height: rpx2px(height),</span><br><span class=\"line\">          color: color,</span><br><span class=\"line\">          border: rpx2px(border || <span class=\"number\">0</span>) || <span class=\"number\">2</span>,</span><br><span class=\"line\">          radius: rpx2px(radius),</span><br><span class=\"line\">          opacity: opacity,</span><br><span class=\"line\">          x: rpx2px(offsetX),</span><br><span class=\"line\">          y: rpx2px(offsetY),</span><br><span class=\"line\">          style: &#123; <span class=\"attr\">marginVertical</span>: <span class=\"number\">0</span>, <span class=\"attr\">justifyContent</span>: <span class=\"string\">\"center\"</span> &#125;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.children&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/BoxShadow&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">      this.props.children</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a name=\"pVbRR\"></a></p>\n<h4 id=\"6-box-sizing不支持\"><a href=\"#6-box-sizing不支持\" class=\"headerlink\" title=\"6. box-sizing不支持\"></a>6. box-sizing不支持</h4><p><a name=\"yp5sZ\"></a></p>\n<h4 id=\"7-padding失效问题\"><a href=\"#7-padding失效问题\" class=\"headerlink\" title=\"7. padding失效问题\"></a>7. padding失效问题</h4><p>将文本内容设置为<code>flex: 1;</code><br><a name=\"ugtC6\"></a></p>\n<h4 id=\"8-rn的flexBox布局问题\"><a href=\"#8-rn的flexBox布局问题\" class=\"headerlink\" title=\"8. rn的flexBox布局问题\"></a>8. rn的flexBox布局问题</h4><p>默认flex-direction是column。<br><a name=\"iC9eV\"></a></p>\n<h4 id=\"9-不支持伪元素写法\"><a href=\"#9-不支持伪元素写法\" class=\"headerlink\" title=\"9. 不支持伪元素写法\"></a>9. 不支持伪元素写法</h4><p><a name=\"vVbH2\"></a></p>\n<h4 id=\"10-Failed-prop-type-Invalid-props-style-key-color-supplied-to-View\"><a href=\"#10-Failed-prop-type-Invalid-props-style-key-color-supplied-to-View\" class=\"headerlink\" title=\"10. Failed prop type: Invalid props.style key color supplied to View\"></a>10. Failed prop type: Invalid props.style key <code>color</code> supplied to <code>View</code></h4><p>同理有类似的Failed prop type: Invalid props.style key <code>fontSize</code> supplied to <code>View</code>。<br>不能给View组件添加color，fontSize等文字样式属性，需要指定Text添加样式属性。<br><a name=\"2JqSv\"></a></p>\n<h4 id=\"11-页面实现滑动需要使用ScrollView\"><a href=\"#11-页面实现滑动需要使用ScrollView\" class=\"headerlink\" title=\"11. 页面实现滑动需要使用ScrollView\"></a>11. 页面实现滑动需要使用ScrollView</h4><p><a name=\"t2NK0\"></a></p>\n<h4 id=\"12-input输入框未显示完全\"><a href=\"#12-input输入框未显示完全\" class=\"headerlink\" title=\"12. input输入框未显示完全\"></a>12. input输入框未显示完全</h4><p>Android 输入框默认带有上下内边距，所以需要将上下padding设置为0。<br>หมดชีวิตที่เห็นเมื่อใดก็เป็นของเธอ<br><a name=\"Oj5Ba\"></a></p>\n<h3 id=\"编译问题\"><a href=\"#编译问题\" class=\"headerlink\" title=\"编译问题\"></a><em>编译问题</em></h3><p><a name=\"lIpu2\"></a></p>\n<h4 id=\"1-react-native编译之后报错\"><a href=\"#1-react-native编译之后报错\" class=\"headerlink\" title=\"1. react-native编译之后报错\"></a>1. react-native编译之后报错</h4><p>error: bundling failed: Error: Unable to resolve module <code>./components/calendar</code> from <code>E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js</code>: The module <code>./components/calendar</code> could not be found from <code>E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js</code>. Indeed, none of these files exist:<br>原因：taro-ui不支持React Native。<br></p>\n<p><a name=\"NyPLz\"></a></p>\n<h4 id=\"2-Application-taroDemo-has-not-been-registered\"><a href=\"#2-Application-taroDemo-has-not-been-registered\" class=\"headerlink\" title=\"2. Application taroDemo has not been registered.\"></a>2. Application taroDemo has not been registered.</h4><pre><code>Hint: This error often happens when you&apos;re running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.&lt;br /&gt; If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run &apos;npm start&apos;).&lt;br /&gt;原因：存在项目终端冲突，关闭所有终端并重启，查看项目内config/index文件是否注册应用名。&lt;br /&gt;因为我用了taro-native-shell这个壳子，所以命名为&apos;taroDemo&apos;。&lt;br /&gt;![微信图片_20200327140918.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585289424201-8a2fbe69-63c3-4df2-b98b-eb7ecef1f74e.png#align=left&amp;display=inline&amp;height=121&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200327140918.png&amp;originHeight=121&amp;originWidth=423&amp;size=4573&amp;status=done&amp;style=none&amp;width=423)&lt;br /&gt;\n</code></pre><p><a name=\"V77r0\"></a></p>\n<h4 id=\"3-Unable-to-load-script-from-assets-‘index-android-bundle’-Make-sure-your-bundle-is-packaged-correctly\"><a href=\"#3-Unable-to-load-script-from-assets-‘index-android-bundle’-Make-sure-your-bundle-is-packaged-correctly\" class=\"headerlink\" title=\"3. Unable to load script from assets ‘index.android.bundle’. Make sure your bundle is packaged correctly\"></a>3. Unable to load script from assets ‘index.android.bundle’. Make sure your bundle is packaged correctly</h4><p>在android/app/arc/main目录下新建一个assets文件，在IDE的terminal以命令启动<code>react-native run-android</code>。<br></p>\n<p><a name=\"fj1lB\"></a></p>\n<h4 id=\"4-运行react-native-start时发现8081端口被占用问题\"><a href=\"#4-运行react-native-start时发现8081端口被占用问题\" class=\"headerlink\" title=\"4. 运行react-native start时发现8081端口被占用问题\"></a>4. 运行react-native start时发现8081端口被占用问题</h4><p>找到占用8081的进程：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -aon |findstr <span class=\"string\">\"8081\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585469950756-fff03a59-91a5-411d-92db-5c69892bf6be.png#align=left&amp;display=inline&amp;height=76&amp;margin=%5Bobject%20Object%5D&amp;name=8081.png&amp;originHeight=76&amp;originWidth=588&amp;size=4407&amp;status=done&amp;style=none&amp;width=588\" alt=\"8081.png\"><br>使用pid杀死占用8081的进程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /pid xxx /F</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585470017430-a9d85a9d-e255-44e1-bad7-80d67e630b2e.png#align=left&amp;display=inline&amp;height=69&amp;margin=%5Bobject%20Object%5D&amp;name=kill-by-pid.png&amp;originHeight=69&amp;originWidth=390&amp;size=3185&amp;status=done&amp;style=none&amp;width=390\" alt=\"kill-by-pid.png\"><br></p>\n<p><a name=\"6EopV\"></a></p>\n<h4 id=\"5-ReferenceError-ReferenceError-Can’t-find-variable-Button-XXXX\"><a href=\"#5-ReferenceError-ReferenceError-Can’t-find-variable-Button-XXXX\" class=\"headerlink\" title=\"5. ReferenceError: ReferenceError: Can’t find variable: Button(XXXX)\"></a>5. ReferenceError: ReferenceError: Can’t find variable: Button(XXXX)</h4><p>解决：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Text,</span><br><span class=\"line\">  View,</span><br><span class=\"line\">  Button,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"BjO3m\"></a></p>\n<h4 id=\"6-undefined-is-not-a-function-evaluating-‘transform-forEach’\"><a href=\"#6-undefined-is-not-a-function-evaluating-‘transform-forEach’\" class=\"headerlink\" title=\"6. undefined is not a function (evaluating ‘transform.forEach’)\"></a>6. undefined is not a function (evaluating ‘transform.forEach’)</h4><p> Warning: Failed prop type: Invalid prop <code>transform</code> of type <code>string</code> supplied to <code>View</code>, expected an array.<br>transform属性详情需要以array的形式：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585476684072-2a4f20ce-a78f-4cc2-b9c3-6f732cff8464.png#align=left&amp;display=inline&amp;height=60&amp;margin=%5Bobject%20Object%5D&amp;name=style-transform-array.png&amp;originHeight=60&amp;originWidth=548&amp;size=3017&amp;status=done&amp;style=none&amp;width=548\" alt=\"style-transform-array.png\"></p>\n<p><a name=\"grScl\"></a></p>\n<h4 id=\"7-Invariant-Violation-View-config-not-found-for-name-slot\"><a href=\"#7-Invariant-Violation-View-config-not-found-for-name-slot\" class=\"headerlink\" title=\"7. Invariant Violation: View config not found for name slot\"></a>7. Invariant Violation: View config not found for name slot</h4><p>return的内容内组件的首字母不是大写，所以需要将组件的首字母写成大写字母。<br></p>\n<p><a name=\"KN7dW\"></a></p>\n<h4 id=\"8-Error-Cannot-add-a-child-that-doesn’t-have-a-YogaNode-to-a-parent-without-a-measure-function\"><a href=\"#8-Error-Cannot-add-a-child-that-doesn’t-have-a-YogaNode-to-a-parent-without-a-measure-function\" class=\"headerlink\" title=\"8. Error: Cannot add a child that doesn’t have a YogaNode to a parent without a measure function!\"></a>8. Error: Cannot add a child that doesn’t have a YogaNode to a parent without a measure function!</h4><p>在render时不建议使用下面这种写法，建议采用三目运算符。<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.amount &amp;&amp; (</span><br><span class=\"line\">     &lt;View&gt;</span><br><span class=\"line\">       &lt;Text&gt;</span><br><span class=\"line\">         hello world</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     &lt;/</span>View&gt;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p>换成：<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.amount ?</span><br><span class=\"line\">       &lt;View&gt;</span><br><span class=\"line\">         &lt;Text&gt;</span><br><span class=\"line\">           hello world</span><br><span class=\"line\">         &lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">       &lt;/</span>View&gt; : <span class=\"literal\">null</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>还有不要有单独的字符串暴露，应使用Text进行包裹。<br></p>\n<p><a name=\"bmAy7\"></a></p>\n<h4 id=\"9-TypeError-undefined-is-not-an-object-evaluating-‘course-posters-banner’\"><a href=\"#9-TypeError-undefined-is-not-an-object-evaluating-‘course-posters-banner’\" class=\"headerlink\" title=\"9. TypeError: undefined is not an object (evaluating ‘course.posters.banner’)\"></a>9. TypeError: undefined is not an object (evaluating ‘course.posters.banner’)</h4><p>需要对变量进行初始化或者值判断。<br></p>\n<p><a name=\"KIuKW\"></a></p>\n<h4 id=\"10-Error-while-updating-property-‘height’-in-shadow-node-of-type-RCTView\"><a href=\"#10-Error-while-updating-property-‘height’-in-shadow-node-of-type-RCTView\" class=\"headerlink\" title=\"10. Error while updating property ‘height’ in shadow node of type: RCTView\"></a>10. Error while updating property ‘height’ in shadow node of type: RCTView</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585535630906-8a344136-4f69-4d1b-9c6d-7454438b8c12.png#align=left&amp;display=inline&amp;height=169&amp;margin=%5Bobject%20Object%5D&amp;name=height-value-type.png&amp;originHeight=169&amp;originWidth=463&amp;size=64259&amp;status=done&amp;style=none&amp;width=463\" alt=\"height-value-type.png\"><br>在reactNative 写样式的时候  宽、高、padding等值不能是字符串。<br></p>\n<p><a name=\"S619d\"></a></p>\n<h4 id=\"11-Failed-prop-type-Invalid-props-style-key-transform-origin-supplied-to-‘Image’\"><a href=\"#11-Failed-prop-type-Invalid-props-style-key-transform-origin-supplied-to-‘Image’\" class=\"headerlink\" title=\"11. Failed prop type: Invalid props.style key transform-origin supplied to ‘Image’\"></a>11. Failed prop type: Invalid props.style key <code>transform-origin</code> supplied to ‘Image’</h4><p><a name=\"dZojP\"></a></p>\n<h4 id=\"12-Error-while-updating-property-‘transform’-of-a-view-managed-by-RCTImageView\"><a href=\"#12-Error-while-updating-property-‘transform’-of-a-view-managed-by-RCTImageView\" class=\"headerlink\" title=\"12. Error while updating property ‘transform’ of a view managed by: RCTImageView\"></a>12. Error while updating property ‘transform’ of a view managed by: RCTImageView</h4><p>因为我的transform内有rotate的操作，我原来是直接设置<code>rotate: rotateValue+&#39;deg&#39;</code>，但是发现会出现上述报错，后来看了相关问题需要通过插值器的方法将int转换成他需要的deg。<br><a href=\"https://www.jianshu.com/p/e131375eb8c4\" target=\"_blank\" rel=\"noopener\">React Native loading旋转动画的实现</a><br></p>\n<p><a name=\"ca5yW\"></a></p>\n<h4 id=\"13-has-been-blocked-by-CORS-policy\"><a href=\"#13-has-been-blocked-by-CORS-policy\" class=\"headerlink\" title=\"13. has been blocked by CORS policy\"></a>13. has been blocked by CORS policy</h4><p>Access to fetch at ‘<a href=\"http://localhost:8081/rn_temp/index.delta?platform=android&amp;dev=true&amp;minify=false&#39;\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/rn_temp/index.delta?platform=android&amp;dev=true&amp;minify=false&#39;</a> from origin ‘<a href=\"http://127.0.0.1:8081&#39;\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081&#39;</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.<br>访问的域名不同导致, 浏览器地址栏为127.0.0.1:8081/debugger-ui/, 真机或模拟器访问的地址为<a href=\"http://localhost:8081/rn_temp/index.bundle?platform=android&amp;dev=true。\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/rn_temp/index.bundle?platform=android&amp;dev=true。</a><br></p>\n<p><a name=\"MgIQl\"></a></p>\n<h4 id=\"14-React-createElement-type-is-invalid\"><a href=\"#14-React-createElement-type-is-invalid\" class=\"headerlink\" title=\"14.  React.createElement: type is invalid\"></a>14.  React.createElement: type is invalid</h4><p>React.createElement: type is invalid – expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.<br>可能是引入子组件时出现问题，我原来子组件内export组件为<br><br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 调整为</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"x0xQX\"></a></p>\n<h4 id=\"15-Element-type-is-invalid-expected-a-string-for-built-in-components-or-a-class-function-for-composite-components-but-got-undefined-You-likely-forgot-to-export-your-component-from-the-file-it’s-defined-in-or-you-might-have-mixed-up-default-and-named-imports\"><a href=\"#15-Element-type-is-invalid-expected-a-string-for-built-in-components-or-a-class-function-for-composite-components-but-got-undefined-You-likely-forgot-to-export-your-component-from-the-file-it’s-defined-in-or-you-might-have-mixed-up-default-and-named-imports\" class=\"headerlink\" title=\"15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.\"></a>15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.</h4><p>存在无效元素，可以是引入的组件或工具路径错误等。<br></p>\n<p><a name=\"RABEe\"></a></p>\n<h4 id=\"16-Object-freeze-can-only-be-called-on-Objects\"><a href=\"#16-Object-freeze-can-only-be-called-on-Objects\" class=\"headerlink\" title=\"16. Object.freeze can only be called on Objects\"></a>16. Object.freeze can only be called on Objects</h4><p>同Q2。<br><a name=\"S0mJl\"></a></p>\n<h3 id=\"Taro-Api-React-Native支持度\"><a href=\"#Taro-Api-React-Native支持度\" class=\"headerlink\" title=\"Taro Api React Native支持度\"></a><em>Taro Api React Native支持度</em></h3><p><a name=\"0trSF\"></a></p>\n<h4 id=\"1-不支持Taro-addInterceptor\"><a href=\"#1-不支持Taro-addInterceptor\" class=\"headerlink\" title=\"1. 不支持Taro.addInterceptor\"></a>1. 不支持Taro.addInterceptor</h4><p><a name=\"z7eKf\"></a></p>\n<h4 id=\"2-React-Native暂不支持storage的同步存取（Taro-get-set-StorageSync）\"><a href=\"#2-React-Native暂不支持storage的同步存取（Taro-get-set-StorageSync）\" class=\"headerlink\" title=\"2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）\"></a>2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）</h4><p>所以需要使用async / await + Taro.(get/set)Storage 实现，在使用时需要添加环境判断。<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regeneratorRuntime is not defined</span><br></pre></td></tr></table></figure></p>\n<p>解决:<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @tarojs/async-await</span><br><span class=\"line\"><span class=\"comment\"># 或者使用 npm</span></span><br><span class=\"line\">$ npm install --save @tarojs/async-await</span><br></pre></td></tr></table></figure></p>\n<p>在有异步操作的 页面内引入import ‘@tarojs/async-await’。<br>开启 async functions 支持需要安装包 <code>babel-plugin-transform-runtime</code> 和<code>babel-runtime</code>。<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add babel-plugin-transform-runtime --dev</span><br><span class=\"line\">$ yarn add babel-runtime</span><br></pre></td></tr></table></figure></p>\n<p>随后修改项目 <a href=\"https://nervjs.github.io/taro/docs/config-detail.html#babel\" target=\"_blank\" rel=\"noopener\"><code>babel</code> 配置</a>，增加插件 <code>babel-plugin-transform-runtime</code>。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel: &#123;</span><br><span class=\"line\">  sourceMap: true,</span><br><span class=\"line\">  presets: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      'env',</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        modules: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    'transform-decorators-legacy',</span><br><span class=\"line\">    'transform-class-properties',</span><br><span class=\"line\">    'transform-object-rest-spread',</span><br><span class=\"line\">    ['transform-runtime', &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"helpers\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"polyfill\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"regenerator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"moduleName\"</span>: 'babel-runtime'</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br>写一个相关的存取事件，在需要时async/await进行存取。<br></p>\n<p><a name=\"Vit1J\"></a></p>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a><em>其他问题</em></h3><p><a name=\"g8WBO\"></a></p>\n<h4 id=\"1-真机内页面无法有效上滑\"><a href=\"#1-真机内页面无法有效上滑\" class=\"headerlink\" title=\"1. 真机内页面无法有效上滑\"></a>1. 真机内页面无法有效上滑</h4>","site":{"data":{}},"excerpt":"","more":"<p><a name=\"eUUSe\"></a></p>\n<h3 id=\"写在前头（Taro内）\"><a href=\"#写在前头（Taro内）\" class=\"headerlink\" title=\"写在前头（Taro内）\"></a><em>写在前头（Taro内）</em></h3><ul>\n<li>文字要包在 <code>Text</code> 组件里面，否则不显示。</li>\n<li><code>position:fixed</code> React Native 不支持</li>\n<li>Animation 和 transform React Native 动画不支持</li>\n<li>React Native 与 H5/小程序 的 Flex 布局相关属性的默认值有差异<br><a name=\"i5vbr\"></a><h3 id=\"RN样式相关问题\"><a href=\"#RN样式相关问题\" class=\"headerlink\" title=\"RN样式相关问题\"></a><em>RN样式相关问题</em></h3><a name=\"saOp6\"></a><h4 id=\"1-通配选择器会被忽略\"><a href=\"#1-通配选择器会被忽略\" class=\"headerlink\" title=\"1. 通配选择器会被忽略\"></a>1. 通配选择器会被忽略</h4><a name=\"NiCNh\"></a><h4 id=\"2-background-size样式属性无效\"><a href=\"#2-background-size样式属性无效\" class=\"headerlink\" title=\"2. background-size样式属性无效\"></a>2. background-size样式属性无效</h4><a name=\"swIZ2\"></a><h4 id=\"3-400-700，normal-或-bold-之外的-font-weight-值在Android上的React-Native中没有效果\"><a href=\"#3-400-700，normal-或-bold-之外的-font-weight-值在Android上的React-Native中没有效果\" class=\"headerlink\" title=\"3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果\"></a>3. 400,700，normal 或 bold 之外的 font-weight 值在Android上的React Native中没有效果</h4><a name=\"vKvKA\"></a><h4 id=\"4-设置背景图片\"><a href=\"#4-设置背景图片\" class=\"headerlink\" title=\"4. 设置背景图片\"></a>4. 设置背景图片</h4>React Native 的 Background 仅支持 backgroundColor 属性，所以需要设置背景图片时需要采用ImageBackground组件;<br><a name=\"dTgEw\"></a><h4 id=\"5-RN阴影样式属性\"><a href=\"#5-RN阴影样式属性\" class=\"headerlink\" title=\"5. RN阴影样式属性\"></a>5. RN阴影样式属性</h4>其仅支持ios平台，在Android中需要使用elevation属性实现，但elevation仅提供一个灰色阴影。<br>react-native-shadow还需研究一下。mark<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system_android ? (</span><br><span class=\"line\">      &lt;BoxShadow</span><br><span class=\"line\">        setting=&#123;&#123;</span><br><span class=\"line\">          width: rpx2px(width),</span><br><span class=\"line\">          height: rpx2px(height),</span><br><span class=\"line\">          color: color,</span><br><span class=\"line\">          border: rpx2px(border || <span class=\"number\">0</span>) || <span class=\"number\">2</span>,</span><br><span class=\"line\">          radius: rpx2px(radius),</span><br><span class=\"line\">          opacity: opacity,</span><br><span class=\"line\">          x: rpx2px(offsetX),</span><br><span class=\"line\">          y: rpx2px(offsetY),</span><br><span class=\"line\">          style: &#123; <span class=\"attr\">marginVertical</span>: <span class=\"number\">0</span>, <span class=\"attr\">justifyContent</span>: <span class=\"string\">\"center\"</span> &#125;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.children&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/BoxShadow&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">      this.props.children</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a name=\"pVbRR\"></a></p>\n<h4 id=\"6-box-sizing不支持\"><a href=\"#6-box-sizing不支持\" class=\"headerlink\" title=\"6. box-sizing不支持\"></a>6. box-sizing不支持</h4><p><a name=\"yp5sZ\"></a></p>\n<h4 id=\"7-padding失效问题\"><a href=\"#7-padding失效问题\" class=\"headerlink\" title=\"7. padding失效问题\"></a>7. padding失效问题</h4><p>将文本内容设置为<code>flex: 1;</code><br><a name=\"ugtC6\"></a></p>\n<h4 id=\"8-rn的flexBox布局问题\"><a href=\"#8-rn的flexBox布局问题\" class=\"headerlink\" title=\"8. rn的flexBox布局问题\"></a>8. rn的flexBox布局问题</h4><p>默认flex-direction是column。<br><a name=\"iC9eV\"></a></p>\n<h4 id=\"9-不支持伪元素写法\"><a href=\"#9-不支持伪元素写法\" class=\"headerlink\" title=\"9. 不支持伪元素写法\"></a>9. 不支持伪元素写法</h4><p><a name=\"vVbH2\"></a></p>\n<h4 id=\"10-Failed-prop-type-Invalid-props-style-key-color-supplied-to-View\"><a href=\"#10-Failed-prop-type-Invalid-props-style-key-color-supplied-to-View\" class=\"headerlink\" title=\"10. Failed prop type: Invalid props.style key color supplied to View\"></a>10. Failed prop type: Invalid props.style key <code>color</code> supplied to <code>View</code></h4><p>同理有类似的Failed prop type: Invalid props.style key <code>fontSize</code> supplied to <code>View</code>。<br>不能给View组件添加color，fontSize等文字样式属性，需要指定Text添加样式属性。<br><a name=\"2JqSv\"></a></p>\n<h4 id=\"11-页面实现滑动需要使用ScrollView\"><a href=\"#11-页面实现滑动需要使用ScrollView\" class=\"headerlink\" title=\"11. 页面实现滑动需要使用ScrollView\"></a>11. 页面实现滑动需要使用ScrollView</h4><p><a name=\"t2NK0\"></a></p>\n<h4 id=\"12-input输入框未显示完全\"><a href=\"#12-input输入框未显示完全\" class=\"headerlink\" title=\"12. input输入框未显示完全\"></a>12. input输入框未显示完全</h4><p>Android 输入框默认带有上下内边距，所以需要将上下padding设置为0。<br>หมดชีวิตที่เห็นเมื่อใดก็เป็นของเธอ<br><a name=\"Oj5Ba\"></a></p>\n<h3 id=\"编译问题\"><a href=\"#编译问题\" class=\"headerlink\" title=\"编译问题\"></a><em>编译问题</em></h3><p><a name=\"lIpu2\"></a></p>\n<h4 id=\"1-react-native编译之后报错\"><a href=\"#1-react-native编译之后报错\" class=\"headerlink\" title=\"1. react-native编译之后报错\"></a>1. react-native编译之后报错</h4><p>error: bundling failed: Error: Unable to resolve module <code>./components/calendar</code> from <code>E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js</code>: The module <code>./components/calendar</code> could not be found from <code>E:\\httishere\\work\\manual-box-wechat-app\\node_modules\\taro-ui\\dist\\weapp\\index.js</code>. Indeed, none of these files exist:<br>原因：taro-ui不支持React Native。<br></p>\n<p><a name=\"NyPLz\"></a></p>\n<h4 id=\"2-Application-taroDemo-has-not-been-registered\"><a href=\"#2-Application-taroDemo-has-not-been-registered\" class=\"headerlink\" title=\"2. Application taroDemo has not been registered.\"></a>2. Application taroDemo has not been registered.</h4><pre><code>Hint: This error often happens when you&apos;re running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.&lt;br /&gt; If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run &apos;npm start&apos;).&lt;br /&gt;原因：存在项目终端冲突，关闭所有终端并重启，查看项目内config/index文件是否注册应用名。&lt;br /&gt;因为我用了taro-native-shell这个壳子，所以命名为&apos;taroDemo&apos;。&lt;br /&gt;![微信图片_20200327140918.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1585289424201-8a2fbe69-63c3-4df2-b98b-eb7ecef1f74e.png#align=left&amp;display=inline&amp;height=121&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200327140918.png&amp;originHeight=121&amp;originWidth=423&amp;size=4573&amp;status=done&amp;style=none&amp;width=423)&lt;br /&gt;\n</code></pre><p><a name=\"V77r0\"></a></p>\n<h4 id=\"3-Unable-to-load-script-from-assets-‘index-android-bundle’-Make-sure-your-bundle-is-packaged-correctly\"><a href=\"#3-Unable-to-load-script-from-assets-‘index-android-bundle’-Make-sure-your-bundle-is-packaged-correctly\" class=\"headerlink\" title=\"3. Unable to load script from assets ‘index.android.bundle’. Make sure your bundle is packaged correctly\"></a>3. Unable to load script from assets ‘index.android.bundle’. Make sure your bundle is packaged correctly</h4><p>在android/app/arc/main目录下新建一个assets文件，在IDE的terminal以命令启动<code>react-native run-android</code>。<br></p>\n<p><a name=\"fj1lB\"></a></p>\n<h4 id=\"4-运行react-native-start时发现8081端口被占用问题\"><a href=\"#4-运行react-native-start时发现8081端口被占用问题\" class=\"headerlink\" title=\"4. 运行react-native start时发现8081端口被占用问题\"></a>4. 运行react-native start时发现8081端口被占用问题</h4><p>找到占用8081的进程：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -aon |findstr <span class=\"string\">\"8081\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585469950756-fff03a59-91a5-411d-92db-5c69892bf6be.png#align=left&amp;display=inline&amp;height=76&amp;margin=%5Bobject%20Object%5D&amp;name=8081.png&amp;originHeight=76&amp;originWidth=588&amp;size=4407&amp;status=done&amp;style=none&amp;width=588\" alt=\"8081.png\"><br>使用pid杀死占用8081的进程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /pid xxx /F</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585470017430-a9d85a9d-e255-44e1-bad7-80d67e630b2e.png#align=left&amp;display=inline&amp;height=69&amp;margin=%5Bobject%20Object%5D&amp;name=kill-by-pid.png&amp;originHeight=69&amp;originWidth=390&amp;size=3185&amp;status=done&amp;style=none&amp;width=390\" alt=\"kill-by-pid.png\"><br></p>\n<p><a name=\"6EopV\"></a></p>\n<h4 id=\"5-ReferenceError-ReferenceError-Can’t-find-variable-Button-XXXX\"><a href=\"#5-ReferenceError-ReferenceError-Can’t-find-variable-Button-XXXX\" class=\"headerlink\" title=\"5. ReferenceError: ReferenceError: Can’t find variable: Button(XXXX)\"></a>5. ReferenceError: ReferenceError: Can’t find variable: Button(XXXX)</h4><p>解决：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Text,</span><br><span class=\"line\">  View,</span><br><span class=\"line\">  Button,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"BjO3m\"></a></p>\n<h4 id=\"6-undefined-is-not-a-function-evaluating-‘transform-forEach’\"><a href=\"#6-undefined-is-not-a-function-evaluating-‘transform-forEach’\" class=\"headerlink\" title=\"6. undefined is not a function (evaluating ‘transform.forEach’)\"></a>6. undefined is not a function (evaluating ‘transform.forEach’)</h4><p> Warning: Failed prop type: Invalid prop <code>transform</code> of type <code>string</code> supplied to <code>View</code>, expected an array.<br>transform属性详情需要以array的形式：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585476684072-2a4f20ce-a78f-4cc2-b9c3-6f732cff8464.png#align=left&amp;display=inline&amp;height=60&amp;margin=%5Bobject%20Object%5D&amp;name=style-transform-array.png&amp;originHeight=60&amp;originWidth=548&amp;size=3017&amp;status=done&amp;style=none&amp;width=548\" alt=\"style-transform-array.png\"></p>\n<p><a name=\"grScl\"></a></p>\n<h4 id=\"7-Invariant-Violation-View-config-not-found-for-name-slot\"><a href=\"#7-Invariant-Violation-View-config-not-found-for-name-slot\" class=\"headerlink\" title=\"7. Invariant Violation: View config not found for name slot\"></a>7. Invariant Violation: View config not found for name slot</h4><p>return的内容内组件的首字母不是大写，所以需要将组件的首字母写成大写字母。<br></p>\n<p><a name=\"KN7dW\"></a></p>\n<h4 id=\"8-Error-Cannot-add-a-child-that-doesn’t-have-a-YogaNode-to-a-parent-without-a-measure-function\"><a href=\"#8-Error-Cannot-add-a-child-that-doesn’t-have-a-YogaNode-to-a-parent-without-a-measure-function\" class=\"headerlink\" title=\"8. Error: Cannot add a child that doesn’t have a YogaNode to a parent without a measure function!\"></a>8. Error: Cannot add a child that doesn’t have a YogaNode to a parent without a measure function!</h4><p>在render时不建议使用下面这种写法，建议采用三目运算符。<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.amount &amp;&amp; (</span><br><span class=\"line\">     &lt;View&gt;</span><br><span class=\"line\">       &lt;Text&gt;</span><br><span class=\"line\">         hello world</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     &lt;/</span>View&gt;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p>换成：<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.amount ?</span><br><span class=\"line\">       &lt;View&gt;</span><br><span class=\"line\">         &lt;Text&gt;</span><br><span class=\"line\">           hello world</span><br><span class=\"line\">         &lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">       &lt;/</span>View&gt; : <span class=\"literal\">null</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>还有不要有单独的字符串暴露，应使用Text进行包裹。<br></p>\n<p><a name=\"bmAy7\"></a></p>\n<h4 id=\"9-TypeError-undefined-is-not-an-object-evaluating-‘course-posters-banner’\"><a href=\"#9-TypeError-undefined-is-not-an-object-evaluating-‘course-posters-banner’\" class=\"headerlink\" title=\"9. TypeError: undefined is not an object (evaluating ‘course.posters.banner’)\"></a>9. TypeError: undefined is not an object (evaluating ‘course.posters.banner’)</h4><p>需要对变量进行初始化或者值判断。<br></p>\n<p><a name=\"KIuKW\"></a></p>\n<h4 id=\"10-Error-while-updating-property-‘height’-in-shadow-node-of-type-RCTView\"><a href=\"#10-Error-while-updating-property-‘height’-in-shadow-node-of-type-RCTView\" class=\"headerlink\" title=\"10. Error while updating property ‘height’ in shadow node of type: RCTView\"></a>10. Error while updating property ‘height’ in shadow node of type: RCTView</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1585535630906-8a344136-4f69-4d1b-9c6d-7454438b8c12.png#align=left&amp;display=inline&amp;height=169&amp;margin=%5Bobject%20Object%5D&amp;name=height-value-type.png&amp;originHeight=169&amp;originWidth=463&amp;size=64259&amp;status=done&amp;style=none&amp;width=463\" alt=\"height-value-type.png\"><br>在reactNative 写样式的时候  宽、高、padding等值不能是字符串。<br></p>\n<p><a name=\"S619d\"></a></p>\n<h4 id=\"11-Failed-prop-type-Invalid-props-style-key-transform-origin-supplied-to-‘Image’\"><a href=\"#11-Failed-prop-type-Invalid-props-style-key-transform-origin-supplied-to-‘Image’\" class=\"headerlink\" title=\"11. Failed prop type: Invalid props.style key transform-origin supplied to ‘Image’\"></a>11. Failed prop type: Invalid props.style key <code>transform-origin</code> supplied to ‘Image’</h4><p><a name=\"dZojP\"></a></p>\n<h4 id=\"12-Error-while-updating-property-‘transform’-of-a-view-managed-by-RCTImageView\"><a href=\"#12-Error-while-updating-property-‘transform’-of-a-view-managed-by-RCTImageView\" class=\"headerlink\" title=\"12. Error while updating property ‘transform’ of a view managed by: RCTImageView\"></a>12. Error while updating property ‘transform’ of a view managed by: RCTImageView</h4><p>因为我的transform内有rotate的操作，我原来是直接设置<code>rotate: rotateValue+&#39;deg&#39;</code>，但是发现会出现上述报错，后来看了相关问题需要通过插值器的方法将int转换成他需要的deg。<br><a href=\"https://www.jianshu.com/p/e131375eb8c4\" target=\"_blank\" rel=\"noopener\">React Native loading旋转动画的实现</a><br></p>\n<p><a name=\"ca5yW\"></a></p>\n<h4 id=\"13-has-been-blocked-by-CORS-policy\"><a href=\"#13-has-been-blocked-by-CORS-policy\" class=\"headerlink\" title=\"13. has been blocked by CORS policy\"></a>13. has been blocked by CORS policy</h4><p>Access to fetch at ‘<a href=\"http://localhost:8081/rn_temp/index.delta?platform=android&amp;dev=true&amp;minify=false&#39;\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/rn_temp/index.delta?platform=android&amp;dev=true&amp;minify=false&#39;</a> from origin ‘<a href=\"http://127.0.0.1:8081&#39;\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081&#39;</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.<br>访问的域名不同导致, 浏览器地址栏为127.0.0.1:8081/debugger-ui/, 真机或模拟器访问的地址为<a href=\"http://localhost:8081/rn_temp/index.bundle?platform=android&amp;dev=true。\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/rn_temp/index.bundle?platform=android&amp;dev=true。</a><br></p>\n<p><a name=\"MgIQl\"></a></p>\n<h4 id=\"14-React-createElement-type-is-invalid\"><a href=\"#14-React-createElement-type-is-invalid\" class=\"headerlink\" title=\"14.  React.createElement: type is invalid\"></a>14.  React.createElement: type is invalid</h4><p>React.createElement: type is invalid – expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.<br>可能是引入子组件时出现问题，我原来子组件内export组件为<br><br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 调整为</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>\n<p><a name=\"x0xQX\"></a></p>\n<h4 id=\"15-Element-type-is-invalid-expected-a-string-for-built-in-components-or-a-class-function-for-composite-components-but-got-undefined-You-likely-forgot-to-export-your-component-from-the-file-it’s-defined-in-or-you-might-have-mixed-up-default-and-named-imports\"><a href=\"#15-Element-type-is-invalid-expected-a-string-for-built-in-components-or-a-class-function-for-composite-components-but-got-undefined-You-likely-forgot-to-export-your-component-from-the-file-it’s-defined-in-or-you-might-have-mixed-up-default-and-named-imports\" class=\"headerlink\" title=\"15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.\"></a>15. Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports.</h4><p>存在无效元素，可以是引入的组件或工具路径错误等。<br></p>\n<p><a name=\"RABEe\"></a></p>\n<h4 id=\"16-Object-freeze-can-only-be-called-on-Objects\"><a href=\"#16-Object-freeze-can-only-be-called-on-Objects\" class=\"headerlink\" title=\"16. Object.freeze can only be called on Objects\"></a>16. Object.freeze can only be called on Objects</h4><p>同Q2。<br><a name=\"S0mJl\"></a></p>\n<h3 id=\"Taro-Api-React-Native支持度\"><a href=\"#Taro-Api-React-Native支持度\" class=\"headerlink\" title=\"Taro Api React Native支持度\"></a><em>Taro Api React Native支持度</em></h3><p><a name=\"0trSF\"></a></p>\n<h4 id=\"1-不支持Taro-addInterceptor\"><a href=\"#1-不支持Taro-addInterceptor\" class=\"headerlink\" title=\"1. 不支持Taro.addInterceptor\"></a>1. 不支持Taro.addInterceptor</h4><p><a name=\"z7eKf\"></a></p>\n<h4 id=\"2-React-Native暂不支持storage的同步存取（Taro-get-set-StorageSync）\"><a href=\"#2-React-Native暂不支持storage的同步存取（Taro-get-set-StorageSync）\" class=\"headerlink\" title=\"2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）\"></a>2. React Native暂不支持storage的同步存取（Taro.(get/set)StorageSync）</h4><p>所以需要使用async / await + Taro.(get/set)Storage 实现，在使用时需要添加环境判断。<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regeneratorRuntime is not defined</span><br></pre></td></tr></table></figure></p>\n<p>解决:<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @tarojs/async-await</span><br><span class=\"line\"><span class=\"comment\"># 或者使用 npm</span></span><br><span class=\"line\">$ npm install --save @tarojs/async-await</span><br></pre></td></tr></table></figure></p>\n<p>在有异步操作的 页面内引入import ‘@tarojs/async-await’。<br>开启 async functions 支持需要安装包 <code>babel-plugin-transform-runtime</code> 和<code>babel-runtime</code>。<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add babel-plugin-transform-runtime --dev</span><br><span class=\"line\">$ yarn add babel-runtime</span><br></pre></td></tr></table></figure></p>\n<p>随后修改项目 <a href=\"https://nervjs.github.io/taro/docs/config-detail.html#babel\" target=\"_blank\" rel=\"noopener\"><code>babel</code> 配置</a>，增加插件 <code>babel-plugin-transform-runtime</code>。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel: &#123;</span><br><span class=\"line\">  sourceMap: true,</span><br><span class=\"line\">  presets: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      'env',</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        modules: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    'transform-decorators-legacy',</span><br><span class=\"line\">    'transform-class-properties',</span><br><span class=\"line\">    'transform-object-rest-spread',</span><br><span class=\"line\">    ['transform-runtime', &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"helpers\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"polyfill\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"regenerator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"moduleName\"</span>: 'babel-runtime'</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br>写一个相关的存取事件，在需要时async/await进行存取。<br></p>\n<p><a name=\"Vit1J\"></a></p>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a><em>其他问题</em></h3><p><a name=\"g8WBO\"></a></p>\n<h4 id=\"1-真机内页面无法有效上滑\"><a href=\"#1-真机内页面无法有效上滑\" class=\"headerlink\" title=\"1. 真机内页面无法有效上滑\"></a>1. 真机内页面无法有效上滑</h4>"},{"title":"Vue-cli3构建静态网站页面","urlname":"uiq7gi","date":"2020-04-11T06:44:41.000Z","_content":"<!doctype html><div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"></div>\n","source":"_posts/yuque/Vue-cli3构建静态网站页面.md","raw":"\n---\n\ntitle: Vue-cli3构建静态网站页面\n\nurlname: uiq7gi\n\ndate: 2020-04-11 14:44:41 +0800\n\ntags: []\n\ncategories: []\n\n---\n<!doctype html><div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"></div>\n","slug":"yuque/Vue-cli3构建静态网站页面","published":1,"updated":"2020-04-22T02:25:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqr002te36kno6ntwhu","content":"<p>&lt;!doctype html&gt;<div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"></div></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&lt;!doctype html&gt;<div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"></div></p>\n"},{"title":"Weekly sharing 02（20190304）","urlname":"yvtvta","date":"2019-03-08T02:37:41.000Z","_content":"（题图 杭州 2019冬）<br />原理<br />1、访问微博时的运转流程（Nginx+PHP-FPM的工作原理）：<br />www.weibo.com<br />|<br />|<br />Nginx<br />|<br />|<br />路由到www.weibo.com/index.php<br />|<br />|<br />加载nginx的fast-cgi模块<br />|<br />|<br />fast-cgi监听127.0.0.1:9000地址<br />|<br />|<br />www.weibo.com/index.php请求到达127.0.0.1:9000<br />|<br />|<br />php-fpm 监听127.0.0.1:9000<br />|<br />|<br />php-fpm 接收到请求，启用worker进程处理请求<br />|<br />|<br />php-fpm 处理完请求，返回给nginx<br />|<br />|<br />nginx将结果通过http返回给浏览器<br />（来源：微博@古月中心相心）<br />教程<br />1、新认识的css属性--box-decoration-break<br />MDN 上英文释意为：The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages。大意是 box-decoration-break 属性规定了一个元素片段在发生折行/断行时，应该如何被渲染。<br />该属性的取值：<br />该属性主要作用于内联元素，当取值为clone时，换行的元素将被赋予相同的样式，最简单的例子：<br />无该属性时效果：（可以看出文字断行时样式同时也会被截断）<br />为text增加该属性：（这样显然美观很多）<br />2、实战情况下的函数防抖和节流<br />JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中，所以 \"执行栈\" 也称 \"函数执行栈\"。<br />在函数被频繁调用时将会造成较大的性能开销也比较大，所以就需要“防抖”和“节流”。<br />防抖（debounce)<br />在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。<br />实现方式：“立即执行”和“非立即执行”。<br />函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。<br />节流（throttle)<br />规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行）<br />实现方式：“时间戳”和“定时器”。<br />函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。<br />主要的应用场景：<br />防抖<br />文本输入搜索联想<br />文本输入验证（包括 Ajax 后端验证）<br />节流<br />鼠标点击<br />监听滚动 scroll<br />窗口 resize<br />mousemove 拖拽<br />实际代码开发中，一般会引入lodash 等相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。<br />3、canvas绘制（<-- MDN文档）<br />相信`canvas`会是很多人初学前端知识的时候会接触到的，但是在后来的学习中除游戏开发外基本不会用到的东西，现在想来重拾一下`canvas`的知识。<br />先在页面内设置一个画布：<br />在js内需判断当前浏览器是否支持canvas：<br />获得其2d对象<br />鼠标绘制只要在于onmousedown事件和onmousemove事件<br />最终效果：<br />工具<br />1、Chrome模拟微信浏览器 -- UA（User agent：用户代理）<br />安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352<br />Ios微信UA：  mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0<br />使用方法：<br />打开浏览的开发者模式<br />增加代理（选择你需要的环境UA）<br />文摘<br />1、AI生成人脸<br />Philip Wang，他是一位来自 Uber的软件工程师。他利用英伟达去年发布的研究成果创作了源源不断的假人像。「每次你刷新这个网站，网络就会从头开始生成新的人脸图像。<br />[https://thispersondoesnotexist.com/](https://thispersondoesnotexist.com/)<br />2、程序员成长之路<br />会用->会查和避免问题->懂高级的API和原理->系统设计能力的成长。<br />程序员的价值关键体现在作品上，被打上作品标签是很大的荣幸。作品影响程度的大小决定了金字塔的层次，所以我会这么去理解程序员的金字塔。<br />塔尖：有世界级作品的<br />塔中：有国民作品的<br />塔基：有公司级作品的<br />（来源：阿里毕玄现身说法：程序员成长路线）<br />3、uber开源<br />Kraken: uber开源的基于P2P的docker镜像仓库，专注于可扩展性和可用性。它专为混合云环境中的docker镜像管理，复制和分发而设计。在uber最繁忙的集群中，Kraken每天分发超过100万个blob，包括100k 1G + blob。在最高生产负荷下，Kraken在30秒内分配20K 100MB-1G的blob。<br />库-->[https://github.com/uber/kraken](https://github.com/uber/kraken)<br />（来源：微博@tonybai_cn）\n\n\n","source":"_posts/yuque/Weekly sharing 02（20190304）.md","raw":"\n---\n\ntitle: Weekly sharing 02（20190304）\n\nurlname: yvtvta\n\ndate: 2019-03-08 10:37:41 +0800\n\ntags: []\n\ncategories: []\n\n---\n（题图 杭州 2019冬）<br />原理<br />1、访问微博时的运转流程（Nginx+PHP-FPM的工作原理）：<br />www.weibo.com<br />|<br />|<br />Nginx<br />|<br />|<br />路由到www.weibo.com/index.php<br />|<br />|<br />加载nginx的fast-cgi模块<br />|<br />|<br />fast-cgi监听127.0.0.1:9000地址<br />|<br />|<br />www.weibo.com/index.php请求到达127.0.0.1:9000<br />|<br />|<br />php-fpm 监听127.0.0.1:9000<br />|<br />|<br />php-fpm 接收到请求，启用worker进程处理请求<br />|<br />|<br />php-fpm 处理完请求，返回给nginx<br />|<br />|<br />nginx将结果通过http返回给浏览器<br />（来源：微博@古月中心相心）<br />教程<br />1、新认识的css属性--box-decoration-break<br />MDN 上英文释意为：The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages。大意是 box-decoration-break 属性规定了一个元素片段在发生折行/断行时，应该如何被渲染。<br />该属性的取值：<br />该属性主要作用于内联元素，当取值为clone时，换行的元素将被赋予相同的样式，最简单的例子：<br />无该属性时效果：（可以看出文字断行时样式同时也会被截断）<br />为text增加该属性：（这样显然美观很多）<br />2、实战情况下的函数防抖和节流<br />JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中，所以 \"执行栈\" 也称 \"函数执行栈\"。<br />在函数被频繁调用时将会造成较大的性能开销也比较大，所以就需要“防抖”和“节流”。<br />防抖（debounce)<br />在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。<br />实现方式：“立即执行”和“非立即执行”。<br />函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。<br />节流（throttle)<br />规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行）<br />实现方式：“时间戳”和“定时器”。<br />函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。<br />主要的应用场景：<br />防抖<br />文本输入搜索联想<br />文本输入验证（包括 Ajax 后端验证）<br />节流<br />鼠标点击<br />监听滚动 scroll<br />窗口 resize<br />mousemove 拖拽<br />实际代码开发中，一般会引入lodash 等相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。<br />3、canvas绘制（<-- MDN文档）<br />相信`canvas`会是很多人初学前端知识的时候会接触到的，但是在后来的学习中除游戏开发外基本不会用到的东西，现在想来重拾一下`canvas`的知识。<br />先在页面内设置一个画布：<br />在js内需判断当前浏览器是否支持canvas：<br />获得其2d对象<br />鼠标绘制只要在于onmousedown事件和onmousemove事件<br />最终效果：<br />工具<br />1、Chrome模拟微信浏览器 -- UA（User agent：用户代理）<br />安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352<br />Ios微信UA：  mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0<br />使用方法：<br />打开浏览的开发者模式<br />增加代理（选择你需要的环境UA）<br />文摘<br />1、AI生成人脸<br />Philip Wang，他是一位来自 Uber的软件工程师。他利用英伟达去年发布的研究成果创作了源源不断的假人像。「每次你刷新这个网站，网络就会从头开始生成新的人脸图像。<br />[https://thispersondoesnotexist.com/](https://thispersondoesnotexist.com/)<br />2、程序员成长之路<br />会用->会查和避免问题->懂高级的API和原理->系统设计能力的成长。<br />程序员的价值关键体现在作品上，被打上作品标签是很大的荣幸。作品影响程度的大小决定了金字塔的层次，所以我会这么去理解程序员的金字塔。<br />塔尖：有世界级作品的<br />塔中：有国民作品的<br />塔基：有公司级作品的<br />（来源：阿里毕玄现身说法：程序员成长路线）<br />3、uber开源<br />Kraken: uber开源的基于P2P的docker镜像仓库，专注于可扩展性和可用性。它专为混合云环境中的docker镜像管理，复制和分发而设计。在uber最繁忙的集群中，Kraken每天分发超过100万个blob，包括100k 1G + blob。在最高生产负荷下，Kraken在30秒内分配20K 100MB-1G的blob。<br />库-->[https://github.com/uber/kraken](https://github.com/uber/kraken)<br />（来源：微博@tonybai_cn）\n\n\n","slug":"yuque/Weekly sharing 02（20190304）","published":1,"updated":"2020-04-22T02:25:07.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqs002we36kogxqfy63","content":"<p>（题图 杭州 2019冬）<br>原理<br>1、访问微博时的运转流程（Nginx+PHP-FPM的工作原理）：<br><a href=\"http://www.weibo.com\" target=\"_blank\" rel=\"noopener\">www.weibo.com</a><br>|<br>|<br>Nginx<br>|<br>|<br>路由到<a href=\"http://www.weibo.com/index.php\" target=\"_blank\" rel=\"noopener\">www.weibo.com/index.php</a><br>|<br>|<br>加载nginx的fast-cgi模块<br>|<br>|<br>fast-cgi监听127.0.0.1:9000地址<br>|<br>|<br><a href=\"http://www.weibo.com/index.php请求到达127.0.0.1:9000\" target=\"_blank\" rel=\"noopener\">www.weibo.com/index.php请求到达127.0.0.1:9000</a><br>|<br>|<br>php-fpm 监听127.0.0.1:9000<br>|<br>|<br>php-fpm 接收到请求，启用worker进程处理请求<br>|<br>|<br>php-fpm 处理完请求，返回给nginx<br>|<br>|<br>nginx将结果通过http返回给浏览器<br>（来源：微博@古月中心相心）<br>教程<br>1、新认识的css属性–box-decoration-break<br>MDN 上英文释意为：The box-decoration-break CSS property specifies how an element’s fragments should be rendered when broken across multiple lines, columns, or pages。大意是 box-decoration-break 属性规定了一个元素片段在发生折行/断行时，应该如何被渲染。<br>该属性的取值：<br>该属性主要作用于内联元素，当取值为clone时，换行的元素将被赋予相同的样式，最简单的例子：<br>无该属性时效果：（可以看出文字断行时样式同时也会被截断）<br>为text增加该属性：（这样显然美观很多）<br>2、实战情况下的函数防抖和节流<br>JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中，所以 “执行栈” 也称 “函数执行栈”。<br>在函数被频繁调用时将会造成较大的性能开销也比较大，所以就需要“防抖”和“节流”。<br>防抖（debounce)<br>在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。<br>实现方式：“立即执行”和“非立即执行”。<br>函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。<br>节流（throttle)<br>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行）<br>实现方式：“时间戳”和“定时器”。<br>函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。<br>主要的应用场景：<br>防抖<br>文本输入搜索联想<br>文本输入验证（包括 Ajax 后端验证）<br>节流<br>鼠标点击<br>监听滚动 scroll<br>窗口 resize<br>mousemove 拖拽<br>实际代码开发中，一般会引入lodash 等相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。<br>3、canvas绘制（&lt;– MDN文档）<br>相信<code>canvas</code>会是很多人初学前端知识的时候会接触到的，但是在后来的学习中除游戏开发外基本不会用到的东西，现在想来重拾一下<code>canvas</code>的知识。<br>先在页面内设置一个画布：<br>在js内需判断当前浏览器是否支持canvas：<br>获得其2d对象<br>鼠标绘制只要在于onmousedown事件和onmousemove事件<br>最终效果：<br>工具<br>1、Chrome模拟微信浏览器 – UA（User agent：用户代理）<br>安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352<br>Ios微信UA：  mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0<br>使用方法：<br>打开浏览的开发者模式<br>增加代理（选择你需要的环境UA）<br>文摘<br>1、AI生成人脸<br>Philip Wang，他是一位来自 Uber的软件工程师。他利用英伟达去年发布的研究成果创作了源源不断的假人像。「每次你刷新这个网站，网络就会从头开始生成新的人脸图像。<br><a href=\"https://thispersondoesnotexist.com/\" target=\"_blank\" rel=\"noopener\">https://thispersondoesnotexist.com/</a><br>2、程序员成长之路<br>会用-&gt;会查和避免问题-&gt;懂高级的API和原理-&gt;系统设计能力的成长。<br>程序员的价值关键体现在作品上，被打上作品标签是很大的荣幸。作品影响程度的大小决定了金字塔的层次，所以我会这么去理解程序员的金字塔。<br>塔尖：有世界级作品的<br>塔中：有国民作品的<br>塔基：有公司级作品的<br>（来源：阿里毕玄现身说法：程序员成长路线）<br>3、uber开源<br>Kraken: uber开源的基于P2P的docker镜像仓库，专注于可扩展性和可用性。它专为混合云环境中的docker镜像管理，复制和分发而设计。在uber最繁忙的集群中，Kraken每天分发超过100万个blob，包括100k 1G + blob。在最高生产负荷下，Kraken在30秒内分配20K 100MB-1G的blob。<br>库–&gt;<a href=\"https://github.com/uber/kraken\" target=\"_blank\" rel=\"noopener\">https://github.com/uber/kraken</a><br>（来源：微博@tonybai_cn）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>（题图 杭州 2019冬）<br>原理<br>1、访问微博时的运转流程（Nginx+PHP-FPM的工作原理）：<br><a href=\"http://www.weibo.com\" target=\"_blank\" rel=\"noopener\">www.weibo.com</a><br>|<br>|<br>Nginx<br>|<br>|<br>路由到<a href=\"http://www.weibo.com/index.php\" target=\"_blank\" rel=\"noopener\">www.weibo.com/index.php</a><br>|<br>|<br>加载nginx的fast-cgi模块<br>|<br>|<br>fast-cgi监听127.0.0.1:9000地址<br>|<br>|<br><a href=\"http://www.weibo.com/index.php请求到达127.0.0.1:9000\" target=\"_blank\" rel=\"noopener\">www.weibo.com/index.php请求到达127.0.0.1:9000</a><br>|<br>|<br>php-fpm 监听127.0.0.1:9000<br>|<br>|<br>php-fpm 接收到请求，启用worker进程处理请求<br>|<br>|<br>php-fpm 处理完请求，返回给nginx<br>|<br>|<br>nginx将结果通过http返回给浏览器<br>（来源：微博@古月中心相心）<br>教程<br>1、新认识的css属性–box-decoration-break<br>MDN 上英文释意为：The box-decoration-break CSS property specifies how an element’s fragments should be rendered when broken across multiple lines, columns, or pages。大意是 box-decoration-break 属性规定了一个元素片段在发生折行/断行时，应该如何被渲染。<br>该属性的取值：<br>该属性主要作用于内联元素，当取值为clone时，换行的元素将被赋予相同的样式，最简单的例子：<br>无该属性时效果：（可以看出文字断行时样式同时也会被截断）<br>为text增加该属性：（这样显然美观很多）<br>2、实战情况下的函数防抖和节流<br>JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中，所以 “执行栈” 也称 “函数执行栈”。<br>在函数被频繁调用时将会造成较大的性能开销也比较大，所以就需要“防抖”和“节流”。<br>防抖（debounce)<br>在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。<br>实现方式：“立即执行”和“非立即执行”。<br>函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。<br>节流（throttle)<br>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行）<br>实现方式：“时间戳”和“定时器”。<br>函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。<br>主要的应用场景：<br>防抖<br>文本输入搜索联想<br>文本输入验证（包括 Ajax 后端验证）<br>节流<br>鼠标点击<br>监听滚动 scroll<br>窗口 resize<br>mousemove 拖拽<br>实际代码开发中，一般会引入lodash 等相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。<br>3、canvas绘制（&lt;– MDN文档）<br>相信<code>canvas</code>会是很多人初学前端知识的时候会接触到的，但是在后来的学习中除游戏开发外基本不会用到的东西，现在想来重拾一下<code>canvas</code>的知识。<br>先在页面内设置一个画布：<br>在js内需判断当前浏览器是否支持canvas：<br>获得其2d对象<br>鼠标绘制只要在于onmousedown事件和onmousemove事件<br>最终效果：<br>工具<br>1、Chrome模拟微信浏览器 – UA（User agent：用户代理）<br>安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352<br>Ios微信UA：  mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0<br>使用方法：<br>打开浏览的开发者模式<br>增加代理（选择你需要的环境UA）<br>文摘<br>1、AI生成人脸<br>Philip Wang，他是一位来自 Uber的软件工程师。他利用英伟达去年发布的研究成果创作了源源不断的假人像。「每次你刷新这个网站，网络就会从头开始生成新的人脸图像。<br><a href=\"https://thispersondoesnotexist.com/\" target=\"_blank\" rel=\"noopener\">https://thispersondoesnotexist.com/</a><br>2、程序员成长之路<br>会用-&gt;会查和避免问题-&gt;懂高级的API和原理-&gt;系统设计能力的成长。<br>程序员的价值关键体现在作品上，被打上作品标签是很大的荣幸。作品影响程度的大小决定了金字塔的层次，所以我会这么去理解程序员的金字塔。<br>塔尖：有世界级作品的<br>塔中：有国民作品的<br>塔基：有公司级作品的<br>（来源：阿里毕玄现身说法：程序员成长路线）<br>3、uber开源<br>Kraken: uber开源的基于P2P的docker镜像仓库，专注于可扩展性和可用性。它专为混合云环境中的docker镜像管理，复制和分发而设计。在uber最繁忙的集群中，Kraken每天分发超过100万个blob，包括100k 1G + blob。在最高生产负荷下，Kraken在30秒内分配20K 100MB-1G的blob。<br>库–&gt;<a href=\"https://github.com/uber/kraken\" target=\"_blank\" rel=\"noopener\">https://github.com/uber/kraken</a><br>（来源：微博@tonybai_cn）</p>\n"},{"title":"Windows环境下docker配置安装","urlname":"qen7rl","date":"2020-02-02T12:30:04.000Z","_content":"tags: [docker, 配置]\ncategories: [docker]\ncover:\n---<br /><!-- more --><br />\n\n1. 开启cpu虚拟化\n\n在任务管理器 → 性能 → 选择CPU → 右侧“虚拟化”属性查看是否开启，若未开启虚拟化，则重启电脑时长按F1/F12（根据电脑类型不同自行查询）进入dios模式，在Configuration选项或者Security选项下找到Virtualization，进入Virtualization后将`Intel (R) ``Virtualization Technology`属性值设为Enable。<br />![vm.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580649379168-febc0a55-5cae-4303-81cd-8df2990aedcf.png#align=left&display=inline&height=304&margin=%5Bobject%20Object%5D&name=vm.PNG&originHeight=304&originWidth=647&size=15454&status=done&style=none&width=647)\n\n2. [docker官网](https://hub.docker.com/editions/community/docker-ce-desktop-windows)下载安装 docker（系统用户名必须为英文）（下载地址：[Docker for Windows](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)）\n\n网盘：\n```\n链接：https://pan.baidu.com/s/1p8e_IBY6qLgMu_Msz_0n-A \n提取码：v4ug\n```\n\n<br />errors：<br />1) start失败<br />![error.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580651886751-15bbd2e4-ae11-439e-a3da-ab50d1928a3a.png#align=left&display=inline&height=866&margin=%5Bobject%20Object%5D&name=error.PNG&originHeight=866&originWidth=1018&size=155367&status=done&style=none&width=1018)<br />原因：docker不支持Windows 家庭版。<br />解决：将Windows家庭版升级为企业版或者专业版并激活。<br />\n\n3. 设置docker的shared dives（工作区），电脑需要设置开机密码\n\n\n\n4. 拉取local-dev-env和项目代码库，两者文件夹平级，并在local-dev-env\\dpcker-compose.yml内增加项目配置\n\n例如：<br />\n\n```yaml\nmaestro-api-gateway:\n    image: registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine\n    environment:\n      # 详细环境变量作用请查看 git@lqbyun.com:devops/nginx-php-fpm-alpine.git 里的 scripts/start.sh\n      WEBROOT: '/var/www/html/public' # 网站根目录\n      ERRORS: 1                       # 是否显示错误，PHP 层级\n      RUN_SCRIPTS: 1                  # 是否运行启动脚本，一般来说是代码库下 scripts 目录下的脚本\n      ENABLE_XDEBUG: 1                # 是否启动 xdebug\n      XDEBUG_CONFIG: \"remote_host=192.168.0.113\" # 设置远程调试主机地址，一般来说为宿主机地址\n      XDEBUG_PORT: 9001               # xdebug 端口，默认开启\n      PUID: 1000                      # 设置容器中 nginx 用户的 uid，最好是和本机的当前用户 uid 保持一致，否则在 Linux,OSX环境下可能会出现权限问题\n      PGID: 1000                      # 设置容器中 nginx 用户的 gid\n    volumes:\n      - E:/httishere/work/maestro-api-gateway:/var/www/html # 宿主机代码目录映射到容器中\n    ports:\n      - \"8015:80\"  \n```\n\n\n5. docker 登录\n```git\ndocker login registry.cn-hangzhou.aliyuncs.com\n// 在Windows系统下须在最前面增加winpty\n```\n\n<br />![docker-login.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580657621970-6de2bb85-4817-47e8-be31-d98df37a0ed1.png#align=left&display=inline&height=100&margin=%5Bobject%20Object%5D&name=docker-login.PNG&originHeight=100&originWidth=770&size=10424&status=done&style=none&width=770)<br />\n\n6. 进入local-dev-env在后台启动并运行所有的容器：`docker-compose up -d`\n\n将docker镜像设置为国内镜像加快速度，网易镜像比较快`http://hub-mirror.c.163.com`\n\n7. 首次添加项目时需要进入项目容器安装项目依赖\n\n\n\n```git\ndocker-compose exec program_name bash\ncomposer install\n```\n\n<br />![composerinstall.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580710175621-5e102702-9f06-43e3-a74b-251e359d5e4f.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&name=composerinstall.png&originHeight=411&originWidth=906&size=44255&status=done&style=none&width=906)<br />若composer install速度较慢可使用国内镜像加快速度，`composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/`，[https://developer.aliyun.com/composer](https://developer.aliyun.com/composer)。<br />\n\n8. docker后台服务运行成功后，进入项目目录，并`npm install` 安装依赖\n\nerrors：<br />1) 安装失败，报错npm ERR! code Z_BUF_ERROR<br />![npm-install.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580698180249-a44d4b92-4f8c-4632-8081-614af727c9dc.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&name=npm-install.PNG&originHeight=184&originWidth=1195&size=14578&status=done&style=none&width=1195)<br />解决：清除npm缓存<br />\n\n```git\nnpm cache clean --force\n```\n![cache.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580698282547-df9678d5-fd2a-41e1-9f8a-2f26a30c79f3.png#align=left&display=inline&height=267&margin=%5Bobject%20Object%5D&name=cache.png&originHeight=267&originWidth=766&size=19726&status=done&style=none&width=766)<br />\n\n9. 使用`yarn watch` 监听项目代码更改\n\n\n\n> 准则：多喝热水，重启试试。\n\n\n","source":"_posts/yuque/Windows环境下docker配置安装.md","raw":"\n---\n\ntitle: Windows环境下docker配置安装\n\nurlname: qen7rl\n\ndate: 2020-02-02 20:30:04 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [docker, 配置]\ncategories: [docker]\ncover:\n---<br /><!-- more --><br />\n\n1. 开启cpu虚拟化\n\n在任务管理器 → 性能 → 选择CPU → 右侧“虚拟化”属性查看是否开启，若未开启虚拟化，则重启电脑时长按F1/F12（根据电脑类型不同自行查询）进入dios模式，在Configuration选项或者Security选项下找到Virtualization，进入Virtualization后将`Intel (R) ``Virtualization Technology`属性值设为Enable。<br />![vm.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580649379168-febc0a55-5cae-4303-81cd-8df2990aedcf.png#align=left&display=inline&height=304&margin=%5Bobject%20Object%5D&name=vm.PNG&originHeight=304&originWidth=647&size=15454&status=done&style=none&width=647)\n\n2. [docker官网](https://hub.docker.com/editions/community/docker-ce-desktop-windows)下载安装 docker（系统用户名必须为英文）（下载地址：[Docker for Windows](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)）\n\n网盘：\n```\n链接：https://pan.baidu.com/s/1p8e_IBY6qLgMu_Msz_0n-A \n提取码：v4ug\n```\n\n<br />errors：<br />1) start失败<br />![error.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580651886751-15bbd2e4-ae11-439e-a3da-ab50d1928a3a.png#align=left&display=inline&height=866&margin=%5Bobject%20Object%5D&name=error.PNG&originHeight=866&originWidth=1018&size=155367&status=done&style=none&width=1018)<br />原因：docker不支持Windows 家庭版。<br />解决：将Windows家庭版升级为企业版或者专业版并激活。<br />\n\n3. 设置docker的shared dives（工作区），电脑需要设置开机密码\n\n\n\n4. 拉取local-dev-env和项目代码库，两者文件夹平级，并在local-dev-env\\dpcker-compose.yml内增加项目配置\n\n例如：<br />\n\n```yaml\nmaestro-api-gateway:\n    image: registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine\n    environment:\n      # 详细环境变量作用请查看 git@lqbyun.com:devops/nginx-php-fpm-alpine.git 里的 scripts/start.sh\n      WEBROOT: '/var/www/html/public' # 网站根目录\n      ERRORS: 1                       # 是否显示错误，PHP 层级\n      RUN_SCRIPTS: 1                  # 是否运行启动脚本，一般来说是代码库下 scripts 目录下的脚本\n      ENABLE_XDEBUG: 1                # 是否启动 xdebug\n      XDEBUG_CONFIG: \"remote_host=192.168.0.113\" # 设置远程调试主机地址，一般来说为宿主机地址\n      XDEBUG_PORT: 9001               # xdebug 端口，默认开启\n      PUID: 1000                      # 设置容器中 nginx 用户的 uid，最好是和本机的当前用户 uid 保持一致，否则在 Linux,OSX环境下可能会出现权限问题\n      PGID: 1000                      # 设置容器中 nginx 用户的 gid\n    volumes:\n      - E:/httishere/work/maestro-api-gateway:/var/www/html # 宿主机代码目录映射到容器中\n    ports:\n      - \"8015:80\"  \n```\n\n\n5. docker 登录\n```git\ndocker login registry.cn-hangzhou.aliyuncs.com\n// 在Windows系统下须在最前面增加winpty\n```\n\n<br />![docker-login.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580657621970-6de2bb85-4817-47e8-be31-d98df37a0ed1.png#align=left&display=inline&height=100&margin=%5Bobject%20Object%5D&name=docker-login.PNG&originHeight=100&originWidth=770&size=10424&status=done&style=none&width=770)<br />\n\n6. 进入local-dev-env在后台启动并运行所有的容器：`docker-compose up -d`\n\n将docker镜像设置为国内镜像加快速度，网易镜像比较快`http://hub-mirror.c.163.com`\n\n7. 首次添加项目时需要进入项目容器安装项目依赖\n\n\n\n```git\ndocker-compose exec program_name bash\ncomposer install\n```\n\n<br />![composerinstall.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580710175621-5e102702-9f06-43e3-a74b-251e359d5e4f.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&name=composerinstall.png&originHeight=411&originWidth=906&size=44255&status=done&style=none&width=906)<br />若composer install速度较慢可使用国内镜像加快速度，`composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/`，[https://developer.aliyun.com/composer](https://developer.aliyun.com/composer)。<br />\n\n8. docker后台服务运行成功后，进入项目目录，并`npm install` 安装依赖\n\nerrors：<br />1) 安装失败，报错npm ERR! code Z_BUF_ERROR<br />![npm-install.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1580698180249-a44d4b92-4f8c-4632-8081-614af727c9dc.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&name=npm-install.PNG&originHeight=184&originWidth=1195&size=14578&status=done&style=none&width=1195)<br />解决：清除npm缓存<br />\n\n```git\nnpm cache clean --force\n```\n![cache.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580698282547-df9678d5-fd2a-41e1-9f8a-2f26a30c79f3.png#align=left&display=inline&height=267&margin=%5Bobject%20Object%5D&name=cache.png&originHeight=267&originWidth=766&size=19726&status=done&style=none&width=766)<br />\n\n9. 使用`yarn watch` 监听项目代码更改\n\n\n\n> 准则：多喝热水，重启试试。\n\n\n","slug":"yuque/Windows环境下docker配置安装","published":1,"updated":"2020-04-22T02:25:07.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqs002xe36k67ul9wcs","content":"<p>tags: [docker, 配置]<br>categories: [docker]<br>cover:<br>—<br><a id=\"more\"></a><br></p>\n<ol>\n<li>开启cpu虚拟化</li>\n</ol>\n<p>在任务管理器 → 性能 → 选择CPU → 右侧“虚拟化”属性查看是否开启，若未开启虚拟化，则重启电脑时长按F1/F12（根据电脑类型不同自行查询）进入dios模式，在Configuration选项或者Security选项下找到Virtualization，进入Virtualization后将<code>Intel (R) `</code>Virtualization Technology`属性值设为Enable。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580649379168-febc0a55-5cae-4303-81cd-8df2990aedcf.png#align=left&amp;display=inline&amp;height=304&amp;margin=%5Bobject%20Object%5D&amp;name=vm.PNG&amp;originHeight=304&amp;originWidth=647&amp;size=15454&amp;status=done&amp;style=none&amp;width=647\" alt=\"vm.PNG\"></p>\n<ol start=\"2\">\n<li><a href=\"https://hub.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener\">docker官网</a>下载安装 docker（系统用户名必须为英文）（下载地址：<a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Docker for Windows</a>）</li>\n</ol>\n<p>网盘：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https://pan.baidu.com/s/1p8e_IBY6qLgMu_Msz_0n-A </span><br><span class=\"line\">提取码：v4ug</span><br></pre></td></tr></table></figure></p>\n<p><br>errors：<br>1) start失败<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580651886751-15bbd2e4-ae11-439e-a3da-ab50d1928a3a.png#align=left&amp;display=inline&amp;height=866&amp;margin=%5Bobject%20Object%5D&amp;name=error.PNG&amp;originHeight=866&amp;originWidth=1018&amp;size=155367&amp;status=done&amp;style=none&amp;width=1018\" alt=\"error.PNG\"><br>原因：docker不支持Windows 家庭版。<br>解决：将Windows家庭版升级为企业版或者专业版并激活。<br></p>\n<ol start=\"3\">\n<li>设置docker的shared dives（工作区），电脑需要设置开机密码</li>\n</ol>\n<ol start=\"4\">\n<li>拉取local-dev-env和项目代码库，两者文件夹平级，并在local-dev-env\\dpcker-compose.yml内增加项目配置</li>\n</ol>\n<p>例如：<br></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">maestro-api-gateway:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\">      <span class=\"comment\"># 详细环境变量作用请查看 git@lqbyun.com:devops/nginx-php-fpm-alpine.git 里的 scripts/start.sh</span></span><br><span class=\"line\"><span class=\"attr\">      WEBROOT:</span> <span class=\"string\">'/var/www/html/public'</span> <span class=\"comment\"># 网站根目录</span></span><br><span class=\"line\"><span class=\"attr\">      ERRORS:</span> <span class=\"number\">1</span>                       <span class=\"comment\"># 是否显示错误，PHP 层级</span></span><br><span class=\"line\"><span class=\"attr\">      RUN_SCRIPTS:</span> <span class=\"number\">1</span>                  <span class=\"comment\"># 是否运行启动脚本，一般来说是代码库下 scripts 目录下的脚本</span></span><br><span class=\"line\"><span class=\"attr\">      ENABLE_XDEBUG:</span> <span class=\"number\">1</span>                <span class=\"comment\"># 是否启动 xdebug</span></span><br><span class=\"line\"><span class=\"attr\">      XDEBUG_CONFIG:</span> <span class=\"string\">\"remote_host=192.168.0.113\"</span> <span class=\"comment\"># 设置远程调试主机地址，一般来说为宿主机地址</span></span><br><span class=\"line\"><span class=\"attr\">      XDEBUG_PORT:</span> <span class=\"number\">9001</span>               <span class=\"comment\"># xdebug 端口，默认开启</span></span><br><span class=\"line\"><span class=\"attr\">      PUID:</span> <span class=\"number\">1000</span>                      <span class=\"comment\"># 设置容器中 nginx 用户的 uid，最好是和本机的当前用户 uid 保持一致，否则在 Linux,OSX环境下可能会出现权限问题</span></span><br><span class=\"line\"><span class=\"attr\">      PGID:</span> <span class=\"number\">1000</span>                      <span class=\"comment\"># 设置容器中 nginx 用户的 gid</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - E:</span><span class=\"string\">/httishere/work/maestro-api-gateway:/var/www/html</span> <span class=\"comment\"># 宿主机代码目录映射到容器中</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8015:80\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>docker 登录<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">// 在Windows系统下须在最前面增加winpty</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580657621970-6de2bb85-4817-47e8-be31-d98df37a0ed1.png#align=left&amp;display=inline&amp;height=100&amp;margin=%5Bobject%20Object%5D&amp;name=docker-login.PNG&amp;originHeight=100&amp;originWidth=770&amp;size=10424&amp;status=done&amp;style=none&amp;width=770\" alt=\"docker-login.PNG\"><br></p>\n<ol start=\"6\">\n<li>进入local-dev-env在后台启动并运行所有的容器：<code>docker-compose up -d</code></li>\n</ol>\n<p>将docker镜像设置为国内镜像加快速度，网易镜像比较快<code>http://hub-mirror.c.163.com</code></p>\n<ol start=\"7\">\n<li>首次添加项目时需要进入项目容器安装项目依赖</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose exec program_name bash</span><br><span class=\"line\">composer install</span><br></pre></td></tr></table></figure>\n<p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580710175621-5e102702-9f06-43e3-a74b-251e359d5e4f.png#align=left&amp;display=inline&amp;height=411&amp;margin=%5Bobject%20Object%5D&amp;name=composerinstall.png&amp;originHeight=411&amp;originWidth=906&amp;size=44255&amp;status=done&amp;style=none&amp;width=906\" alt=\"composerinstall.png\"><br>若composer install速度较慢可使用国内镜像加快速度，<code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code>，<a href=\"https://developer.aliyun.com/composer\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/composer</a>。<br></p>\n<ol start=\"8\">\n<li>docker后台服务运行成功后，进入项目目录，并<code>npm install</code> 安装依赖</li>\n</ol>\n<p>errors：<br>1) 安装失败，报错npm ERR! code Z_BUF_ERROR<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580698180249-a44d4b92-4f8c-4632-8081-614af727c9dc.png#align=left&amp;display=inline&amp;height=184&amp;margin=%5Bobject%20Object%5D&amp;name=npm-install.PNG&amp;originHeight=184&amp;originWidth=1195&amp;size=14578&amp;status=done&amp;style=none&amp;width=1195\" alt=\"npm-install.PNG\"><br>解决：清除npm缓存<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580698282547-df9678d5-fd2a-41e1-9f8a-2f26a30c79f3.png#align=left&amp;display=inline&amp;height=267&amp;margin=%5Bobject%20Object%5D&amp;name=cache.png&amp;originHeight=267&amp;originWidth=766&amp;size=19726&amp;status=done&amp;style=none&amp;width=766\" alt=\"cache.png\"><br></p>\n<ol start=\"9\">\n<li>使用<code>yarn watch</code> 监听项目代码更改</li>\n</ol>\n<blockquote>\n<p>准则：多喝热水，重启试试。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>tags: [docker, 配置]<br>categories: [docker]<br>cover:<br>—<br></p>","more":"<br><p></p>\n<ol>\n<li>开启cpu虚拟化</li>\n</ol>\n<p>在任务管理器 → 性能 → 选择CPU → 右侧“虚拟化”属性查看是否开启，若未开启虚拟化，则重启电脑时长按F1/F12（根据电脑类型不同自行查询）进入dios模式，在Configuration选项或者Security选项下找到Virtualization，进入Virtualization后将<code>Intel (R) `</code>Virtualization Technology`属性值设为Enable。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580649379168-febc0a55-5cae-4303-81cd-8df2990aedcf.png#align=left&amp;display=inline&amp;height=304&amp;margin=%5Bobject%20Object%5D&amp;name=vm.PNG&amp;originHeight=304&amp;originWidth=647&amp;size=15454&amp;status=done&amp;style=none&amp;width=647\" alt=\"vm.PNG\"></p>\n<ol start=\"2\">\n<li><a href=\"https://hub.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener\">docker官网</a>下载安装 docker（系统用户名必须为英文）（下载地址：<a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Docker for Windows</a>）</li>\n</ol>\n<p>网盘：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https://pan.baidu.com/s/1p8e_IBY6qLgMu_Msz_0n-A </span><br><span class=\"line\">提取码：v4ug</span><br></pre></td></tr></table></figure></p>\n<p><br>errors：<br>1) start失败<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580651886751-15bbd2e4-ae11-439e-a3da-ab50d1928a3a.png#align=left&amp;display=inline&amp;height=866&amp;margin=%5Bobject%20Object%5D&amp;name=error.PNG&amp;originHeight=866&amp;originWidth=1018&amp;size=155367&amp;status=done&amp;style=none&amp;width=1018\" alt=\"error.PNG\"><br>原因：docker不支持Windows 家庭版。<br>解决：将Windows家庭版升级为企业版或者专业版并激活。<br></p>\n<ol start=\"3\">\n<li>设置docker的shared dives（工作区），电脑需要设置开机密码</li>\n</ol>\n<ol start=\"4\">\n<li>拉取local-dev-env和项目代码库，两者文件夹平级，并在local-dev-env\\dpcker-compose.yml内增加项目配置</li>\n</ol>\n<p>例如：<br></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">maestro-api-gateway:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/duojii/nginx-php-fpm-alpine</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\">      <span class=\"comment\"># 详细环境变量作用请查看 git@lqbyun.com:devops/nginx-php-fpm-alpine.git 里的 scripts/start.sh</span></span><br><span class=\"line\"><span class=\"attr\">      WEBROOT:</span> <span class=\"string\">'/var/www/html/public'</span> <span class=\"comment\"># 网站根目录</span></span><br><span class=\"line\"><span class=\"attr\">      ERRORS:</span> <span class=\"number\">1</span>                       <span class=\"comment\"># 是否显示错误，PHP 层级</span></span><br><span class=\"line\"><span class=\"attr\">      RUN_SCRIPTS:</span> <span class=\"number\">1</span>                  <span class=\"comment\"># 是否运行启动脚本，一般来说是代码库下 scripts 目录下的脚本</span></span><br><span class=\"line\"><span class=\"attr\">      ENABLE_XDEBUG:</span> <span class=\"number\">1</span>                <span class=\"comment\"># 是否启动 xdebug</span></span><br><span class=\"line\"><span class=\"attr\">      XDEBUG_CONFIG:</span> <span class=\"string\">\"remote_host=192.168.0.113\"</span> <span class=\"comment\"># 设置远程调试主机地址，一般来说为宿主机地址</span></span><br><span class=\"line\"><span class=\"attr\">      XDEBUG_PORT:</span> <span class=\"number\">9001</span>               <span class=\"comment\"># xdebug 端口，默认开启</span></span><br><span class=\"line\"><span class=\"attr\">      PUID:</span> <span class=\"number\">1000</span>                      <span class=\"comment\"># 设置容器中 nginx 用户的 uid，最好是和本机的当前用户 uid 保持一致，否则在 Linux,OSX环境下可能会出现权限问题</span></span><br><span class=\"line\"><span class=\"attr\">      PGID:</span> <span class=\"number\">1000</span>                      <span class=\"comment\"># 设置容器中 nginx 用户的 gid</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - E:</span><span class=\"string\">/httishere/work/maestro-api-gateway:/var/www/html</span> <span class=\"comment\"># 宿主机代码目录映射到容器中</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8015:80\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>docker 登录<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">// 在Windows系统下须在最前面增加winpty</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580657621970-6de2bb85-4817-47e8-be31-d98df37a0ed1.png#align=left&amp;display=inline&amp;height=100&amp;margin=%5Bobject%20Object%5D&amp;name=docker-login.PNG&amp;originHeight=100&amp;originWidth=770&amp;size=10424&amp;status=done&amp;style=none&amp;width=770\" alt=\"docker-login.PNG\"><br></p>\n<ol start=\"6\">\n<li>进入local-dev-env在后台启动并运行所有的容器：<code>docker-compose up -d</code></li>\n</ol>\n<p>将docker镜像设置为国内镜像加快速度，网易镜像比较快<code>http://hub-mirror.c.163.com</code></p>\n<ol start=\"7\">\n<li>首次添加项目时需要进入项目容器安装项目依赖</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose exec program_name bash</span><br><span class=\"line\">composer install</span><br></pre></td></tr></table></figure>\n<p><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580710175621-5e102702-9f06-43e3-a74b-251e359d5e4f.png#align=left&amp;display=inline&amp;height=411&amp;margin=%5Bobject%20Object%5D&amp;name=composerinstall.png&amp;originHeight=411&amp;originWidth=906&amp;size=44255&amp;status=done&amp;style=none&amp;width=906\" alt=\"composerinstall.png\"><br>若composer install速度较慢可使用国内镜像加快速度，<code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code>，<a href=\"https://developer.aliyun.com/composer\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/composer</a>。<br></p>\n<ol start=\"8\">\n<li>docker后台服务运行成功后，进入项目目录，并<code>npm install</code> 安装依赖</li>\n</ol>\n<p>errors：<br>1) 安装失败，报错npm ERR! code Z_BUF_ERROR<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580698180249-a44d4b92-4f8c-4632-8081-614af727c9dc.png#align=left&amp;display=inline&amp;height=184&amp;margin=%5Bobject%20Object%5D&amp;name=npm-install.PNG&amp;originHeight=184&amp;originWidth=1195&amp;size=14578&amp;status=done&amp;style=none&amp;width=1195\" alt=\"npm-install.PNG\"><br>解决：清除npm缓存<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580698282547-df9678d5-fd2a-41e1-9f8a-2f26a30c79f3.png#align=left&amp;display=inline&amp;height=267&amp;margin=%5Bobject%20Object%5D&amp;name=cache.png&amp;originHeight=267&amp;originWidth=766&amp;size=19726&amp;status=done&amp;style=none&amp;width=766\" alt=\"cache.png\"><br></p>\n<ol start=\"9\">\n<li>使用<code>yarn watch</code> 监听项目代码更改</li>\n</ol>\n<blockquote>\n<p>准则：多喝热水，重启试试。</p>\n</blockquote>"},{"title":"css position sticky（css的粘性定位）","urlname":"fzvfak","date":"2019-02-12T01:42:14.000Z","_content":"> 在css内position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。\n\n\n原来在页面设计中时常会遇到所谓的“吸顶”的效果，如下图（当页面滑动至介绍部分时介绍栏需要有一个吸顶效果）：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549936020128-7ed27eaa-85eb-4314-a859-e7d54b15cac1.png#align=left&display=inline&height=466&name=image.png&originHeight=466&originWidth=399&size=153632&width=399)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549936102348-7eed426c-9cd7-495a-bc71-93e85524f68e.png#align=left&display=inline&height=353&name=image.png&originHeight=353&originWidth=398&size=161946&width=398)\n\n原来的实现方式是采用js监听滑动并对需要吸顶的内容进行定位设置。<br />但是现在使用`sticky`也可以直接实现。\n\n对需要吸顶的元素设置sticky属性：\n\n```javascript\n.main-header {\n\tposition: -webkit-sticky;\n\tposition: sticky;\n\ttop: 0;\n}\n```\n\n效果：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937063469-3f821c80-4e14-4035-9f6d-bdf52c1b4b0a.png#align=left&display=inline&height=363&name=image.png&originHeight=363&originWidth=408&size=12745&width=408)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937022077-730b8a25-40f2-41f8-a144-0871c8ffc0e8.png)<br /> <br />完整：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Page Title</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        body {\n            color: #fff;\n            font-family: arial;\n            font-weight: bold;\n            font-size: 40px;\n        }\n\n        .main-container {\n            max-width: 600px;\n            margin: 0 auto;\n            border: solid 10px green;\n            padding: 10px;\n            margin-top: 40px;\n        }\n\n        .main-container * {\n            padding: 10px;\n            background: #aaa;\n            border: dashed 5px #000;\n        }\n\n        .main-container *+* {\n            margin-top: 20px;\n        }\n\n        .main-header {\n            height: 50px;\n            background: #aaa;\n            border-color: red;\n        }\n\n        .main-content {\n            min-height: 1000px;\n        }\n\n        .main-header {\n            position: -webkit-sticky;\n            position: sticky;\n            top: 0;\n        }\n    </style>\n</head>\n\n<body>\n    <main class=\"main-container\">\n        <header class=\"main-header\">HEADER</header>\n        <div class=\"main-content\">MAIN CONTENT</div>\n        <footer class=\"main-footer\">FOOTER</footer>\n    </main>\n</body>\n\n</html>\n```\n\n总结：<br />比较不好的是这个属性的兼容性还不是很好，它之所以会出现，也是因为监听`scroll`事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。<br />　　这个属性使用的浏览器只有FireFox和iOS的Safari：<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937196181-a18925ca-f6f3-4dab-b56f-efc03b7f0dcc.png#align=left&display=inline&height=311&originHeight=493&originWidth=1181&size=0&width=746)\n\n还有要让sticky属性生效需要满足以下两点：\n\n- 元素自身在文档流中的位置\n- 该元素的父容器的边缘\n\n　　第一点如果设置了top: 50px，那么元素在达到距离顶部50px时才会发生定位，否则并不会发生定位。<br />　　第二点则需要考虑父容器的高度情况：如果父容器高度并没有比sticky元素高，那么sticky元素一开始就达到了底部，并不会有定位的效果。<br />　　第三点就是父元素的overflow属性，如果父元素的overflow属性并不是默认的visible属性，那么sticky元素则相对于该父元素定位。也就是如果要定位在顶部的话，此时这个效果就无效了。\n\n参考教程：[CSS粘性定位是怎样工作的](https://segmentfault.com/a/1190000018113832) （介绍了更多相关的性质）<br />          [CSS中position属性介绍(新增sticky)]()\n\n\n","source":"_posts/yuque/css position sticky（css的粘性定位）.md","raw":"\n---\n\ntitle: css position sticky（css的粘性定位）\n\nurlname: fzvfak\n\ndate: 2019-02-12 09:42:14 +0800\n\ntags: []\n\ncategories: []\n\n---\n> 在css内position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。\n\n\n原来在页面设计中时常会遇到所谓的“吸顶”的效果，如下图（当页面滑动至介绍部分时介绍栏需要有一个吸顶效果）：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549936020128-7ed27eaa-85eb-4314-a859-e7d54b15cac1.png#align=left&display=inline&height=466&name=image.png&originHeight=466&originWidth=399&size=153632&width=399)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549936102348-7eed426c-9cd7-495a-bc71-93e85524f68e.png#align=left&display=inline&height=353&name=image.png&originHeight=353&originWidth=398&size=161946&width=398)\n\n原来的实现方式是采用js监听滑动并对需要吸顶的内容进行定位设置。<br />但是现在使用`sticky`也可以直接实现。\n\n对需要吸顶的元素设置sticky属性：\n\n```javascript\n.main-header {\n\tposition: -webkit-sticky;\n\tposition: sticky;\n\ttop: 0;\n}\n```\n\n效果：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937063469-3f821c80-4e14-4035-9f6d-bdf52c1b4b0a.png#align=left&display=inline&height=363&name=image.png&originHeight=363&originWidth=408&size=12745&width=408)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937022077-730b8a25-40f2-41f8-a144-0871c8ffc0e8.png)<br /> <br />完整：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Page Title</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        body {\n            color: #fff;\n            font-family: arial;\n            font-weight: bold;\n            font-size: 40px;\n        }\n\n        .main-container {\n            max-width: 600px;\n            margin: 0 auto;\n            border: solid 10px green;\n            padding: 10px;\n            margin-top: 40px;\n        }\n\n        .main-container * {\n            padding: 10px;\n            background: #aaa;\n            border: dashed 5px #000;\n        }\n\n        .main-container *+* {\n            margin-top: 20px;\n        }\n\n        .main-header {\n            height: 50px;\n            background: #aaa;\n            border-color: red;\n        }\n\n        .main-content {\n            min-height: 1000px;\n        }\n\n        .main-header {\n            position: -webkit-sticky;\n            position: sticky;\n            top: 0;\n        }\n    </style>\n</head>\n\n<body>\n    <main class=\"main-container\">\n        <header class=\"main-header\">HEADER</header>\n        <div class=\"main-content\">MAIN CONTENT</div>\n        <footer class=\"main-footer\">FOOTER</footer>\n    </main>\n</body>\n\n</html>\n```\n\n总结：<br />比较不好的是这个属性的兼容性还不是很好，它之所以会出现，也是因为监听`scroll`事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。<br />　　这个属性使用的浏览器只有FireFox和iOS的Safari：<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549937196181-a18925ca-f6f3-4dab-b56f-efc03b7f0dcc.png#align=left&display=inline&height=311&originHeight=493&originWidth=1181&size=0&width=746)\n\n还有要让sticky属性生效需要满足以下两点：\n\n- 元素自身在文档流中的位置\n- 该元素的父容器的边缘\n\n　　第一点如果设置了top: 50px，那么元素在达到距离顶部50px时才会发生定位，否则并不会发生定位。<br />　　第二点则需要考虑父容器的高度情况：如果父容器高度并没有比sticky元素高，那么sticky元素一开始就达到了底部，并不会有定位的效果。<br />　　第三点就是父元素的overflow属性，如果父元素的overflow属性并不是默认的visible属性，那么sticky元素则相对于该父元素定位。也就是如果要定位在顶部的话，此时这个效果就无效了。\n\n参考教程：[CSS粘性定位是怎样工作的](https://segmentfault.com/a/1190000018113832) （介绍了更多相关的性质）<br />          [CSS中position属性介绍(新增sticky)]()\n\n\n","slug":"yuque/css position sticky（css的粘性定位）","published":1,"updated":"2020-04-22T02:25:07.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqt002ye36kuj6txxbz","content":"<blockquote>\n<p>在css内position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。</p>\n</blockquote>\n<p>原来在页面设计中时常会遇到所谓的“吸顶”的效果，如下图（当页面滑动至介绍部分时介绍栏需要有一个吸顶效果）：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549936020128-7ed27eaa-85eb-4314-a859-e7d54b15cac1.png#align=left&amp;display=inline&amp;height=466&amp;name=image.png&amp;originHeight=466&amp;originWidth=399&amp;size=153632&amp;width=399\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549936102348-7eed426c-9cd7-495a-bc71-93e85524f68e.png#align=left&amp;display=inline&amp;height=353&amp;name=image.png&amp;originHeight=353&amp;originWidth=398&amp;size=161946&amp;width=398\" alt=\"image.png\"></p>\n<p>原来的实现方式是采用js监听滑动并对需要吸顶的内容进行定位设置。<br>但是现在使用<code>sticky</code>也可以直接实现。</p>\n<p>对需要吸顶的元素设置sticky属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main-header &#123;</span><br><span class=\"line\">\tposition: -webkit-sticky;</span><br><span class=\"line\">\tposition: sticky;</span><br><span class=\"line\">\ttop: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937063469-3f821c80-4e14-4035-9f6d-bdf52c1b4b0a.png#align=left&amp;display=inline&amp;height=363&amp;name=image.png&amp;originHeight=363&amp;originWidth=408&amp;size=12745&amp;width=408\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937022077-730b8a25-40f2-41f8-a144-0871c8ffc0e8.png\" alt=\"\"><br> <br>完整：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-family: arial;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-weight: bold;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-size: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            max-width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">            border: solid 10px green;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin-top: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">dashed</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> *+* &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin-top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 50px;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            border-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            min-height: 1000px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: -webkit-sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">            top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-header\"</span>&gt;</span>HEADER<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-content\"</span>&gt;</span>MAIN CONTENT<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-footer\"</span>&gt;</span>FOOTER<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>总结：<br>比较不好的是这个属性的兼容性还不是很好，它之所以会出现，也是因为监听<code>scroll</code>事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。<br>　　这个属性使用的浏览器只有FireFox和iOS的Safari：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937196181-a18925ca-f6f3-4dab-b56f-efc03b7f0dcc.png#align=left&amp;display=inline&amp;height=311&amp;originHeight=493&amp;originWidth=1181&amp;size=0&amp;width=746\" alt=\"\"></p>\n<p>还有要让sticky属性生效需要满足以下两点：</p>\n<ul>\n<li>元素自身在文档流中的位置</li>\n<li>该元素的父容器的边缘</li>\n</ul>\n<p>　　第一点如果设置了top: 50px，那么元素在达到距离顶部50px时才会发生定位，否则并不会发生定位。<br>　　第二点则需要考虑父容器的高度情况：如果父容器高度并没有比sticky元素高，那么sticky元素一开始就达到了底部，并不会有定位的效果。<br>　　第三点就是父元素的overflow属性，如果父元素的overflow属性并不是默认的visible属性，那么sticky元素则相对于该父元素定位。也就是如果要定位在顶部的话，此时这个效果就无效了。</p>\n<p>参考教程：<a href=\"https://segmentfault.com/a/1190000018113832\" target=\"_blank\" rel=\"noopener\">CSS粘性定位是怎样工作的</a> （介绍了更多相关的性质）<br>          <a href=\"\">CSS中position属性介绍(新增sticky)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在css内position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。</p>\n</blockquote>\n<p>原来在页面设计中时常会遇到所谓的“吸顶”的效果，如下图（当页面滑动至介绍部分时介绍栏需要有一个吸顶效果）：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549936020128-7ed27eaa-85eb-4314-a859-e7d54b15cac1.png#align=left&amp;display=inline&amp;height=466&amp;name=image.png&amp;originHeight=466&amp;originWidth=399&amp;size=153632&amp;width=399\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549936102348-7eed426c-9cd7-495a-bc71-93e85524f68e.png#align=left&amp;display=inline&amp;height=353&amp;name=image.png&amp;originHeight=353&amp;originWidth=398&amp;size=161946&amp;width=398\" alt=\"image.png\"></p>\n<p>原来的实现方式是采用js监听滑动并对需要吸顶的内容进行定位设置。<br>但是现在使用<code>sticky</code>也可以直接实现。</p>\n<p>对需要吸顶的元素设置sticky属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main-header &#123;</span><br><span class=\"line\">\tposition: -webkit-sticky;</span><br><span class=\"line\">\tposition: sticky;</span><br><span class=\"line\">\ttop: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937063469-3f821c80-4e14-4035-9f6d-bdf52c1b4b0a.png#align=left&amp;display=inline&amp;height=363&amp;name=image.png&amp;originHeight=363&amp;originWidth=408&amp;size=12745&amp;width=408\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937022077-730b8a25-40f2-41f8-a144-0871c8ffc0e8.png\" alt=\"\"><br> <br>完整：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body &#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-family: arial;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-weight: bold;</span></span><br><span class=\"line\"><span class=\"undefined\">            font-size: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            max-width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">            border: solid 10px green;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin-top: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">dashed</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-container</span> *+* &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin-top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 50px;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            border-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            min-height: 1000px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.main-header</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: -webkit-sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: sticky;</span></span><br><span class=\"line\"><span class=\"undefined\">            top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-header\"</span>&gt;</span>HEADER<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-content\"</span>&gt;</span>MAIN CONTENT<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-footer\"</span>&gt;</span>FOOTER<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>总结：<br>比较不好的是这个属性的兼容性还不是很好，它之所以会出现，也是因为监听<code>scroll</code>事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。<br>　　这个属性使用的浏览器只有FireFox和iOS的Safari：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549937196181-a18925ca-f6f3-4dab-b56f-efc03b7f0dcc.png#align=left&amp;display=inline&amp;height=311&amp;originHeight=493&amp;originWidth=1181&amp;size=0&amp;width=746\" alt=\"\"></p>\n<p>还有要让sticky属性生效需要满足以下两点：</p>\n<ul>\n<li>元素自身在文档流中的位置</li>\n<li>该元素的父容器的边缘</li>\n</ul>\n<p>　　第一点如果设置了top: 50px，那么元素在达到距离顶部50px时才会发生定位，否则并不会发生定位。<br>　　第二点则需要考虑父容器的高度情况：如果父容器高度并没有比sticky元素高，那么sticky元素一开始就达到了底部，并不会有定位的效果。<br>　　第三点就是父元素的overflow属性，如果父元素的overflow属性并不是默认的visible属性，那么sticky元素则相对于该父元素定位。也就是如果要定位在顶部的话，此时这个效果就无效了。</p>\n<p>参考教程：<a href=\"https://segmentfault.com/a/1190000018113832\" target=\"_blank\" rel=\"noopener\">CSS粘性定位是怎样工作的</a> （介绍了更多相关的性质）<br>          <a href=\"\">CSS中position属性介绍(新增sticky)</a></p>\n"},{"title":"h5自定义海报生成","urlname":"wrwxnm","date":"2019-01-21T09:16:03.000Z","_content":"\n功能需求：获取海报参数自定义生成一张带二维码海报。<br />效果如下：<br />![Inked微信图片_20190121172129_LI.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548062679065-c45906c9-bae5-4d02-92bc-13f747042672.jpeg#align=left&display=inline&height=657&name=Inked%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190121172129_LI.jpg&originHeight=1298&originWidth=836&size=673550&status=done&style=none&width=423)\n\n元素：主要分成背景图，用户信息和带用户信息的二维码（由前端生成）；\n\n步骤：先根据设计完成布局设计->将这张海报的html元素生成为canvas->将该canvas转化成图片；\n\n- 步骤1：请求数据，成功后主要是二维码的生成（使用qrcodejs2）\n\n```javascript\n// 生成二维码\n    qrcodeCreate() {\n      const _this = this;\n      if (_this.poster_params.code_url) {\n        let qrcodeDom = document.getElementById(\"qrcode\");\n        qrcode = new QRCode(\"qrcode\", {\n          width: parseInt(qrcodeDom.clientWidth), // 设置宽度，单位像素\n          height: parseInt(qrcodeDom.clientHeight), // 设置高度，单位像素\n          text: _this.poster_params.code_url // 设置二维码内容或跳转地址\n        });\n      } else {\n        _this.isLoading = false;\n        _this.isFailed = true;\n        return _this.$toast.center(\"海报跑走了~\");\n      }\n    }\n```\n\n- 步骤2：设计海报canvas\n\n注意是内部图片必须有效加载才能生成成功，所以需要先判断图片链接的有效性，之后等图片完全加载完成之后再转为canvas；还有在图片为不同域的情况也可能会产生生成失败的现象，所以需要先将跨域图片转换为base64格式。\n\n```javascript\n// 创建海报canvas\nlet box = document.getElementById(\"poster-box\"); // 海报盒子\n      let c_width = box.offsetWidth;\n      let c_height = box.offsetHeight;\n      let canvas = document.createElement(\"canvas\");\n      let context = canvas.getContext(\"2d\");\n      // 获取根据屏幕分辨率，来设置canvas的宽高以获得高清图片\n      let devicePixelRatio = window.devicePixelRatio || 2;\n      let backingStoreRatio =\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n      let ratio = devicePixelRatio / backingStoreRatio;\n      canvas.width = c_width * ratio;\n      canvas.height = c_height * ratio;\n      canvas.style.width = c_width + \"px\";\n      canvas.style.height = c_height + \"px\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"50%\";\n      canvas.style.top = \"50%\";\n      canvas.style.transform = \"translate(-50%, -50%)\";\n      canvas.style.zIndex = \"10\";\n      canvas.style.opacity = \"0\";\n      // canvas的页面位置自行调整\n      let scrollTop =\n        document.documentElement.scrollTop ||\n        window.pageYOffset ||\n        document.body.scrollTop;\n      let scrollLeft =\n        document.documentElement.scrollLeft ||\n        window.pageXOffset ||\n        document.body.scrollLeft;\n      let transTop =\n        screenTop -\n        (document.getElementsByClassName(\"poster-view-content\")[0].offsetTop -\n          c_height / 2);\n      let transLeft = (c_width - window.innerWidth) / 2;\n      context.scale(ratio, ratio);\n      // canvas的位置要保证与div位置相同。\n      context.translate(transLeft, transTop);\n```\n\n```javascript\n// 背景图片\n      let img = new Image();\n      let canvas2 = document.createElement(\"canvas\");\n      let ctx = canvas2.getContext(\"2d\");\n      img.crossOrigin = \"Anonymous\";\n      img.src = _this.poster_params.share;\n      img.onload = function() {\n        if (img.width > 0) {\n          canvas2.height = img.height;\n          canvas2.width = img.width;\n          ctx.drawImage(img, 0, 0);\n          let dataURL = canvas2.toDataURL(\"image/png\");\n          document.getElementById(\"poster-bg\").setAttribute(\"src\", dataURL);\n          canvas2 = null;\n          _this.getCard(box, canvas, c_width, c_height); // 生成海报canvas\n        } else {\n          _this.isLoading = false;\n          _this.isFailed = true;\n          return _this.$toast.center(\"海报跑走了~\");\n        }\n      };\n      img.onerror = function() {\n        _this.isLoading = false;\n        _this.isFailed = true;\n        return _this.$toast.center(\"海报跑走了~\");\n      };\n```\n\n- 步骤3：在所有图片都加载以及转换成功后，可以生成海报canvas并转换生成图片（使用html2canvas）\n\n```javascript\n \t\t// 每次图片加载成功后都会请求执行该函数（但是要在所有图片都加载成功后才能真正生成canvas）\n    getCard(box, canvas, c_width, c_height) {\n      const _this = this;\n      _this.cnt++; // 对已加载成功的图片数进行判断\n      if (_this.cnt < 3) return; // 所有图片都成功可以生成\n      html2canvas(box, {\n        allowTaint: true,\n        useCORS: true,\n        canvas: canvas,\n        width: c_width,\n        height: c_height\n      }).then(function(canvas) {\n        canvas.setAttribute(\"id\", \"my-canvas\"); //添加属性\n        box.appendChild(canvas);\n        // 转换图片得到base64格式\n        let dataURL = canvas.toDataURL(\"image/png\");\n        let img = new Image();\n        img.src = dataURL;\n        img.className = \"cardImg\";\n        img.style.position = \"absolute\";\n        img.style.left = \"50%\";\n        img.style.top = \"50%\";\n        img.style.transform = \"translate(-50%, -50%)\";\n        img.style.zIndex = \"150\";\n        img.style.width = c_width + \"px\";\n        img.style.height = c_height + \"px\";\n        box.appendChild(img);\n        // 生成成功\n        _this.$emit('createPosterSuccess', dataURL);\n        _this.isLoading = false;\n        _this.isSuccess = true;\n      });\n    }\n```\n\n大致就完成了，主要在与异步的问题，在图片base64格式转换的时候也要判断二维码是否生成成功。<br />还有生成到成为一张图片还是需要一定时间，所以最好有一个生成中的加载状态。\n\n\n","source":"_posts/yuque/h5自定义海报生成.md","raw":"\n---\n\ntitle: h5自定义海报生成\n\nurlname: wrwxnm\n\ndate: 2019-01-21 17:16:03 +0800\n\ntags: []\n\ncategories: []\n\n---\n\n功能需求：获取海报参数自定义生成一张带二维码海报。<br />效果如下：<br />![Inked微信图片_20190121172129_LI.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548062679065-c45906c9-bae5-4d02-92bc-13f747042672.jpeg#align=left&display=inline&height=657&name=Inked%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190121172129_LI.jpg&originHeight=1298&originWidth=836&size=673550&status=done&style=none&width=423)\n\n元素：主要分成背景图，用户信息和带用户信息的二维码（由前端生成）；\n\n步骤：先根据设计完成布局设计->将这张海报的html元素生成为canvas->将该canvas转化成图片；\n\n- 步骤1：请求数据，成功后主要是二维码的生成（使用qrcodejs2）\n\n```javascript\n// 生成二维码\n    qrcodeCreate() {\n      const _this = this;\n      if (_this.poster_params.code_url) {\n        let qrcodeDom = document.getElementById(\"qrcode\");\n        qrcode = new QRCode(\"qrcode\", {\n          width: parseInt(qrcodeDom.clientWidth), // 设置宽度，单位像素\n          height: parseInt(qrcodeDom.clientHeight), // 设置高度，单位像素\n          text: _this.poster_params.code_url // 设置二维码内容或跳转地址\n        });\n      } else {\n        _this.isLoading = false;\n        _this.isFailed = true;\n        return _this.$toast.center(\"海报跑走了~\");\n      }\n    }\n```\n\n- 步骤2：设计海报canvas\n\n注意是内部图片必须有效加载才能生成成功，所以需要先判断图片链接的有效性，之后等图片完全加载完成之后再转为canvas；还有在图片为不同域的情况也可能会产生生成失败的现象，所以需要先将跨域图片转换为base64格式。\n\n```javascript\n// 创建海报canvas\nlet box = document.getElementById(\"poster-box\"); // 海报盒子\n      let c_width = box.offsetWidth;\n      let c_height = box.offsetHeight;\n      let canvas = document.createElement(\"canvas\");\n      let context = canvas.getContext(\"2d\");\n      // 获取根据屏幕分辨率，来设置canvas的宽高以获得高清图片\n      let devicePixelRatio = window.devicePixelRatio || 2;\n      let backingStoreRatio =\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n      let ratio = devicePixelRatio / backingStoreRatio;\n      canvas.width = c_width * ratio;\n      canvas.height = c_height * ratio;\n      canvas.style.width = c_width + \"px\";\n      canvas.style.height = c_height + \"px\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"50%\";\n      canvas.style.top = \"50%\";\n      canvas.style.transform = \"translate(-50%, -50%)\";\n      canvas.style.zIndex = \"10\";\n      canvas.style.opacity = \"0\";\n      // canvas的页面位置自行调整\n      let scrollTop =\n        document.documentElement.scrollTop ||\n        window.pageYOffset ||\n        document.body.scrollTop;\n      let scrollLeft =\n        document.documentElement.scrollLeft ||\n        window.pageXOffset ||\n        document.body.scrollLeft;\n      let transTop =\n        screenTop -\n        (document.getElementsByClassName(\"poster-view-content\")[0].offsetTop -\n          c_height / 2);\n      let transLeft = (c_width - window.innerWidth) / 2;\n      context.scale(ratio, ratio);\n      // canvas的位置要保证与div位置相同。\n      context.translate(transLeft, transTop);\n```\n\n```javascript\n// 背景图片\n      let img = new Image();\n      let canvas2 = document.createElement(\"canvas\");\n      let ctx = canvas2.getContext(\"2d\");\n      img.crossOrigin = \"Anonymous\";\n      img.src = _this.poster_params.share;\n      img.onload = function() {\n        if (img.width > 0) {\n          canvas2.height = img.height;\n          canvas2.width = img.width;\n          ctx.drawImage(img, 0, 0);\n          let dataURL = canvas2.toDataURL(\"image/png\");\n          document.getElementById(\"poster-bg\").setAttribute(\"src\", dataURL);\n          canvas2 = null;\n          _this.getCard(box, canvas, c_width, c_height); // 生成海报canvas\n        } else {\n          _this.isLoading = false;\n          _this.isFailed = true;\n          return _this.$toast.center(\"海报跑走了~\");\n        }\n      };\n      img.onerror = function() {\n        _this.isLoading = false;\n        _this.isFailed = true;\n        return _this.$toast.center(\"海报跑走了~\");\n      };\n```\n\n- 步骤3：在所有图片都加载以及转换成功后，可以生成海报canvas并转换生成图片（使用html2canvas）\n\n```javascript\n \t\t// 每次图片加载成功后都会请求执行该函数（但是要在所有图片都加载成功后才能真正生成canvas）\n    getCard(box, canvas, c_width, c_height) {\n      const _this = this;\n      _this.cnt++; // 对已加载成功的图片数进行判断\n      if (_this.cnt < 3) return; // 所有图片都成功可以生成\n      html2canvas(box, {\n        allowTaint: true,\n        useCORS: true,\n        canvas: canvas,\n        width: c_width,\n        height: c_height\n      }).then(function(canvas) {\n        canvas.setAttribute(\"id\", \"my-canvas\"); //添加属性\n        box.appendChild(canvas);\n        // 转换图片得到base64格式\n        let dataURL = canvas.toDataURL(\"image/png\");\n        let img = new Image();\n        img.src = dataURL;\n        img.className = \"cardImg\";\n        img.style.position = \"absolute\";\n        img.style.left = \"50%\";\n        img.style.top = \"50%\";\n        img.style.transform = \"translate(-50%, -50%)\";\n        img.style.zIndex = \"150\";\n        img.style.width = c_width + \"px\";\n        img.style.height = c_height + \"px\";\n        box.appendChild(img);\n        // 生成成功\n        _this.$emit('createPosterSuccess', dataURL);\n        _this.isLoading = false;\n        _this.isSuccess = true;\n      });\n    }\n```\n\n大致就完成了，主要在与异步的问题，在图片base64格式转换的时候也要判断二维码是否生成成功。<br />还有生成到成为一张图片还是需要一定时间，所以最好有一个生成中的加载状态。\n\n\n","slug":"yuque/h5自定义海报生成","published":1,"updated":"2020-04-22T02:25:07.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqt002ze36kqfi83syi","content":"<p>功能需求：获取海报参数自定义生成一张带二维码海报。<br>效果如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548062679065-c45906c9-bae5-4d02-92bc-13f747042672.jpeg#align=left&amp;display=inline&amp;height=657&amp;name=Inked%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190121172129_LI.jpg&amp;originHeight=1298&amp;originWidth=836&amp;size=673550&amp;status=done&amp;style=none&amp;width=423\" alt=\"Inked微信图片_20190121172129_LI.jpg\"></p>\n<p>元素：主要分成背景图，用户信息和带用户信息的二维码（由前端生成）；</p>\n<p>步骤：先根据设计完成布局设计-&gt;将这张海报的html元素生成为canvas-&gt;将该canvas转化成图片；</p>\n<ul>\n<li>步骤1：请求数据，成功后主要是二维码的生成（使用qrcodejs2）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成二维码</span></span><br><span class=\"line\">    qrcodeCreate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_this.poster_params.code_url) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> qrcodeDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>);</span><br><span class=\"line\">        qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">          width: <span class=\"built_in\">parseInt</span>(qrcodeDom.clientWidth), <span class=\"comment\">// 设置宽度，单位像素</span></span><br><span class=\"line\">          height: <span class=\"built_in\">parseInt</span>(qrcodeDom.clientHeight), <span class=\"comment\">// 设置高度，单位像素</span></span><br><span class=\"line\">          text: _this.poster_params.code_url <span class=\"comment\">// 设置二维码内容或跳转地址</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤2：设计海报canvas</li>\n</ul>\n<p>注意是内部图片必须有效加载才能生成成功，所以需要先判断图片链接的有效性，之后等图片完全加载完成之后再转为canvas；还有在图片为不同域的情况也可能会产生生成失败的现象，所以需要先将跨域图片转换为base64格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建海报canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"poster-box\"</span>); <span class=\"comment\">// 海报盒子</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> c_width = box.offsetWidth;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> c_height = box.offsetHeight;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 获取根据屏幕分辨率，来设置canvas的宽高以获得高清图片</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> devicePixelRatio = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> backingStoreRatio =</span><br><span class=\"line\">        context.webkitBackingStorePixelRatio ||</span><br><span class=\"line\">        context.mozBackingStorePixelRatio ||</span><br><span class=\"line\">        context.msBackingStorePixelRatio ||</span><br><span class=\"line\">        context.oBackingStorePixelRatio ||</span><br><span class=\"line\">        context.backingStorePixelRatio ||</span><br><span class=\"line\">        <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ratio = devicePixelRatio / backingStoreRatio;</span><br><span class=\"line\">      canvas.width = c_width * ratio;</span><br><span class=\"line\">      canvas.height = c_height * ratio;</span><br><span class=\"line\">      canvas.style.width = c_width + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">      canvas.style.height = c_height + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">      canvas.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">      canvas.style.left = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">      canvas.style.top = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">      canvas.style.transform = <span class=\"string\">\"translate(-50%, -50%)\"</span>;</span><br><span class=\"line\">      canvas.style.zIndex = <span class=\"string\">\"10\"</span>;</span><br><span class=\"line\">      canvas.style.opacity = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">      <span class=\"comment\">// canvas的页面位置自行调整</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> scrollTop =</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.documentElement.scrollTop ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageYOffset ||</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> scrollLeft =</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.documentElement.scrollLeft ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageXOffset ||</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> transTop =</span><br><span class=\"line\">        screenTop -</span><br><span class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"poster-view-content\"</span>)[<span class=\"number\">0</span>].offsetTop -</span><br><span class=\"line\">          c_height / <span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> transLeft = (c_width - <span class=\"built_in\">window</span>.innerWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      context.scale(ratio, ratio);</span><br><span class=\"line\">      <span class=\"comment\">// canvas的位置要保证与div位置相同。</span></span><br><span class=\"line\">      context.translate(transLeft, transTop);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 背景图片</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canvas2 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ctx = canvas2.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      img.crossOrigin = <span class=\"string\">\"Anonymous\"</span>;</span><br><span class=\"line\">      img.src = _this.poster_params.share;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (img.width &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          canvas2.height = img.height;</span><br><span class=\"line\">          canvas2.width = img.width;</span><br><span class=\"line\">          ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">let</span> dataURL = canvas2.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"poster-bg\"</span>).setAttribute(<span class=\"string\">\"src\"</span>, dataURL);</span><br><span class=\"line\">          canvas2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          _this.getCard(box, canvas, c_width, c_height); <span class=\"comment\">// 生成海报canvas</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">      &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤3：在所有图片都加载以及转换成功后，可以生成海报canvas并转换生成图片（使用html2canvas）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次图片加载成功后都会请求执行该函数（但是要在所有图片都加载成功后才能真正生成canvas）</span></span><br><span class=\"line\"> getCard(box, canvas, c_width, c_height) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   _this.cnt++; <span class=\"comment\">// 对已加载成功的图片数进行判断</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (_this.cnt &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">// 所有图片都成功可以生成</span></span><br><span class=\"line\">   html2canvas(box, &#123;</span><br><span class=\"line\">     allowTaint: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     useCORS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     canvas: canvas,</span><br><span class=\"line\">     width: c_width,</span><br><span class=\"line\">     height: c_height</span><br><span class=\"line\">   &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">     canvas.setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"my-canvas\"</span>); <span class=\"comment\">//添加属性</span></span><br><span class=\"line\">     box.appendChild(canvas);</span><br><span class=\"line\">     <span class=\"comment\">// 转换图片得到base64格式</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     img.src = dataURL;</span><br><span class=\"line\">     img.className = <span class=\"string\">\"cardImg\"</span>;</span><br><span class=\"line\">     img.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">     img.style.left = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">     img.style.top = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">     img.style.transform = <span class=\"string\">\"translate(-50%, -50%)\"</span>;</span><br><span class=\"line\">     img.style.zIndex = <span class=\"string\">\"150\"</span>;</span><br><span class=\"line\">     img.style.width = c_width + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">     img.style.height = c_height + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">     box.appendChild(img);</span><br><span class=\"line\">     <span class=\"comment\">// 生成成功</span></span><br><span class=\"line\">     _this.$emit(<span class=\"string\">'createPosterSuccess'</span>, dataURL);</span><br><span class=\"line\">     _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">     _this.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>大致就完成了，主要在与异步的问题，在图片base64格式转换的时候也要判断二维码是否生成成功。<br>还有生成到成为一张图片还是需要一定时间，所以最好有一个生成中的加载状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>功能需求：获取海报参数自定义生成一张带二维码海报。<br>效果如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548062679065-c45906c9-bae5-4d02-92bc-13f747042672.jpeg#align=left&amp;display=inline&amp;height=657&amp;name=Inked%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190121172129_LI.jpg&amp;originHeight=1298&amp;originWidth=836&amp;size=673550&amp;status=done&amp;style=none&amp;width=423\" alt=\"Inked微信图片_20190121172129_LI.jpg\"></p>\n<p>元素：主要分成背景图，用户信息和带用户信息的二维码（由前端生成）；</p>\n<p>步骤：先根据设计完成布局设计-&gt;将这张海报的html元素生成为canvas-&gt;将该canvas转化成图片；</p>\n<ul>\n<li>步骤1：请求数据，成功后主要是二维码的生成（使用qrcodejs2）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成二维码</span></span><br><span class=\"line\">    qrcodeCreate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_this.poster_params.code_url) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> qrcodeDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>);</span><br><span class=\"line\">        qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">          width: <span class=\"built_in\">parseInt</span>(qrcodeDom.clientWidth), <span class=\"comment\">// 设置宽度，单位像素</span></span><br><span class=\"line\">          height: <span class=\"built_in\">parseInt</span>(qrcodeDom.clientHeight), <span class=\"comment\">// 设置高度，单位像素</span></span><br><span class=\"line\">          text: _this.poster_params.code_url <span class=\"comment\">// 设置二维码内容或跳转地址</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤2：设计海报canvas</li>\n</ul>\n<p>注意是内部图片必须有效加载才能生成成功，所以需要先判断图片链接的有效性，之后等图片完全加载完成之后再转为canvas；还有在图片为不同域的情况也可能会产生生成失败的现象，所以需要先将跨域图片转换为base64格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建海报canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"poster-box\"</span>); <span class=\"comment\">// 海报盒子</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> c_width = box.offsetWidth;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> c_height = box.offsetHeight;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 获取根据屏幕分辨率，来设置canvas的宽高以获得高清图片</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> devicePixelRatio = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> backingStoreRatio =</span><br><span class=\"line\">        context.webkitBackingStorePixelRatio ||</span><br><span class=\"line\">        context.mozBackingStorePixelRatio ||</span><br><span class=\"line\">        context.msBackingStorePixelRatio ||</span><br><span class=\"line\">        context.oBackingStorePixelRatio ||</span><br><span class=\"line\">        context.backingStorePixelRatio ||</span><br><span class=\"line\">        <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ratio = devicePixelRatio / backingStoreRatio;</span><br><span class=\"line\">      canvas.width = c_width * ratio;</span><br><span class=\"line\">      canvas.height = c_height * ratio;</span><br><span class=\"line\">      canvas.style.width = c_width + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">      canvas.style.height = c_height + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">      canvas.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">      canvas.style.left = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">      canvas.style.top = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">      canvas.style.transform = <span class=\"string\">\"translate(-50%, -50%)\"</span>;</span><br><span class=\"line\">      canvas.style.zIndex = <span class=\"string\">\"10\"</span>;</span><br><span class=\"line\">      canvas.style.opacity = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">      <span class=\"comment\">// canvas的页面位置自行调整</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> scrollTop =</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.documentElement.scrollTop ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageYOffset ||</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> scrollLeft =</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.documentElement.scrollLeft ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageXOffset ||</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> transTop =</span><br><span class=\"line\">        screenTop -</span><br><span class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"poster-view-content\"</span>)[<span class=\"number\">0</span>].offsetTop -</span><br><span class=\"line\">          c_height / <span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> transLeft = (c_width - <span class=\"built_in\">window</span>.innerWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      context.scale(ratio, ratio);</span><br><span class=\"line\">      <span class=\"comment\">// canvas的位置要保证与div位置相同。</span></span><br><span class=\"line\">      context.translate(transLeft, transTop);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 背景图片</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canvas2 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ctx = canvas2.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      img.crossOrigin = <span class=\"string\">\"Anonymous\"</span>;</span><br><span class=\"line\">      img.src = _this.poster_params.share;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (img.width &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          canvas2.height = img.height;</span><br><span class=\"line\">          canvas2.width = img.width;</span><br><span class=\"line\">          ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">let</span> dataURL = canvas2.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"poster-bg\"</span>).setAttribute(<span class=\"string\">\"src\"</span>, dataURL);</span><br><span class=\"line\">          canvas2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          _this.getCard(box, canvas, c_width, c_height); <span class=\"comment\">// 生成海报canvas</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _this.isFailed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.$toast.center(<span class=\"string\">\"海报跑走了~\"</span>);</span><br><span class=\"line\">      &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤3：在所有图片都加载以及转换成功后，可以生成海报canvas并转换生成图片（使用html2canvas）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次图片加载成功后都会请求执行该函数（但是要在所有图片都加载成功后才能真正生成canvas）</span></span><br><span class=\"line\"> getCard(box, canvas, c_width, c_height) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   _this.cnt++; <span class=\"comment\">// 对已加载成功的图片数进行判断</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (_this.cnt &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">// 所有图片都成功可以生成</span></span><br><span class=\"line\">   html2canvas(box, &#123;</span><br><span class=\"line\">     allowTaint: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     useCORS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     canvas: canvas,</span><br><span class=\"line\">     width: c_width,</span><br><span class=\"line\">     height: c_height</span><br><span class=\"line\">   &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">     canvas.setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"my-canvas\"</span>); <span class=\"comment\">//添加属性</span></span><br><span class=\"line\">     box.appendChild(canvas);</span><br><span class=\"line\">     <span class=\"comment\">// 转换图片得到base64格式</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     img.src = dataURL;</span><br><span class=\"line\">     img.className = <span class=\"string\">\"cardImg\"</span>;</span><br><span class=\"line\">     img.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">     img.style.left = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">     img.style.top = <span class=\"string\">\"50%\"</span>;</span><br><span class=\"line\">     img.style.transform = <span class=\"string\">\"translate(-50%, -50%)\"</span>;</span><br><span class=\"line\">     img.style.zIndex = <span class=\"string\">\"150\"</span>;</span><br><span class=\"line\">     img.style.width = c_width + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">     img.style.height = c_height + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">     box.appendChild(img);</span><br><span class=\"line\">     <span class=\"comment\">// 生成成功</span></span><br><span class=\"line\">     _this.$emit(<span class=\"string\">'createPosterSuccess'</span>, dataURL);</span><br><span class=\"line\">     _this.isLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">     _this.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>大致就完成了，主要在与异步的问题，在图片base64格式转换的时候也要判断二维码是否生成成功。<br>还有生成到成为一张图片还是需要一定时间，所以最好有一个生成中的加载状态。</p>\n"},{"title":"ios10以下版本内浏览器无法打开vue项目","urlname":"lkmfgo","date":"2019-01-21T01:53:08.000Z","_content":"在项目（vue）测试过程中发现，ios10一下版本的浏览器均无法正常加载，出现白屏现象，开始以为是不支持es6语法的原因，但是添加es6转es5的配置之后还是无法加载，_通过找了一系列方法发现可能是swiper造成的（首页使用了swiper进行图片轮播）_。<br />\n解决：将swiper4.4.1->3.4.2，并修改一定的语法。\n\n```\n// 4.4.1\nvar swiper = new Swiper(\".swiper-container\", {\n  loop: true,\n  speed: 800,\n  autoplay: {\n    disableOnInteraction: false, //手动滑动之后不打断播放\n    delay: 2000\n  },\n  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n  pagination: {\n    el: \".swiper-pagination\"\n  }\n});\n// 3.4.2\nvar swiper = new Swiper(\".swiper-container\", {\n  loop: true,\n  speed: 800,\n  autoplay: 2000,\n  autoplayDisableOnInteraction: false,\n  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n  pagination : '.swiper-pagination',\n});\n```\n\n","source":"_posts/yuque/ios10以下版本内浏览器无法打开vue项目.md","raw":"\n---\n\ntitle: ios10以下版本内浏览器无法打开vue项目\n\nurlname: lkmfgo\n\ndate: 2019-01-21 09:53:08 +0800\n\ntags: []\n\ncategories: []\n\n---\n在项目（vue）测试过程中发现，ios10一下版本的浏览器均无法正常加载，出现白屏现象，开始以为是不支持es6语法的原因，但是添加es6转es5的配置之后还是无法加载，_通过找了一系列方法发现可能是swiper造成的（首页使用了swiper进行图片轮播）_。<br />\n解决：将swiper4.4.1->3.4.2，并修改一定的语法。\n\n```\n// 4.4.1\nvar swiper = new Swiper(\".swiper-container\", {\n  loop: true,\n  speed: 800,\n  autoplay: {\n    disableOnInteraction: false, //手动滑动之后不打断播放\n    delay: 2000\n  },\n  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n  pagination: {\n    el: \".swiper-pagination\"\n  }\n});\n// 3.4.2\nvar swiper = new Swiper(\".swiper-container\", {\n  loop: true,\n  speed: 800,\n  autoplay: 2000,\n  autoplayDisableOnInteraction: false,\n  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n  pagination : '.swiper-pagination',\n});\n```\n\n","slug":"yuque/ios10以下版本内浏览器无法打开vue项目","published":1,"updated":"2020-04-22T02:25:07.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqu0030e36kzknodm4l","content":"<p>在项目（vue）测试过程中发现，ios10一下版本的浏览器均无法正常加载，出现白屏现象，开始以为是不支持es6语法的原因，但是添加es6转es5的配置之后还是无法加载，<em>通过找了一系列方法发现可能是swiper造成的（首页使用了swiper进行图片轮播）</em>。<br><br>解决：将swiper4.4.1-&gt;3.4.2，并修改一定的语法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 4.4.1</span><br><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">  loop: true,</span><br><span class=\"line\">  speed: 800,</span><br><span class=\"line\">  autoplay: &#123;</span><br><span class=\"line\">    disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">    delay: 2000</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">  pagination: &#123;</span><br><span class=\"line\">    el: &quot;.swiper-pagination&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 3.4.2</span><br><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">  loop: true,</span><br><span class=\"line\">  speed: 800,</span><br><span class=\"line\">  autoplay: 2000,</span><br><span class=\"line\">  autoplayDisableOnInteraction: false,</span><br><span class=\"line\">  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">  pagination : &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目（vue）测试过程中发现，ios10一下版本的浏览器均无法正常加载，出现白屏现象，开始以为是不支持es6语法的原因，但是添加es6转es5的配置之后还是无法加载，<em>通过找了一系列方法发现可能是swiper造成的（首页使用了swiper进行图片轮播）</em>。<br><br>解决：将swiper4.4.1-&gt;3.4.2，并修改一定的语法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 4.4.1</span><br><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">  loop: true,</span><br><span class=\"line\">  speed: 800,</span><br><span class=\"line\">  autoplay: &#123;</span><br><span class=\"line\">    disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">    delay: 2000</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">  pagination: &#123;</span><br><span class=\"line\">    el: &quot;.swiper-pagination&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 3.4.2</span><br><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">  loop: true,</span><br><span class=\"line\">  speed: 800,</span><br><span class=\"line\">  autoplay: 2000,</span><br><span class=\"line\">  autoplayDisableOnInteraction: false,</span><br><span class=\"line\">  observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">  pagination : &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"mpvue 引入第三方UI组件库","urlname":"hh0p31","date":"2019-06-05T05:52:32.000Z","_content":"1、下载第三方UI组件包，将其dist文件夹复制至自己项目下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714105275-093b7242-cbe2-44b6-a3d3-250b711442f8.png#align=left&display=inline&height=210&name=image.png&originHeight=210&originWidth=679&size=24183&status=done&width=679)\n\n2、在需使用组件的页面json内引入需要的组件<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714798430-aed62fe7-c10c-44b4-978b-d1a56a7adde2.png#align=left&display=inline&height=99&name=image.png&originHeight=99&originWidth=528&size=6287&status=done&width=528)\n\n3、直接在内面内使用组件<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714828248-15d7b958-05ba-4ef8-9097-45e203b4145e.png#align=left&display=inline&height=382&name=image.png&originHeight=382&originWidth=353&size=26112&status=done&width=353)\n\n注意：<br />①、需要将微信开发工具的ES6转ES5选项选上，否则报错。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714974755-a4062352-698c-4762-8613-04137896444a.png#align=left&display=inline&height=43&name=image.png&originHeight=43&originWidth=183&size=1731&status=done&width=183)\n\n②、我项目出现的问题，原先我把第三方的dist放在项目文件的dist文件下，但是发现还是会报not found错误，然后转移到项目的static文件夹下就好了。\n\n","source":"_posts/yuque/mpvue 引入第三方UI组件库.md","raw":"\n---\n\ntitle: mpvue 引入第三方UI组件库\n\nurlname: hh0p31\n\ndate: 2019-06-05 13:52:32 +0800\n\ntags: []\n\ncategories: []\n\n---\n1、下载第三方UI组件包，将其dist文件夹复制至自己项目下<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714105275-093b7242-cbe2-44b6-a3d3-250b711442f8.png#align=left&display=inline&height=210&name=image.png&originHeight=210&originWidth=679&size=24183&status=done&width=679)\n\n2、在需使用组件的页面json内引入需要的组件<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714798430-aed62fe7-c10c-44b4-978b-d1a56a7adde2.png#align=left&display=inline&height=99&name=image.png&originHeight=99&originWidth=528&size=6287&status=done&width=528)\n\n3、直接在内面内使用组件<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714828248-15d7b958-05ba-4ef8-9097-45e203b4145e.png#align=left&display=inline&height=382&name=image.png&originHeight=382&originWidth=353&size=26112&status=done&width=353)\n\n注意：<br />①、需要将微信开发工具的ES6转ES5选项选上，否则报错。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1559714974755-a4062352-698c-4762-8613-04137896444a.png#align=left&display=inline&height=43&name=image.png&originHeight=43&originWidth=183&size=1731&status=done&width=183)\n\n②、我项目出现的问题，原先我把第三方的dist放在项目文件的dist文件下，但是发现还是会报not found错误，然后转移到项目的static文件夹下就好了。\n\n","slug":"yuque/mpvue 引入第三方UI组件库","published":1,"updated":"2020-04-22T02:25:07.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqv0032e36k1n706ddf","content":"<p>1、下载第三方UI组件包，将其dist文件夹复制至自己项目下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714105275-093b7242-cbe2-44b6-a3d3-250b711442f8.png#align=left&amp;display=inline&amp;height=210&amp;name=image.png&amp;originHeight=210&amp;originWidth=679&amp;size=24183&amp;status=done&amp;width=679\" alt=\"image.png\"></p>\n<p>2、在需使用组件的页面json内引入需要的组件<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714798430-aed62fe7-c10c-44b4-978b-d1a56a7adde2.png#align=left&amp;display=inline&amp;height=99&amp;name=image.png&amp;originHeight=99&amp;originWidth=528&amp;size=6287&amp;status=done&amp;width=528\" alt=\"image.png\"></p>\n<p>3、直接在内面内使用组件<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714828248-15d7b958-05ba-4ef8-9097-45e203b4145e.png#align=left&amp;display=inline&amp;height=382&amp;name=image.png&amp;originHeight=382&amp;originWidth=353&amp;size=26112&amp;status=done&amp;width=353\" alt=\"image.png\"></p>\n<p>注意：<br>①、需要将微信开发工具的ES6转ES5选项选上，否则报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714974755-a4062352-698c-4762-8613-04137896444a.png#align=left&amp;display=inline&amp;height=43&amp;name=image.png&amp;originHeight=43&amp;originWidth=183&amp;size=1731&amp;status=done&amp;width=183\" alt=\"image.png\"></p>\n<p>②、我项目出现的问题，原先我把第三方的dist放在项目文件的dist文件下，但是发现还是会报not found错误，然后转移到项目的static文件夹下就好了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、下载第三方UI组件包，将其dist文件夹复制至自己项目下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714105275-093b7242-cbe2-44b6-a3d3-250b711442f8.png#align=left&amp;display=inline&amp;height=210&amp;name=image.png&amp;originHeight=210&amp;originWidth=679&amp;size=24183&amp;status=done&amp;width=679\" alt=\"image.png\"></p>\n<p>2、在需使用组件的页面json内引入需要的组件<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714798430-aed62fe7-c10c-44b4-978b-d1a56a7adde2.png#align=left&amp;display=inline&amp;height=99&amp;name=image.png&amp;originHeight=99&amp;originWidth=528&amp;size=6287&amp;status=done&amp;width=528\" alt=\"image.png\"></p>\n<p>3、直接在内面内使用组件<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714828248-15d7b958-05ba-4ef8-9097-45e203b4145e.png#align=left&amp;display=inline&amp;height=382&amp;name=image.png&amp;originHeight=382&amp;originWidth=353&amp;size=26112&amp;status=done&amp;width=353\" alt=\"image.png\"></p>\n<p>注意：<br>①、需要将微信开发工具的ES6转ES5选项选上，否则报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1559714974755-a4062352-698c-4762-8613-04137896444a.png#align=left&amp;display=inline&amp;height=43&amp;name=image.png&amp;originHeight=43&amp;originWidth=183&amp;size=1731&amp;status=done&amp;width=183\" alt=\"image.png\"></p>\n<p>②、我项目出现的问题，原先我把第三方的dist放在项目文件的dist文件下，但是发现还是会报not found错误，然后转移到项目的static文件夹下就好了。</p>\n"},{"title":"no such file or directory, scandir &#39;...\\node_modules\\node-sass\\vendor","urlname":"mf89ph","date":"2020-03-27T09:02:39.000Z","_content":"tags: [sass, error]\ncategories: [error]\ncover:\n---<br /><!-- more --><br />\n在编译的时候突然出现这个问题。<br />解决：<br />重新bulid node sass。<br />\n\n```bash\nnpm rebuild node-sass\n```\n\n<br />\n2020.04.19<br />\n拉取到hexo博客内时，报错：<br />incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 4, column 14:<br />   title: ENOENT: no such file or directory, sca ... <br />\n因为标题内存在英文':'。\n\n","source":"_posts/yuque/no such file or directory, scandir '...!node_modules!node-sass!vendor.md","raw":"\n---\n\ntitle: no such file or directory, scandir &#39;...\\node_modules\\node-sass\\vendor\n\nurlname: mf89ph\n\ndate: 2020-03-27 17:02:39 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [sass, error]\ncategories: [error]\ncover:\n---<br /><!-- more --><br />\n在编译的时候突然出现这个问题。<br />解决：<br />重新bulid node sass。<br />\n\n```bash\nnpm rebuild node-sass\n```\n\n<br />\n2020.04.19<br />\n拉取到hexo博客内时，报错：<br />incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 4, column 14:<br />   title: ENOENT: no such file or directory, sca ... <br />\n因为标题内存在英文':'。\n\n","slug":"yuque/no such file or directory, scandir '...!node_modules!node-sass!vendor","published":1,"updated":"2020-04-22T02:25:07.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqw0033e36k3hmwkegy","content":"<p>tags: [sass, error]<br>categories: [error]<br>cover:<br>—<br><a id=\"more\"></a><br><br>在编译的时候突然出现这个问题。<br>解决：<br>重新bulid node sass。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n<p><br><br>2020.04.19<br><br>拉取到hexo博客内时，报错：<br>incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 4, column 14:<br>   title: ENOENT: no such file or directory, sca … <br><br>因为标题内存在英文’:’。</p>\n","site":{"data":{}},"excerpt":"<p>tags: [sass, error]<br>categories: [error]<br>cover:<br>—<br></p>","more":"<br><br>在编译的时候突然出现这个问题。<br>解决：<br>重新bulid node sass。<br><p></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n<p><br><br>2020.04.19<br><br>拉取到hexo博客内时，报错：<br>incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 4, column 14:<br>   title: ENOENT: no such file or directory, sca … <br><br>因为标题内存在英文’:’。</p>"},{"title":"sourcetree 推送报错","urlname":"mzo3gb","date":"2019-02-12T06:18:30.000Z","_content":"错误信息：<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953523594-244e41bb-0d21-4195-839b-c7f7dd8fdfa8.png#align=left&display=inline&height=218&originHeight=320&originWidth=1095&size=0&width=746)\n\n解决方法：<br />打开工具->选项板块\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953701131-973a069a-7712-44f2-bb4d-10805c62b624.png#align=left&display=inline&height=212&name=image.png&originHeight=212&originWidth=598&size=51915&width=598)\n\n将SSH客户端选项改为OpenSSH：\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953782953-f6c8fd41-8a81-4d8f-8d4c-ec68cfde3ebf.png#align=left&display=inline&height=191&name=image.png&originHeight=191&originWidth=531&size=15360&width=531)\n\n这样就可以推送成功啦！\n\n","source":"_posts/yuque/sourcetree 推送报错.md","raw":"\n---\n\ntitle: sourcetree 推送报错\n\nurlname: mzo3gb\n\ndate: 2019-02-12 14:18:30 +0800\n\ntags: []\n\ncategories: []\n\n---\n错误信息：<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953523594-244e41bb-0d21-4195-839b-c7f7dd8fdfa8.png#align=left&display=inline&height=218&originHeight=320&originWidth=1095&size=0&width=746)\n\n解决方法：<br />打开工具->选项板块\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953701131-973a069a-7712-44f2-bb4d-10805c62b624.png#align=left&display=inline&height=212&name=image.png&originHeight=212&originWidth=598&size=51915&width=598)\n\n将SSH客户端选项改为OpenSSH：\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1549953782953-f6c8fd41-8a81-4d8f-8d4c-ec68cfde3ebf.png#align=left&display=inline&height=191&name=image.png&originHeight=191&originWidth=531&size=15360&width=531)\n\n这样就可以推送成功啦！\n\n","slug":"yuque/sourcetree 推送报错","published":1,"updated":"2020-04-22T02:25:07.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqw0034e36k1mx3ni7o","content":"<p>错误信息：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953523594-244e41bb-0d21-4195-839b-c7f7dd8fdfa8.png#align=left&amp;display=inline&amp;height=218&amp;originHeight=320&amp;originWidth=1095&amp;size=0&amp;width=746\" alt=\"\"></p>\n<p>解决方法：<br>打开工具-&gt;选项板块</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953701131-973a069a-7712-44f2-bb4d-10805c62b624.png#align=left&amp;display=inline&amp;height=212&amp;name=image.png&amp;originHeight=212&amp;originWidth=598&amp;size=51915&amp;width=598\" alt=\"image.png\"></p>\n<p>将SSH客户端选项改为OpenSSH：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953782953-f6c8fd41-8a81-4d8f-8d4c-ec68cfde3ebf.png#align=left&amp;display=inline&amp;height=191&amp;name=image.png&amp;originHeight=191&amp;originWidth=531&amp;size=15360&amp;width=531\" alt=\"image.png\"></p>\n<p>这样就可以推送成功啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>错误信息：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953523594-244e41bb-0d21-4195-839b-c7f7dd8fdfa8.png#align=left&amp;display=inline&amp;height=218&amp;originHeight=320&amp;originWidth=1095&amp;size=0&amp;width=746\" alt=\"\"></p>\n<p>解决方法：<br>打开工具-&gt;选项板块</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953701131-973a069a-7712-44f2-bb4d-10805c62b624.png#align=left&amp;display=inline&amp;height=212&amp;name=image.png&amp;originHeight=212&amp;originWidth=598&amp;size=51915&amp;width=598\" alt=\"image.png\"></p>\n<p>将SSH客户端选项改为OpenSSH：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1549953782953-f6c8fd41-8a81-4d8f-8d4c-ec68cfde3ebf.png#align=left&amp;display=inline&amp;height=191&amp;name=image.png&amp;originHeight=191&amp;originWidth=531&amp;size=15360&amp;width=531\" alt=\"image.png\"></p>\n<p>这样就可以推送成功啦！</p>\n"},{"title":"swiper4.0自动轮播+循环轮播","urlname":"piua4g","date":"2019-01-21T02:09:43.000Z","_content":"1、点击导致自动轮播停止：\n```\nautoplay: {\n  disableOnInteraction: false, //手动滑动之后不打断播放\n  delay: 2000\n},\n```\n2、循环轮播（需要继续左滑至第一张，非返回第一张）<br />\n条件：需要在html和图片加载完之后进行swiper初始化；\n```\nvar swiper = new Swiper(\".swiper-container\", {\n                loop: true,\n                slidesPerView: \"auto\",\n                // loopedSlides: _this.bannerList.length,\n                speed: 300,\n                autoplay: {\n                  disableOnInteraction: false, //手动滑动之后不打断播放\n                  delay: 2000\n                },\n                observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n                pagination: {\n                  el: \".swiper-pagination\"\n                }\n              });\n```\n问题：会产生空白页（由于懒加载，去掉图片的懒加载就好了）。\n\n","source":"_posts/yuque/swiper4.0自动轮播+循环轮播.md","raw":"\n---\n\ntitle: swiper4.0自动轮播+循环轮播\n\nurlname: piua4g\n\ndate: 2019-01-21 10:09:43 +0800\n\ntags: []\n\ncategories: []\n\n---\n1、点击导致自动轮播停止：\n```\nautoplay: {\n  disableOnInteraction: false, //手动滑动之后不打断播放\n  delay: 2000\n},\n```\n2、循环轮播（需要继续左滑至第一张，非返回第一张）<br />\n条件：需要在html和图片加载完之后进行swiper初始化；\n```\nvar swiper = new Swiper(\".swiper-container\", {\n                loop: true,\n                slidesPerView: \"auto\",\n                // loopedSlides: _this.bannerList.length,\n                speed: 300,\n                autoplay: {\n                  disableOnInteraction: false, //手动滑动之后不打断播放\n                  delay: 2000\n                },\n                observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。\n                pagination: {\n                  el: \".swiper-pagination\"\n                }\n              });\n```\n问题：会产生空白页（由于懒加载，去掉图片的懒加载就好了）。\n\n","slug":"yuque/swiper4.0自动轮播+循环轮播","published":1,"updated":"2020-04-22T02:25:07.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqx0035e36ksebzct5f","content":"<p>1、点击导致自动轮播停止：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoplay: &#123;</span><br><span class=\"line\">  disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">  delay: 2000</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>2、循环轮播（需要继续左滑至第一张，非返回第一张）<br><br>条件：需要在html和图片加载完之后进行swiper初始化；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">                loop: true,</span><br><span class=\"line\">                slidesPerView: &quot;auto&quot;,</span><br><span class=\"line\">                // loopedSlides: _this.bannerList.length,</span><br><span class=\"line\">                speed: 300,</span><br><span class=\"line\">                autoplay: &#123;</span><br><span class=\"line\">                  disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">                  delay: 2000</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">                pagination: &#123;</span><br><span class=\"line\">                  el: &quot;.swiper-pagination&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>问题：会产生空白页（由于懒加载，去掉图片的懒加载就好了）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、点击导致自动轮播停止：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoplay: &#123;</span><br><span class=\"line\">  disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">  delay: 2000</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>2、循环轮播（需要继续左滑至第一张，非返回第一张）<br><br>条件：需要在html和图片加载完之后进行swiper初始化；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var swiper = new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class=\"line\">                loop: true,</span><br><span class=\"line\">                slidesPerView: &quot;auto&quot;,</span><br><span class=\"line\">                // loopedSlides: _this.bannerList.length,</span><br><span class=\"line\">                speed: 300,</span><br><span class=\"line\">                autoplay: &#123;</span><br><span class=\"line\">                  disableOnInteraction: false, //手动滑动之后不打断播放</span><br><span class=\"line\">                  delay: 2000</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                observer: true, //监听，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。</span><br><span class=\"line\">                pagination: &#123;</span><br><span class=\"line\">                  el: &quot;.swiper-pagination&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>问题：会产生空白页（由于懒加载，去掉图片的懒加载就好了）。</p>\n"},{"title":"「Taro」Taro CLI 与本地安装运行时框架 @tarojs/taro-weapp 版本不一致","urlname":"nospzk","date":"2020-02-14T11:19:51.000Z","_content":"tags: [taro, error]\ncategories: [taro]\ncover:\n---<br /><!-- more --><br />\n使用npm切换版本也可，需要提前进行reset cache，并采用全局操作。<br />\n\n```bash\nnpm install -g @tarojs/cli@1.3.10\n```\n\n<br />-------------------------------2020.03.30 更新-------------------------------<br />\n啊啊啊啊啊！成功更新项目taro版本后，可以使用yarn dev:weapp成功编译，但是在微信开发工具中出现报错。<br />![0216.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1581935342747-e118ac34-6099-4e18-8516-77b75975450f.png#align=left&display=inline&height=319&margin=%5Bobject%20Object%5D&name=0216.PNG&originHeight=319&originWidth=798&size=37866&status=done&style=none&width=798)<br />搞了几天也没有明确报错原因，所以打算还是回退本地的taro版本，但是使用npm卸载或者切换版本以及直接删除npm目录下的@taro都无效之后，使用yarn进行了下taro版本切换操作然后成功了。<br />\n\n```bash\nyarn add @tarojs/cli@1.3.10\n```\n\n<br />想知道为什么？！！！<br />\n-------------------------------2020.02.17-------------------------------<br />\n为原先开发小程序的时候Taro还是1.3.10，现在换了电脑安装了Taro 2.0，结果编译运行项目的时候就报错了。<br />![0214.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1581679328067-ac66632d-ef65-4dd4-9be1-c090b1a47399.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&name=0214.PNG&originHeight=245&originWidth=1331&size=33627&status=done&style=none&width=1331)<br />\n本地Taro版本与项目Taro版本不一致。<br />\n所以需要更新项目的Taro版本。<br />\n\n```bash\n# 首先更新 Taro CLI 工具，全部升级至最新版本\n\n# taro\n$ taro update self \n# npm\nnpm i -g @tarojs/cli\n# yarn\nyarn global add @tarojs/cli\n\n# 更新项目中 Taro 相关的依赖\n\n$ taro update project \n```\n\n<br />本地更新至了Taro 2.0.3，但是`taro update project`更新后，package.json内`@tarojs/taro-weapp`为1.3.37，导致本地与项目Taro版本还是不一致，所以在使用`taro update project`时添加相应的版本号。<br />\n但是再次编译还是报不一致的错误，需要删除node_modules之后重新安装依赖。<br />\n<br />警告：Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration .<br />原因：eslint-plugin-react未指定react版本。<br />\n\n```bash\n# Install ESLint either locally or globally. (Note that locally, per project, is strongly preferred)\n$ npm install eslint --save-dev\n\n# If you installed ESLint globally, you have to install React plugin globally too. Otherwise, install it locally.\n$ npm install eslint-plugin-react --save-dev\n```\n并在eslintrc.js中指定react版本但是还是无效！！！！\n```json\n1. settings: {\n2. \treact: {\n3.         version: \"detect\"\n4.     }\n5. }\n```\n\n<br />\n\n\n","source":"_posts/yuque/「Taro」Taro CLI 与本地安装运行时框架 @tarojs!taro-weapp 版本不一致.md","raw":"\n---\n\ntitle: 「Taro」Taro CLI 与本地安装运行时框架 @tarojs/taro-weapp 版本不一致\n\nurlname: nospzk\n\ndate: 2020-02-14 19:19:51 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [taro, error]\ncategories: [taro]\ncover:\n---<br /><!-- more --><br />\n使用npm切换版本也可，需要提前进行reset cache，并采用全局操作。<br />\n\n```bash\nnpm install -g @tarojs/cli@1.3.10\n```\n\n<br />-------------------------------2020.03.30 更新-------------------------------<br />\n啊啊啊啊啊！成功更新项目taro版本后，可以使用yarn dev:weapp成功编译，但是在微信开发工具中出现报错。<br />![0216.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1581935342747-e118ac34-6099-4e18-8516-77b75975450f.png#align=left&display=inline&height=319&margin=%5Bobject%20Object%5D&name=0216.PNG&originHeight=319&originWidth=798&size=37866&status=done&style=none&width=798)<br />搞了几天也没有明确报错原因，所以打算还是回退本地的taro版本，但是使用npm卸载或者切换版本以及直接删除npm目录下的@taro都无效之后，使用yarn进行了下taro版本切换操作然后成功了。<br />\n\n```bash\nyarn add @tarojs/cli@1.3.10\n```\n\n<br />想知道为什么？！！！<br />\n-------------------------------2020.02.17-------------------------------<br />\n为原先开发小程序的时候Taro还是1.3.10，现在换了电脑安装了Taro 2.0，结果编译运行项目的时候就报错了。<br />![0214.PNG](https://cdn.nlark.com/yuque/0/2020/png/250093/1581679328067-ac66632d-ef65-4dd4-9be1-c090b1a47399.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&name=0214.PNG&originHeight=245&originWidth=1331&size=33627&status=done&style=none&width=1331)<br />\n本地Taro版本与项目Taro版本不一致。<br />\n所以需要更新项目的Taro版本。<br />\n\n```bash\n# 首先更新 Taro CLI 工具，全部升级至最新版本\n\n# taro\n$ taro update self \n# npm\nnpm i -g @tarojs/cli\n# yarn\nyarn global add @tarojs/cli\n\n# 更新项目中 Taro 相关的依赖\n\n$ taro update project \n```\n\n<br />本地更新至了Taro 2.0.3，但是`taro update project`更新后，package.json内`@tarojs/taro-weapp`为1.3.37，导致本地与项目Taro版本还是不一致，所以在使用`taro update project`时添加相应的版本号。<br />\n但是再次编译还是报不一致的错误，需要删除node_modules之后重新安装依赖。<br />\n<br />警告：Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration .<br />原因：eslint-plugin-react未指定react版本。<br />\n\n```bash\n# Install ESLint either locally or globally. (Note that locally, per project, is strongly preferred)\n$ npm install eslint --save-dev\n\n# If you installed ESLint globally, you have to install React plugin globally too. Otherwise, install it locally.\n$ npm install eslint-plugin-react --save-dev\n```\n并在eslintrc.js中指定react版本但是还是无效！！！！\n```json\n1. settings: {\n2. \treact: {\n3.         version: \"detect\"\n4.     }\n5. }\n```\n\n<br />\n\n\n","slug":"yuque/「Taro」Taro CLI 与本地安装运行时框架 @tarojs!taro-weapp 版本不一致","published":1,"updated":"2020-04-22T02:25:07.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqx0036e36k1rar989w","content":"<p>tags: [taro, error]<br>categories: [taro]<br>cover:<br>—<br><a id=\"more\"></a><br><br>使用npm切换版本也可，需要提前进行reset cache，并采用全局操作。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @tarojs/cli@1.3.10</span><br></pre></td></tr></table></figure>\n<p><br>——————————-2020.03.30 更新——————————-<br><br>啊啊啊啊啊！成功更新项目taro版本后，可以使用yarn dev:weapp成功编译，但是在微信开发工具中出现报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1581935342747-e118ac34-6099-4e18-8516-77b75975450f.png#align=left&amp;display=inline&amp;height=319&amp;margin=%5Bobject%20Object%5D&amp;name=0216.PNG&amp;originHeight=319&amp;originWidth=798&amp;size=37866&amp;status=done&amp;style=none&amp;width=798\" alt=\"0216.PNG\"><br>搞了几天也没有明确报错原因，所以打算还是回退本地的taro版本，但是使用npm卸载或者切换版本以及直接删除npm目录下的@taro都无效之后，使用yarn进行了下taro版本切换操作然后成功了。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @tarojs/cli@1.3.10</span><br></pre></td></tr></table></figure>\n<p><br>想知道为什么？！！！<br><br>——————————-2020.02.17——————————-<br><br>为原先开发小程序的时候Taro还是1.3.10，现在换了电脑安装了Taro 2.0，结果编译运行项目的时候就报错了。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1581679328067-ac66632d-ef65-4dd4-9be1-c090b1a47399.png#align=left&amp;display=inline&amp;height=245&amp;margin=%5Bobject%20Object%5D&amp;name=0214.PNG&amp;originHeight=245&amp;originWidth=1331&amp;size=33627&amp;status=done&amp;style=none&amp;width=1331\" alt=\"0214.PNG\"><br><br>本地Taro版本与项目Taro版本不一致。<br><br>所以需要更新项目的Taro版本。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先更新 Taro CLI 工具，全部升级至最新版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># taro</span></span><br><span class=\"line\">$ taro update self </span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npm i -g @tarojs/cli</span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn global add @tarojs/cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新项目中 Taro 相关的依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ taro update project</span><br></pre></td></tr></table></figure>\n<p><br>本地更新至了Taro 2.0.3，但是<code>taro update project</code>更新后，package.json内<code>@tarojs/taro-weapp</code>为1.3.37，导致本地与项目Taro版本还是不一致，所以在使用<code>taro update project</code>时添加相应的版本号。<br><br>但是再次编译还是报不一致的错误，需要删除node_modules之后重新安装依赖。<br><br><br>警告：Warning: React version not specified in eslint-plugin-react settings. See <a href=\"https://github.com/yannickcr/eslint-plugin-react#configuration\" target=\"_blank\" rel=\"noopener\">https://github.com/yannickcr/eslint-plugin-react#configuration</a> .<br>原因：eslint-plugin-react未指定react版本。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install ESLint either locally or globally. (Note that locally, per project, is strongly preferred)</span></span><br><span class=\"line\">$ npm install eslint --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you installed ESLint globally, you have to install React plugin globally too. Otherwise, install it locally.</span></span><br><span class=\"line\">$ npm install eslint-plugin-react --save-dev</span><br></pre></td></tr></table></figure>\n<p>并在eslintrc.js中指定react版本但是还是无效！！！！<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. settings: &#123;</span><br><span class=\"line\">2. \treact: &#123;</span><br><span class=\"line\">3.         version: \"detect\"</span><br><span class=\"line\">4.     &#125;</span><br><span class=\"line\">5. &#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>tags: [taro, error]<br>categories: [taro]<br>cover:<br>—<br></p>","more":"<br><br>使用npm切换版本也可，需要提前进行reset cache，并采用全局操作。<br><p></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @tarojs/cli@1.3.10</span><br></pre></td></tr></table></figure>\n<p><br>——————————-2020.03.30 更新——————————-<br><br>啊啊啊啊啊！成功更新项目taro版本后，可以使用yarn dev:weapp成功编译，但是在微信开发工具中出现报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1581935342747-e118ac34-6099-4e18-8516-77b75975450f.png#align=left&amp;display=inline&amp;height=319&amp;margin=%5Bobject%20Object%5D&amp;name=0216.PNG&amp;originHeight=319&amp;originWidth=798&amp;size=37866&amp;status=done&amp;style=none&amp;width=798\" alt=\"0216.PNG\"><br>搞了几天也没有明确报错原因，所以打算还是回退本地的taro版本，但是使用npm卸载或者切换版本以及直接删除npm目录下的@taro都无效之后，使用yarn进行了下taro版本切换操作然后成功了。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @tarojs/cli@1.3.10</span><br></pre></td></tr></table></figure>\n<p><br>想知道为什么？！！！<br><br>——————————-2020.02.17——————————-<br><br>为原先开发小程序的时候Taro还是1.3.10，现在换了电脑安装了Taro 2.0，结果编译运行项目的时候就报错了。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1581679328067-ac66632d-ef65-4dd4-9be1-c090b1a47399.png#align=left&amp;display=inline&amp;height=245&amp;margin=%5Bobject%20Object%5D&amp;name=0214.PNG&amp;originHeight=245&amp;originWidth=1331&amp;size=33627&amp;status=done&amp;style=none&amp;width=1331\" alt=\"0214.PNG\"><br><br>本地Taro版本与项目Taro版本不一致。<br><br>所以需要更新项目的Taro版本。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先更新 Taro CLI 工具，全部升级至最新版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># taro</span></span><br><span class=\"line\">$ taro update self </span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npm i -g @tarojs/cli</span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn global add @tarojs/cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新项目中 Taro 相关的依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ taro update project</span><br></pre></td></tr></table></figure>\n<p><br>本地更新至了Taro 2.0.3，但是<code>taro update project</code>更新后，package.json内<code>@tarojs/taro-weapp</code>为1.3.37，导致本地与项目Taro版本还是不一致，所以在使用<code>taro update project</code>时添加相应的版本号。<br><br>但是再次编译还是报不一致的错误，需要删除node_modules之后重新安装依赖。<br><br><br>警告：Warning: React version not specified in eslint-plugin-react settings. See <a href=\"https://github.com/yannickcr/eslint-plugin-react#configuration\" target=\"_blank\" rel=\"noopener\">https://github.com/yannickcr/eslint-plugin-react#configuration</a> .<br>原因：eslint-plugin-react未指定react版本。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install ESLint either locally or globally. (Note that locally, per project, is strongly preferred)</span></span><br><span class=\"line\">$ npm install eslint --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you installed ESLint globally, you have to install React plugin globally too. Otherwise, install it locally.</span></span><br><span class=\"line\">$ npm install eslint-plugin-react --save-dev</span><br></pre></td></tr></table></figure>\n<p>并在eslintrc.js中指定react版本但是还是无效！！！！<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. settings: &#123;</span><br><span class=\"line\">2. \treact: &#123;</span><br><span class=\"line\">3.         version: \"detect\"</span><br><span class=\"line\">4.     &#125;</span><br><span class=\"line\">5. &#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>"},{"title":"「git」bad signature fatal index file corrupt","urlname":"gx5dy7","date":"2020-03-26T03:20:14.000Z","_content":"tags: [git, error]\ncategories: [error]\ncover:\n---<br /><!-- more --><br />\n在commit过程中，电脑突然蓝屏，之后开机打开电脑sourcetree就出现了这个报错问题。<br />\n**原因**：\n\n因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取。\n\n**解决办法：**\n```bash\n$ rm -f .git/index    // 删除文件index，也可以手动删除\n$ git reset       //这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件\n```\n\n<br />[原文章参考](https://blog.csdn.net/hy_coming/article/details/84099105)\n\n","source":"_posts/yuque/「git」bad signature fatal index file corrupt.md","raw":"\n---\n\ntitle: 「git」bad signature fatal index file corrupt\n\nurlname: gx5dy7\n\ndate: 2020-03-26 11:20:14 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [git, error]\ncategories: [error]\ncover:\n---<br /><!-- more --><br />\n在commit过程中，电脑突然蓝屏，之后开机打开电脑sourcetree就出现了这个报错问题。<br />\n**原因**：\n\n因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取。\n\n**解决办法：**\n```bash\n$ rm -f .git/index    // 删除文件index，也可以手动删除\n$ git reset       //这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件\n```\n\n<br />[原文章参考](https://blog.csdn.net/hy_coming/article/details/84099105)\n\n","slug":"yuque/「git」bad signature fatal index file corrupt","published":1,"updated":"2020-04-22T02:25:07.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqy0037e36k2d5nklm6","content":"<p>tags: [git, error]<br>categories: [error]<br>cover:<br>—<br><a id=\"more\"></a><br><br>在commit过程中，电脑突然蓝屏，之后开机打开电脑sourcetree就出现了这个报错问题。<br><br><strong>原因</strong>：</p>\n<p>因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取。</p>\n<p><strong>解决办法：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f .git/index    // 删除文件index，也可以手动删除</span><br><span class=\"line\">$ git reset       //这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件</span><br></pre></td></tr></table></figure></p>\n<p><br><a href=\"https://blog.csdn.net/hy_coming/article/details/84099105\" target=\"_blank\" rel=\"noopener\">原文章参考</a></p>\n","site":{"data":{}},"excerpt":"<p>tags: [git, error]<br>categories: [error]<br>cover:<br>—<br></p>","more":"<br><br>在commit过程中，电脑突然蓝屏，之后开机打开电脑sourcetree就出现了这个报错问题。<br><br><strong>原因</strong>：<p></p>\n<p>因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取。</p>\n<p><strong>解决办法：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f .git/index    // 删除文件index，也可以手动删除</span><br><span class=\"line\">$ git reset       //这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件</span><br></pre></td></tr></table></figure></p>\n<p><br><a href=\"https://blog.csdn.net/hy_coming/article/details/84099105\" target=\"_blank\" rel=\"noopener\">原文章参考</a></p>"},{"title":"「js」微信环境判断","urlname":"fgk9iw","date":"2020-02-06T03:10:23.000Z","_content":"tags: [js, wx]\ncategories: [js]\ncover:\n---<br /><!-- more --><br />\n通过对user-agent 参数包含的信息进行判断：<br />\n\n```javascript\nconst is_wechat = () => {\n  var ua = window.navigator.userAgent.toLowerCase();\n  return (\n    ua.match(/MicroMessenger/i) == \"micromessenger\" ||\n    ua.match(/_SQ_/i) == \"_sq_\"\n  );\n};\n```\n\n<br />问题：<br />在QQ内打开相关页面，user-agent参数如下其中包括`_sq_`，所以在QQ内会识别成微信环境。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580959388940-8a1c0ff3-5688-4d0b-af7b-fdcf5e05bc18.png#align=left&display=inline&height=180&margin=%5Bobject%20Object%5D&name=image.png&originHeight=360&originWidth=828&size=299978&status=done&style=none&width=414)\n\n","source":"_posts/yuque/「js」微信环境判断.md","raw":"\n---\n\ntitle: 「js」微信环境判断\n\nurlname: fgk9iw\n\ndate: 2020-02-06 11:10:23 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [js, wx]\ncategories: [js]\ncover:\n---<br /><!-- more --><br />\n通过对user-agent 参数包含的信息进行判断：<br />\n\n```javascript\nconst is_wechat = () => {\n  var ua = window.navigator.userAgent.toLowerCase();\n  return (\n    ua.match(/MicroMessenger/i) == \"micromessenger\" ||\n    ua.match(/_SQ_/i) == \"_sq_\"\n  );\n};\n```\n\n<br />问题：<br />在QQ内打开相关页面，user-agent参数如下其中包括`_sq_`，所以在QQ内会识别成微信环境。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1580959388940-8a1c0ff3-5688-4d0b-af7b-fdcf5e05bc18.png#align=left&display=inline&height=180&margin=%5Bobject%20Object%5D&name=image.png&originHeight=360&originWidth=828&size=299978&status=done&style=none&width=414)\n\n","slug":"yuque/「js」微信环境判断","published":1,"updated":"2020-04-22T02:25:07.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqz0038e36kwykrabov","content":"<p>tags: [js, wx]<br>categories: [js]<br>cover:<br>—<br><a id=\"more\"></a><br><br>通过对user-agent 参数包含的信息进行判断：<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> is_wechat = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    ua.match(<span class=\"regexp\">/MicroMessenger/i</span>) == <span class=\"string\">\"micromessenger\"</span> ||</span><br><span class=\"line\">    ua.match(<span class=\"regexp\">/_SQ_/i</span>) == <span class=\"string\">\"_sq_\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><br>问题：<br>在QQ内打开相关页面，user-agent参数如下其中包括<code>_sq_</code>，所以在QQ内会识别成微信环境。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580959388940-8a1c0ff3-5688-4d0b-af7b-fdcf5e05bc18.png#align=left&amp;display=inline&amp;height=180&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=360&amp;originWidth=828&amp;size=299978&amp;status=done&amp;style=none&amp;width=414\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"<p>tags: [js, wx]<br>categories: [js]<br>cover:<br>—<br></p>","more":"<br><br>通过对user-agent 参数包含的信息进行判断：<br><p></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> is_wechat = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    ua.match(<span class=\"regexp\">/MicroMessenger/i</span>) == <span class=\"string\">\"micromessenger\"</span> ||</span><br><span class=\"line\">    ua.match(<span class=\"regexp\">/_SQ_/i</span>) == <span class=\"string\">\"_sq_\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><br>问题：<br>在QQ内打开相关页面，user-agent参数如下其中包括<code>_sq_</code>，所以在QQ内会识别成微信环境。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1580959388940-8a1c0ff3-5688-4d0b-af7b-fdcf5e05bc18.png#align=left&amp;display=inline&amp;height=180&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=360&amp;originWidth=828&amp;size=299978&amp;status=done&amp;style=none&amp;width=414\" alt=\"image.png\"></p>"},{"title":"「wx」微信小程序web-view localStorage问题","urlname":"dlafbs","date":"2020-02-28T13:51:40.000Z","_content":"tags: [wx]\ncategories: [微信小程序]\ncover:\n---<br /><!-- more --><br />\n在小程序开始时，经常会使用web-view内嵌H5页面，以便减少多端开发成本，但是小程序与web-view的登录状态通信是一个需要处理的问题。<br />在我们开发过程中，小程序的用户登录凭证和m站的用户登录凭证并不互通，无法通用token，所以在小程序进入web-view时需要重新通过静默登录等方式进行web-view内的登录，并存储在本地，但是在小程序内退出账号或者删除本地微信内的小程序时web-view的localStorage并不会被清除，所以可能造成在登录另一个账户进入web-view时造成用户数据不正确的情况。<br />而且当两个不同的小程序通过web-view嵌入了同一个域名的h5页面，也会造成localStorage信息不匹配问题，因为同域名下localStorage是共通的。所以在处理web-view时需要特别注意缓存的问题，很容易造成数据凭证不匹配的问题。所以我需要在每次进入页面时对web-view的localStorage进行清除，清除特定用户数据缓存。<br />\n\n\n","source":"_posts/yuque/「wx」微信小程序web-view localStorage问题.md","raw":"\n---\n\ntitle: 「wx」微信小程序web-view localStorage问题\n\nurlname: dlafbs\n\ndate: 2020-02-28 21:51:40 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [wx]\ncategories: [微信小程序]\ncover:\n---<br /><!-- more --><br />\n在小程序开始时，经常会使用web-view内嵌H5页面，以便减少多端开发成本，但是小程序与web-view的登录状态通信是一个需要处理的问题。<br />在我们开发过程中，小程序的用户登录凭证和m站的用户登录凭证并不互通，无法通用token，所以在小程序进入web-view时需要重新通过静默登录等方式进行web-view内的登录，并存储在本地，但是在小程序内退出账号或者删除本地微信内的小程序时web-view的localStorage并不会被清除，所以可能造成在登录另一个账户进入web-view时造成用户数据不正确的情况。<br />而且当两个不同的小程序通过web-view嵌入了同一个域名的h5页面，也会造成localStorage信息不匹配问题，因为同域名下localStorage是共通的。所以在处理web-view时需要特别注意缓存的问题，很容易造成数据凭证不匹配的问题。所以我需要在每次进入页面时对web-view的localStorage进行清除，清除特定用户数据缓存。<br />\n\n\n","slug":"yuque/「wx」微信小程序web-view localStorage问题","published":1,"updated":"2020-04-22T02:25:07.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrqz0039e36ko0p7cdob","content":"<p>tags: [wx]<br>categories: [微信小程序]<br>cover:<br>—<br><a id=\"more\"></a><br><br>在小程序开始时，经常会使用web-view内嵌H5页面，以便减少多端开发成本，但是小程序与web-view的登录状态通信是一个需要处理的问题。<br>在我们开发过程中，小程序的用户登录凭证和m站的用户登录凭证并不互通，无法通用token，所以在小程序进入web-view时需要重新通过静默登录等方式进行web-view内的登录，并存储在本地，但是在小程序内退出账号或者删除本地微信内的小程序时web-view的localStorage并不会被清除，所以可能造成在登录另一个账户进入web-view时造成用户数据不正确的情况。<br>而且当两个不同的小程序通过web-view嵌入了同一个域名的h5页面，也会造成localStorage信息不匹配问题，因为同域名下localStorage是共通的。所以在处理web-view时需要特别注意缓存的问题，很容易造成数据凭证不匹配的问题。所以我需要在每次进入页面时对web-view的localStorage进行清除，清除特定用户数据缓存。<br></p>\n","site":{"data":{}},"excerpt":"<p>tags: [wx]<br>categories: [微信小程序]<br>cover:<br>—<br></p>","more":"<br><br>在小程序开始时，经常会使用web-view内嵌H5页面，以便减少多端开发成本，但是小程序与web-view的登录状态通信是一个需要处理的问题。<br>在我们开发过程中，小程序的用户登录凭证和m站的用户登录凭证并不互通，无法通用token，所以在小程序进入web-view时需要重新通过静默登录等方式进行web-view内的登录，并存储在本地，但是在小程序内退出账号或者删除本地微信内的小程序时web-view的localStorage并不会被清除，所以可能造成在登录另一个账户进入web-view时造成用户数据不正确的情况。<br>而且当两个不同的小程序通过web-view嵌入了同一个域名的h5页面，也会造成localStorage信息不匹配问题，因为同域名下localStorage是共通的。所以在处理web-view时需要特别注意缓存的问题，很容易造成数据凭证不匹配的问题。所以我需要在每次进入页面时对web-view的localStorage进行清除，清除特定用户数据缓存。<br><p></p>"},{"title":"「wx」微信小程序自定义下拉刷新","urlname":"abanuu","date":"2020-03-06T09:28:25.000Z","_content":"tags: [wx]\ncategories: [微信小程序]\ncover:\n---<br /><!-- more --><br />\n\n<a name=\"GjtWv\"></a>\n#### 需求：\n在小程序内存在列表等形式的页面内增加下拉刷新功能，提高用户体验感，加强界面操作与交互性；<br />\n\n<a name=\"gXpSi\"></a>\n#### 实现方法：\n1、小程序提供的下拉刷新（无法自定义刷新动画）\n\n- 在页面设置内开启下拉（单独页面设置）；<br />\n```json\n{\n  \"enablePullDownRefresh\": true,\n}\n```\n\n- 使用`onPullDownRefresh()`监听用户下拉操作，实现刷新操作；\n- 也可以通过`wx.startPullDownRefresh`和`wx.stopPullDownRefresh`触发和关闭页面下拉刷新；\n\n可能遇到的问题：<br />1）下拉时没有出现刷新的点点动画<br />可能是因为设置的页面背景色与点点动画一致导致无法看到动画，可以在页面配置中配置背景文字颜色：\n```json\n{\n  \"backgroundTextStyle\": \"dark\"\n}\n```\n\n<br />2、scroll-view内refresher-enabled属性开启自定义刷新<br />     基本库要求：2.10.1<br />\n\n\n| refresher-enabled | boolean | false | 否 | 开启自定义下拉刷新 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| refresher-threshold | number | 45 | 否 | 设置自定义下拉刷新阈值 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-default-style | string | \"black\" | 否 | 设置自定义下拉刷新默认样式，支持设置 `black/white/none`， none 表示不使用默认样式 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-background | string | \"#FFF\" | 否 | 设置自定义下拉刷新区域背景颜色 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-triggered | boolean | false | 否 | 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherpulling | eventhandle |  | 否 | 自定义下拉刷新控件被下拉 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherrefresh | eventhandle |  | 否 | 自定义下拉刷新被触发 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherrestore | eventhandle |  | 否 | 自定义下拉刷新被复位 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherabort | eventhandle |  | 否 | 自定义下拉刷新被中止 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n\n\n<br />官方文档：[scroll-view](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)<br />\n3、原始scroll-view自定义下拉实现（为兼容2.10.1一下的下拉刷新<br />通过监听手指移动距离控制需要下拉模块的下拉距离，主要事件bindtouchstart，bindtouchmove和bindtouchend，bindtouchmove记录手指开始下拉时的起始位置，bindtouchmove计算下拉距离，bindtouchend判断并实现刷新方法。<br />我的自定义下拉组件（Taro框架）<br />\n\n```jsx\nimport Taro, { Component, render } from \"@tarojs/taro\";\nimport { View, Image, ScrollView } from \"@tarojs/components\";\nimport { getGlobalData } from \"../../state/global\";\nimport util from \"../../utils\";\nimport \"./index.less\";\n\nconst rpx2px = util.rpx2px();\nexport default class Loading extends Component {\n  config = {\n    enablePullDownRefresh: false,\n    disableScroll: true\n  };\n  constructor() {\n    super(...arguments);\n    this.state = {\n      now_scroll_top: 0,\n      moveStartPosition: 0, //开始位置\n      moveDistance: 0, //移动距离\n      moveRefreshDistance: rpx2px(136), //达到刷新的阈值，没有达到不进行刷新并回弹\n      moveMaxDistance: rpx2px(220), //最大可滑动距离\n      isRefreshMaxDown: false, //是否达到了最大距离， 用来判断是否要震动提示\n      loading: false, //是否正在loading\n      loading_scale: 0,\n      // 2020.03.03 动态分成两个阶段，下拉时展示小鸭子浮动，放手后加载中鳄鱼\n      pull_moving: false,\n      back_top_num: \"\"\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // 父组件触发刷新结束/取消刷新\n    // console.log(nextProps, this.state.loading)\n    if (nextProps.refreshLoading != this.state.loading) {\n      if(nextProps.refreshLoading) {\n        this.setState({\n          loading: nextProps.refreshLoading\n        });\n      } else {\n        this.stopPullLoading();\n      }\n    }\n  }\n\n  render() {\n    let {\n      now_scroll_top,\n      moveDistance,\n      loading_scale,\n      loading,\n      pull_moving,\n      back_top_num\n    } = this.state;\n    let { autoHeight } = this.props;\n    let sys_info = getGlobalData(\"system_info\");\n    return (\n      <ScrollView\n        className={[\"view-component component-pull-scroll\", autoHeight ? \"scroll-auto\" : \"\"]}\n        id=\"pull-scroll-view\"\n        style={{ height: autoHeight ? 'auto' : (sys_info.screenHeight - 80 + \"px\") }}\n        scrollY={true}\n        scrollTop={back_top_num}\n        data-nowScrollTop={now_scroll_top}\n        onTouchStart={this.pullTouchStart.bind(this)}\n        onTouchMove={this.pullTouchMove.bind(this)}\n        onTouchEnd={this.pullTouchEnd.bind(this)}\n        onScroll={this.pullScroll.bind(this)}\n        scrollWithAnimation\n      >\n        <View\n          className=\"pull-view-container\"\n          style={{ transform: \"translateY(\" + moveDistance + \"px)\" }}\n        >\n          <View\n            className=\"pull-refresh-box\"\n            style={{\n              transform: \"scale(\" + loading_scale + \") translateY(-100%)\"\n            }}\n          >\n            {(pull_moving || loading) && (\n              <Image\n                className=\"loading-img\"\n                src=\"http://assets-cdn.lanqb.com/manual-box/mp/mp-pullLoading-duck.gif\"\n              ></Image>\n            )}\n          </View>\n          <slot></slot>\n        </View>\n      </ScrollView>\n    );\n  }\n\n  /**\n   * 触摸事件开始\n   * @param e\n   */\n  pullTouchStart(e) {\n    let {\n      moveDistance,\n      moveStartPosition,\n      loading,\n      now_scroll_top\n    } = this.state;\n    if (loading || now_scroll_top >= 30) return;\n    moveDistance = 0; //重置移动距离\n    moveStartPosition = e.touches[0].clientY; //记录开始移动的位置\n    this.setState({\n      moveDistance,\n      moveStartPosition\n    });\n  }\n  /**\n   * 触摸事件移动\n   * @param e\n   */\n  pullTouchMove(e) {\n    const _this = this;\n    let {\n      loading,\n      moveDistance,\n      moveStartPosition,\n      moveMaxDistance,\n      isRefreshMaxDown,\n      loading_scale,\n      moveRefreshDistance,\n      pull_moving,\n      now_scroll_top\n    } = this.state;\n    //如果正在loading，则不进行接下来的行为\n    if (loading || now_scroll_top >= 30) return; \n    //当前scroll-view所在的滚动位置\n    let nowScrollTop = e.currentTarget.dataset.nowscrolltop;\n\n    //开始计算移动距离\n    moveDistance = e.touches[0].clientY - moveStartPosition;\n\n    //如果是往下滑动，则阻止接下来的行为\n    if (moveDistance <= 0) {\n      loading_scale = 0;\n      // _this.stopPullLoading();\n    } else {\n      // if (nowScrollTop !== 0) {\n      //   // 如果滚动高度 !== 0 则不进行任何操作\n      // } else {\n        if (moveDistance > moveMaxDistance) {\n          //达到阈值\n          // 显示刷新动画\n          pull_moving = true;\n          loading_scale = 1;\n          loading = false;\n          moveDistance = moveMaxDistance;\n          //触发一次震动\n          if (!isRefreshMaxDown) {\n            isRefreshMaxDown = true;\n            Taro.vibrateShort();\n          }\n        } else if (moveDistance < moveRefreshDistance) {\n          loading_scale = 0;\n          loading = false;\n          pull_moving = false;\n        } else {\n          loading = false;\n          pull_moving = true;\n          loading_scale =\n            moveDistance / rpx2px(136) > 1 ? 1 : moveDistance / rpx2px(136);\n        }\n      // }\n    }\n    this.setState({\n      moveDistance,\n      isRefreshMaxDown,\n      loading_scale,\n      pull_moving\n    });\n  }\n  /**\n   * 结束触摸事件\n   */\n  pullTouchEnd(e) {\n    const _this = this;\n    let {\n      loading,\n      moveDistance,\n      moveRefreshDistance,\n      loading_scale,\n      moveMaxDistance,\n      pull_moving,\n      now_scroll_top\n    } = this.state;\n    if (loading || now_scroll_top >= 30) return;\n\n    //当前scroll-view所在的滚动位置\n    let nowScrollTop = e.currentTarget.dataset.nowscrolltop;\n\n    //如果是往下滑动，则阻止接下来的行为\n    if (moveDistance <= 0) {\n      // return false\n      loading_scale = 0;\n      moveDistance = 0;\n      loading = false;\n      pull_moving = false;\n    } else {\n        if (moveDistance < moveRefreshDistance) {\n          // 移动距离小于刷新阈值，不进行刷新\n          loading_scale = 0;\n          moveDistance = 0;\n          loading = false;\n          pull_moving = false;\n          console.log(\"需要回弹\");\n        } else {\n          // 开始刷新\n          loading = true;\n          pull_moving = false;\n          _this.pullRefresh();\n          if (moveDistance >= moveMaxDistance) {\n            moveDistance = moveRefreshDistance;\n            loading_scale =\n              moveDistance / rpx2px(136) > 1 ? 1 : moveDistance / rpx2px(136);\n          }\n        }\n      // }\n    }\n    this.setState({\n      loading,\n      //重置\n      moveStartPosition: 0,\n      isRefreshMaxDown: false,\n      loading_scale,\n      moveDistance,\n      pull_moving\n    });\n  }\n  pullRefresh() {\n    const _this = this;\n    this.props.onPullRefresh();\n  }\n  pullScroll(event) {\n    let { scrollTop } = event.detail;\n    this.setState({\n      now_scroll_top: scrollTop,\n      back_top_num: \"\"\n    });\n  }\n  stopPullLoading() {\n    const _this = this;\n    setTimeout(function() {\n      _this.setState({\n        moveDistance: 0,\n        moveStartPosition: 0,\n        isRefreshMaxDown: false,\n        pull_moving: false,\n        back_top_num: 0,\n        now_scroll_top: 0\n      });\n      setTimeout(function() {\n        _this.setState({          \n          loading_scale: 0,\n          loading: false,\n        })\n      }, 1500)\n    }, 2000)\n  }\n}\n\n```\n\n\n<a name=\"fEutw\"></a>\n#### 部分问题：\n1、与ios上橡皮筋效果冲突导致下拉无法触发自定义刷新<br />页面配置`disabledScroll`，禁止页面滚动，同时页面内的列表滚动需要自己再优化调整；<br />\n2、scroll-view的scroll问题<br />需要设定固定高度然后纵向滚动。[我都忘了是啥问题了……<br />\n3、页面下拉刷新结束后再滑动列表出现闪屏<br />在禁止页面橡皮筋效果后，如果页面内存在需滚动区域使用scroll-view效果比view更加流畅；<br />不设定固定高度不会发生闪屏但是页面滚动非常不流畅；<br />\n4、使用官方提供的scroll-view自定义的动画时，当scroll-view内容不足充满一屏时下拉出现问题<br />将scroll-view设置固定高度后，将其子元素的高度设置多一像素达到隐形撑满的效果。<br />\n\n```javascript\n<ScrollView\n\tclassName={[\"view-component component-pull-scroll\", autoHeight ? \"scroll-auto\" : \"\"]}\n\tid=\"pull-scroll-view\"\n\tstyle={{ height: (sys_info.screenHeight + \"px\") }}\n>\n\t<View\n\t\tclassName=\"pull-view-container\"\n\t\tstyle={{ height: (sys_info.screenHeight + 1 + \"px\") }}\n\t>...</View>\n</ScrollView>\n```\n\n<br />5、scroll-view内fixed元素问题<br />ios内scroll-view内fixed元素层级会出现问题，可能出现被遮挡的问题。<br />\n6、当页面内局部需要下拉刷新时可能导致内外两个滚动条问题<br />一个是页面滚动条一个是scroll-view滚动条，由于操作的时候触发的是scroll-view部分的滚动导致页面滚动无法进行从而影响页面其他操作。<br />Q5和Q6可以合并成一个问题，当页面需要一个吸顶操作时，即滑动距离超过阈值时导航条吸顶的功能，若scroll-view将整个页面包含就会出现Q5的问题，可能导致在ios内吸顶的导航栏无法显示，若scroll-view只包含需要刷新的部分则会出现Q6的两个滚动条的问题。<br />1）在页面未触发吸顶时禁止scroll-view模块下拉，触发后放开滚动，同时会导致无法下拉。<br />2）页面滚动触发，scroll-view模块可下拉，但是滚动区域无法滚动，且下拉动画只显示一次。\n\n","source":"_posts/yuque/「wx」微信小程序自定义下拉刷新.md","raw":"\n---\n\ntitle: 「wx」微信小程序自定义下拉刷新\n\nurlname: abanuu\n\ndate: 2020-03-06 17:28:25 +0800\n\ntags: []\n\ncategories: []\n\n---\ntags: [wx]\ncategories: [微信小程序]\ncover:\n---<br /><!-- more --><br />\n\n<a name=\"GjtWv\"></a>\n#### 需求：\n在小程序内存在列表等形式的页面内增加下拉刷新功能，提高用户体验感，加强界面操作与交互性；<br />\n\n<a name=\"gXpSi\"></a>\n#### 实现方法：\n1、小程序提供的下拉刷新（无法自定义刷新动画）\n\n- 在页面设置内开启下拉（单独页面设置）；<br />\n```json\n{\n  \"enablePullDownRefresh\": true,\n}\n```\n\n- 使用`onPullDownRefresh()`监听用户下拉操作，实现刷新操作；\n- 也可以通过`wx.startPullDownRefresh`和`wx.stopPullDownRefresh`触发和关闭页面下拉刷新；\n\n可能遇到的问题：<br />1）下拉时没有出现刷新的点点动画<br />可能是因为设置的页面背景色与点点动画一致导致无法看到动画，可以在页面配置中配置背景文字颜色：\n```json\n{\n  \"backgroundTextStyle\": \"dark\"\n}\n```\n\n<br />2、scroll-view内refresher-enabled属性开启自定义刷新<br />     基本库要求：2.10.1<br />\n\n\n| refresher-enabled | boolean | false | 否 | 开启自定义下拉刷新 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| refresher-threshold | number | 45 | 否 | 设置自定义下拉刷新阈值 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-default-style | string | \"black\" | 否 | 设置自定义下拉刷新默认样式，支持设置 `black/white/none`， none 表示不使用默认样式 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-background | string | \"#FFF\" | 否 | 设置自定义下拉刷新区域背景颜色 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| refresher-triggered | boolean | false | 否 | 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherpulling | eventhandle |  | 否 | 自定义下拉刷新控件被下拉 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherrefresh | eventhandle |  | 否 | 自定义下拉刷新被触发 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherrestore | eventhandle |  | 否 | 自定义下拉刷新被复位 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n| bindrefresherabort | eventhandle |  | 否 | 自定义下拉刷新被中止 | [2.10.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n\n\n<br />官方文档：[scroll-view](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)<br />\n3、原始scroll-view自定义下拉实现（为兼容2.10.1一下的下拉刷新<br />通过监听手指移动距离控制需要下拉模块的下拉距离，主要事件bindtouchstart，bindtouchmove和bindtouchend，bindtouchmove记录手指开始下拉时的起始位置，bindtouchmove计算下拉距离，bindtouchend判断并实现刷新方法。<br />我的自定义下拉组件（Taro框架）<br />\n\n```jsx\nimport Taro, { Component, render } from \"@tarojs/taro\";\nimport { View, Image, ScrollView } from \"@tarojs/components\";\nimport { getGlobalData } from \"../../state/global\";\nimport util from \"../../utils\";\nimport \"./index.less\";\n\nconst rpx2px = util.rpx2px();\nexport default class Loading extends Component {\n  config = {\n    enablePullDownRefresh: false,\n    disableScroll: true\n  };\n  constructor() {\n    super(...arguments);\n    this.state = {\n      now_scroll_top: 0,\n      moveStartPosition: 0, //开始位置\n      moveDistance: 0, //移动距离\n      moveRefreshDistance: rpx2px(136), //达到刷新的阈值，没有达到不进行刷新并回弹\n      moveMaxDistance: rpx2px(220), //最大可滑动距离\n      isRefreshMaxDown: false, //是否达到了最大距离， 用来判断是否要震动提示\n      loading: false, //是否正在loading\n      loading_scale: 0,\n      // 2020.03.03 动态分成两个阶段，下拉时展示小鸭子浮动，放手后加载中鳄鱼\n      pull_moving: false,\n      back_top_num: \"\"\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // 父组件触发刷新结束/取消刷新\n    // console.log(nextProps, this.state.loading)\n    if (nextProps.refreshLoading != this.state.loading) {\n      if(nextProps.refreshLoading) {\n        this.setState({\n          loading: nextProps.refreshLoading\n        });\n      } else {\n        this.stopPullLoading();\n      }\n    }\n  }\n\n  render() {\n    let {\n      now_scroll_top,\n      moveDistance,\n      loading_scale,\n      loading,\n      pull_moving,\n      back_top_num\n    } = this.state;\n    let { autoHeight } = this.props;\n    let sys_info = getGlobalData(\"system_info\");\n    return (\n      <ScrollView\n        className={[\"view-component component-pull-scroll\", autoHeight ? \"scroll-auto\" : \"\"]}\n        id=\"pull-scroll-view\"\n        style={{ height: autoHeight ? 'auto' : (sys_info.screenHeight - 80 + \"px\") }}\n        scrollY={true}\n        scrollTop={back_top_num}\n        data-nowScrollTop={now_scroll_top}\n        onTouchStart={this.pullTouchStart.bind(this)}\n        onTouchMove={this.pullTouchMove.bind(this)}\n        onTouchEnd={this.pullTouchEnd.bind(this)}\n        onScroll={this.pullScroll.bind(this)}\n        scrollWithAnimation\n      >\n        <View\n          className=\"pull-view-container\"\n          style={{ transform: \"translateY(\" + moveDistance + \"px)\" }}\n        >\n          <View\n            className=\"pull-refresh-box\"\n            style={{\n              transform: \"scale(\" + loading_scale + \") translateY(-100%)\"\n            }}\n          >\n            {(pull_moving || loading) && (\n              <Image\n                className=\"loading-img\"\n                src=\"http://assets-cdn.lanqb.com/manual-box/mp/mp-pullLoading-duck.gif\"\n              ></Image>\n            )}\n          </View>\n          <slot></slot>\n        </View>\n      </ScrollView>\n    );\n  }\n\n  /**\n   * 触摸事件开始\n   * @param e\n   */\n  pullTouchStart(e) {\n    let {\n      moveDistance,\n      moveStartPosition,\n      loading,\n      now_scroll_top\n    } = this.state;\n    if (loading || now_scroll_top >= 30) return;\n    moveDistance = 0; //重置移动距离\n    moveStartPosition = e.touches[0].clientY; //记录开始移动的位置\n    this.setState({\n      moveDistance,\n      moveStartPosition\n    });\n  }\n  /**\n   * 触摸事件移动\n   * @param e\n   */\n  pullTouchMove(e) {\n    const _this = this;\n    let {\n      loading,\n      moveDistance,\n      moveStartPosition,\n      moveMaxDistance,\n      isRefreshMaxDown,\n      loading_scale,\n      moveRefreshDistance,\n      pull_moving,\n      now_scroll_top\n    } = this.state;\n    //如果正在loading，则不进行接下来的行为\n    if (loading || now_scroll_top >= 30) return; \n    //当前scroll-view所在的滚动位置\n    let nowScrollTop = e.currentTarget.dataset.nowscrolltop;\n\n    //开始计算移动距离\n    moveDistance = e.touches[0].clientY - moveStartPosition;\n\n    //如果是往下滑动，则阻止接下来的行为\n    if (moveDistance <= 0) {\n      loading_scale = 0;\n      // _this.stopPullLoading();\n    } else {\n      // if (nowScrollTop !== 0) {\n      //   // 如果滚动高度 !== 0 则不进行任何操作\n      // } else {\n        if (moveDistance > moveMaxDistance) {\n          //达到阈值\n          // 显示刷新动画\n          pull_moving = true;\n          loading_scale = 1;\n          loading = false;\n          moveDistance = moveMaxDistance;\n          //触发一次震动\n          if (!isRefreshMaxDown) {\n            isRefreshMaxDown = true;\n            Taro.vibrateShort();\n          }\n        } else if (moveDistance < moveRefreshDistance) {\n          loading_scale = 0;\n          loading = false;\n          pull_moving = false;\n        } else {\n          loading = false;\n          pull_moving = true;\n          loading_scale =\n            moveDistance / rpx2px(136) > 1 ? 1 : moveDistance / rpx2px(136);\n        }\n      // }\n    }\n    this.setState({\n      moveDistance,\n      isRefreshMaxDown,\n      loading_scale,\n      pull_moving\n    });\n  }\n  /**\n   * 结束触摸事件\n   */\n  pullTouchEnd(e) {\n    const _this = this;\n    let {\n      loading,\n      moveDistance,\n      moveRefreshDistance,\n      loading_scale,\n      moveMaxDistance,\n      pull_moving,\n      now_scroll_top\n    } = this.state;\n    if (loading || now_scroll_top >= 30) return;\n\n    //当前scroll-view所在的滚动位置\n    let nowScrollTop = e.currentTarget.dataset.nowscrolltop;\n\n    //如果是往下滑动，则阻止接下来的行为\n    if (moveDistance <= 0) {\n      // return false\n      loading_scale = 0;\n      moveDistance = 0;\n      loading = false;\n      pull_moving = false;\n    } else {\n        if (moveDistance < moveRefreshDistance) {\n          // 移动距离小于刷新阈值，不进行刷新\n          loading_scale = 0;\n          moveDistance = 0;\n          loading = false;\n          pull_moving = false;\n          console.log(\"需要回弹\");\n        } else {\n          // 开始刷新\n          loading = true;\n          pull_moving = false;\n          _this.pullRefresh();\n          if (moveDistance >= moveMaxDistance) {\n            moveDistance = moveRefreshDistance;\n            loading_scale =\n              moveDistance / rpx2px(136) > 1 ? 1 : moveDistance / rpx2px(136);\n          }\n        }\n      // }\n    }\n    this.setState({\n      loading,\n      //重置\n      moveStartPosition: 0,\n      isRefreshMaxDown: false,\n      loading_scale,\n      moveDistance,\n      pull_moving\n    });\n  }\n  pullRefresh() {\n    const _this = this;\n    this.props.onPullRefresh();\n  }\n  pullScroll(event) {\n    let { scrollTop } = event.detail;\n    this.setState({\n      now_scroll_top: scrollTop,\n      back_top_num: \"\"\n    });\n  }\n  stopPullLoading() {\n    const _this = this;\n    setTimeout(function() {\n      _this.setState({\n        moveDistance: 0,\n        moveStartPosition: 0,\n        isRefreshMaxDown: false,\n        pull_moving: false,\n        back_top_num: 0,\n        now_scroll_top: 0\n      });\n      setTimeout(function() {\n        _this.setState({          \n          loading_scale: 0,\n          loading: false,\n        })\n      }, 1500)\n    }, 2000)\n  }\n}\n\n```\n\n\n<a name=\"fEutw\"></a>\n#### 部分问题：\n1、与ios上橡皮筋效果冲突导致下拉无法触发自定义刷新<br />页面配置`disabledScroll`，禁止页面滚动，同时页面内的列表滚动需要自己再优化调整；<br />\n2、scroll-view的scroll问题<br />需要设定固定高度然后纵向滚动。[我都忘了是啥问题了……<br />\n3、页面下拉刷新结束后再滑动列表出现闪屏<br />在禁止页面橡皮筋效果后，如果页面内存在需滚动区域使用scroll-view效果比view更加流畅；<br />不设定固定高度不会发生闪屏但是页面滚动非常不流畅；<br />\n4、使用官方提供的scroll-view自定义的动画时，当scroll-view内容不足充满一屏时下拉出现问题<br />将scroll-view设置固定高度后，将其子元素的高度设置多一像素达到隐形撑满的效果。<br />\n\n```javascript\n<ScrollView\n\tclassName={[\"view-component component-pull-scroll\", autoHeight ? \"scroll-auto\" : \"\"]}\n\tid=\"pull-scroll-view\"\n\tstyle={{ height: (sys_info.screenHeight + \"px\") }}\n>\n\t<View\n\t\tclassName=\"pull-view-container\"\n\t\tstyle={{ height: (sys_info.screenHeight + 1 + \"px\") }}\n\t>...</View>\n</ScrollView>\n```\n\n<br />5、scroll-view内fixed元素问题<br />ios内scroll-view内fixed元素层级会出现问题，可能出现被遮挡的问题。<br />\n6、当页面内局部需要下拉刷新时可能导致内外两个滚动条问题<br />一个是页面滚动条一个是scroll-view滚动条，由于操作的时候触发的是scroll-view部分的滚动导致页面滚动无法进行从而影响页面其他操作。<br />Q5和Q6可以合并成一个问题，当页面需要一个吸顶操作时，即滑动距离超过阈值时导航条吸顶的功能，若scroll-view将整个页面包含就会出现Q5的问题，可能导致在ios内吸顶的导航栏无法显示，若scroll-view只包含需要刷新的部分则会出现Q6的两个滚动条的问题。<br />1）在页面未触发吸顶时禁止scroll-view模块下拉，触发后放开滚动，同时会导致无法下拉。<br />2）页面滚动触发，scroll-view模块可下拉，但是滚动区域无法滚动，且下拉动画只显示一次。\n\n","slug":"yuque/「wx」微信小程序自定义下拉刷新","published":1,"updated":"2020-04-22T02:25:07.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrr0003ae36kuh35fshw","content":"<p>tags: [wx]<br>categories: [微信小程序]<br>cover:<br>—<br><a id=\"more\"></a><br></p>\n<p><a name=\"GjtWv\"></a></p>\n<h4 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h4><p>在小程序内存在列表等形式的页面内增加下拉刷新功能，提高用户体验感，加强界面操作与交互性；<br></p>\n<p><a name=\"gXpSi\"></a></p>\n<h4 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h4><p>1、小程序提供的下拉刷新（无法自定义刷新动画）</p>\n<ul>\n<li><p>在页面设置内开启下拉（单独页面设置）；<br></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"enablePullDownRefresh\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>onPullDownRefresh()</code>监听用户下拉操作，实现刷新操作；</p>\n</li>\n<li>也可以通过<code>wx.startPullDownRefresh</code>和<code>wx.stopPullDownRefresh</code>触发和关闭页面下拉刷新；</li>\n</ul>\n<p>可能遇到的问题：<br>1）下拉时没有出现刷新的点点动画<br>可能是因为设置的页面背景色与点点动画一致导致无法看到动画，可以在页面配置中配置背景文字颜色：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"backgroundTextStyle\"</span>: <span class=\"string\">\"dark\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br>2、scroll-view内refresher-enabled属性开启自定义刷新<br>     基本库要求：2.10.1<br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">refresher-enabled</th>\n<th style=\"text-align:left\">boolean</th>\n<th style=\"text-align:left\">false</th>\n<th style=\"text-align:left\">否</th>\n<th style=\"text-align:left\">开启自定义下拉刷新</th>\n<th style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">refresher-threshold</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">45</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新阈值</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-default-style</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">“black”</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新默认样式，支持设置 <code>black/white/none</code>， none 表示不使用默认样式</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-background</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">“#FFF”</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新区域背景颜色</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-triggered</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherpulling</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新控件被下拉</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherrefresh</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被触发</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherrestore</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被复位</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherabort</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被中止</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n</tbody>\n</table>\n<p><br>官方文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">scroll-view</a><br><br>3、原始scroll-view自定义下拉实现（为兼容2.10.1一下的下拉刷新<br>通过监听手指移动距离控制需要下拉模块的下拉距离，主要事件bindtouchstart，bindtouchmove和bindtouchend，bindtouchmove记录手指开始下拉时的起始位置，bindtouchmove计算下拉距离，bindtouchend判断并实现刷新方法。<br>我的自定义下拉组件（Taro框架）<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Taro, &#123; Component, render &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/taro\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; View, Image, ScrollView &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/components\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGlobalData &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../state/global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">\"../../utils\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./index.less\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rpx2px = util.rpx2px();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loading</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  config = &#123;</span><br><span class=\"line\">    enablePullDownRefresh: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    disableScroll: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(...arguments);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      now_scroll_top: <span class=\"number\">0</span>,</span><br><span class=\"line\">      moveStartPosition: <span class=\"number\">0</span>, <span class=\"comment\">//开始位置</span></span><br><span class=\"line\">      moveDistance: <span class=\"number\">0</span>, <span class=\"comment\">//移动距离</span></span><br><span class=\"line\">      moveRefreshDistance: rpx2px(<span class=\"number\">136</span>), <span class=\"comment\">//达到刷新的阈值，没有达到不进行刷新并回弹</span></span><br><span class=\"line\">      moveMaxDistance: rpx2px(<span class=\"number\">220</span>), <span class=\"comment\">//最大可滑动距离</span></span><br><span class=\"line\">      isRefreshMaxDown: <span class=\"literal\">false</span>, <span class=\"comment\">//是否达到了最大距离， 用来判断是否要震动提示</span></span><br><span class=\"line\">      loading: <span class=\"literal\">false</span>, <span class=\"comment\">//是否正在loading</span></span><br><span class=\"line\">      loading_scale: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 2020.03.03 动态分成两个阶段，下拉时展示小鸭子浮动，放手后加载中鳄鱼</span></span><br><span class=\"line\">      pull_moving: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      back_top_num: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 父组件触发刷新结束/取消刷新</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(nextProps, this.state.loading)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.refreshLoading != <span class=\"keyword\">this</span>.state.loading) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nextProps.refreshLoading) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          loading: nextProps.refreshLoading</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stopPullLoading();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      now_scroll_top,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      back_top_num</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; autoHeight &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sys_info = getGlobalData(<span class=\"string\">\"system_info\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ScrollView</span><br><span class=\"line\">        className=&#123;[<span class=\"string\">\"view-component component-pull-scroll\"</span>, autoHeight ? <span class=\"string\">\"scroll-auto\"</span> : <span class=\"string\">\"\"</span>]&#125;</span><br><span class=\"line\">        id=<span class=\"string\">\"pull-scroll-view\"</span></span><br><span class=\"line\">        style=&#123;&#123; <span class=\"attr\">height</span>: autoHeight ? <span class=\"string\">'auto'</span> : (sys_info.screenHeight - <span class=\"number\">80</span> + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">        scrollY=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        scrollTop=&#123;back_top_num&#125;</span><br><span class=\"line\">        data-nowScrollTop=&#123;now_scroll_top&#125;</span><br><span class=\"line\">        onTouchStart=&#123;<span class=\"keyword\">this</span>.pullTouchStart.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onTouchMove=&#123;<span class=\"keyword\">this</span>.pullTouchMove.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onTouchEnd=&#123;<span class=\"keyword\">this</span>.pullTouchEnd.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onScroll=&#123;<span class=\"keyword\">this</span>.pullScroll.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        scrollWithAnimation</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">          className=<span class=\"string\">\"pull-view-container\"</span></span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">transform</span>: <span class=\"string\">\"translateY(\"</span> + moveDistance + <span class=\"string\">\"px)\"</span> &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;View</span><br><span class=\"line\">            className=<span class=\"string\">\"pull-refresh-box\"</span></span><br><span class=\"line\">            style=&#123;&#123;</span><br><span class=\"line\">              transform: <span class=\"string\">\"scale(\"</span> + loading_scale + <span class=\"string\">\") translateY(-100%)\"</span></span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &#123;(pull_moving || loading) &amp;&amp; (</span><br><span class=\"line\">              &lt;Image</span><br><span class=\"line\">                className=<span class=\"string\">\"loading-img\"</span></span><br><span class=\"line\">                src=<span class=\"string\">\"http://assets-cdn.lanqb.com/manual-box/mp/mp-pullLoading-duck.gif\"</span></span><br><span class=\"line\">              &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></span></span><br><span class=\"line\">            )&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触摸事件开始</span></span><br><span class=\"line\"><span class=\"comment\">   * @param e</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchStart(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition,</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    moveDistance = <span class=\"number\">0</span>; <span class=\"comment\">//重置移动距离</span></span><br><span class=\"line\">    moveStartPosition = e.touches[<span class=\"number\">0</span>].clientY; <span class=\"comment\">//记录开始移动的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触摸事件移动</span></span><br><span class=\"line\"><span class=\"comment\">   * @param e</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchMove(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition,</span><br><span class=\"line\">      moveMaxDistance,</span><br><span class=\"line\">      isRefreshMaxDown,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveRefreshDistance,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"comment\">//如果正在loading，则不进行接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"comment\">//当前scroll-view所在的滚动位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowScrollTop = e.currentTarget.dataset.nowscrolltop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始计算移动距离</span></span><br><span class=\"line\">    moveDistance = e.touches[<span class=\"number\">0</span>].clientY - moveStartPosition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是往下滑动，则阻止接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (moveDistance &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">// _this.stopPullLoading();</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if (nowScrollTop !== 0) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // 如果滚动高度 !== 0 则不进行任何操作</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (moveDistance &gt; moveMaxDistance) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//达到阈值</span></span><br><span class=\"line\">          <span class=\"comment\">// 显示刷新动画</span></span><br><span class=\"line\">          pull_moving = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          loading_scale = <span class=\"number\">1</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          moveDistance = moveMaxDistance;</span><br><span class=\"line\">          <span class=\"comment\">//触发一次震动</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isRefreshMaxDown) &#123;</span><br><span class=\"line\">            isRefreshMaxDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Taro.vibrateShort();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moveDistance &lt; moveRefreshDistance) &#123;</span><br><span class=\"line\">          loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          loading_scale =</span><br><span class=\"line\">            moveDistance / rpx2px(<span class=\"number\">136</span>) &gt; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : moveDistance / rpx2px(<span class=\"number\">136</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      isRefreshMaxDown,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      pull_moving</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 结束触摸事件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchEnd(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveRefreshDistance,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveMaxDistance,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前scroll-view所在的滚动位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowScrollTop = e.currentTarget.dataset.nowscrolltop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是往下滑动，则阻止接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (moveDistance &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// return false</span></span><br><span class=\"line\">      loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">      moveDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">      loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (moveDistance &lt; moveRefreshDistance) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 移动距离小于刷新阈值，不进行刷新</span></span><br><span class=\"line\">          loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">          moveDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"需要回弹\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 开始刷新</span></span><br><span class=\"line\">          loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          _this.pullRefresh();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (moveDistance &gt;= moveMaxDistance) &#123;</span><br><span class=\"line\">            moveDistance = moveRefreshDistance;</span><br><span class=\"line\">            loading_scale =</span><br><span class=\"line\">              moveDistance / rpx2px(<span class=\"number\">136</span>) &gt; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : moveDistance / rpx2px(<span class=\"number\">136</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      <span class=\"comment\">//重置</span></span><br><span class=\"line\">      moveStartPosition: <span class=\"number\">0</span>,</span><br><span class=\"line\">      isRefreshMaxDown: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      pull_moving</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pullRefresh() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onPullRefresh();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pullScroll(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; scrollTop &#125; = event.detail;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      now_scroll_top: scrollTop,</span><br><span class=\"line\">      back_top_num: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stopPullLoading() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _this.setState(&#123;</span><br><span class=\"line\">        moveDistance: <span class=\"number\">0</span>,</span><br><span class=\"line\">        moveStartPosition: <span class=\"number\">0</span>,</span><br><span class=\"line\">        isRefreshMaxDown: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        pull_moving: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        back_top_num: <span class=\"number\">0</span>,</span><br><span class=\"line\">        now_scroll_top: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.setState(&#123;          </span><br><span class=\"line\">          loading_scale: <span class=\"number\">0</span>,</span><br><span class=\"line\">          loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1500</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"fEutw\"></a></p>\n<h4 id=\"部分问题：\"><a href=\"#部分问题：\" class=\"headerlink\" title=\"部分问题：\"></a>部分问题：</h4><p>1、与ios上橡皮筋效果冲突导致下拉无法触发自定义刷新<br>页面配置<code>disabledScroll</code>，禁止页面滚动，同时页面内的列表滚动需要自己再优化调整；<br><br>2、scroll-view的scroll问题<br>需要设定固定高度然后纵向滚动。[我都忘了是啥问题了……<br><br>3、页面下拉刷新结束后再滑动列表出现闪屏<br>在禁止页面橡皮筋效果后，如果页面内存在需滚动区域使用scroll-view效果比view更加流畅；<br>不设定固定高度不会发生闪屏但是页面滚动非常不流畅；<br><br>4、使用官方提供的scroll-view自定义的动画时，当scroll-view内容不足充满一屏时下拉出现问题<br>将scroll-view设置固定高度后，将其子元素的高度设置多一像素达到隐形撑满的效果。<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ScrollView</span><br><span class=\"line\">\tclassName=&#123;[<span class=\"string\">\"view-component component-pull-scroll\"</span>, autoHeight ? <span class=\"string\">\"scroll-auto\"</span> : <span class=\"string\">\"\"</span>]&#125;</span><br><span class=\"line\">\tid=<span class=\"string\">\"pull-scroll-view\"</span></span><br><span class=\"line\">\tstyle=&#123;&#123; <span class=\"attr\">height</span>: (sys_info.screenHeight + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">\t&lt;View</span><br><span class=\"line\">\t\tclassName=<span class=\"string\">\"pull-view-container\"</span></span><br><span class=\"line\">\t\tstyle=&#123;&#123; <span class=\"attr\">height</span>: (sys_info.screenHeight + <span class=\"number\">1</span> + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">\t&gt;...&lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>ScrollView&gt;</span><br></pre></td></tr></table></figure>\n<p><br>5、scroll-view内fixed元素问题<br>ios内scroll-view内fixed元素层级会出现问题，可能出现被遮挡的问题。<br><br>6、当页面内局部需要下拉刷新时可能导致内外两个滚动条问题<br>一个是页面滚动条一个是scroll-view滚动条，由于操作的时候触发的是scroll-view部分的滚动导致页面滚动无法进行从而影响页面其他操作。<br>Q5和Q6可以合并成一个问题，当页面需要一个吸顶操作时，即滑动距离超过阈值时导航条吸顶的功能，若scroll-view将整个页面包含就会出现Q5的问题，可能导致在ios内吸顶的导航栏无法显示，若scroll-view只包含需要刷新的部分则会出现Q6的两个滚动条的问题。<br>1）在页面未触发吸顶时禁止scroll-view模块下拉，触发后放开滚动，同时会导致无法下拉。<br>2）页面滚动触发，scroll-view模块可下拉，但是滚动区域无法滚动，且下拉动画只显示一次。</p>\n","site":{"data":{}},"excerpt":"<p>tags: [wx]<br>categories: [微信小程序]<br>cover:<br>—<br></p>","more":"<br><p></p>\n<p><a name=\"GjtWv\"></a></p>\n<h4 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h4><p>在小程序内存在列表等形式的页面内增加下拉刷新功能，提高用户体验感，加强界面操作与交互性；<br></p>\n<p><a name=\"gXpSi\"></a></p>\n<h4 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h4><p>1、小程序提供的下拉刷新（无法自定义刷新动画）</p>\n<ul>\n<li><p>在页面设置内开启下拉（单独页面设置）；<br></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"enablePullDownRefresh\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>onPullDownRefresh()</code>监听用户下拉操作，实现刷新操作；</p>\n</li>\n<li>也可以通过<code>wx.startPullDownRefresh</code>和<code>wx.stopPullDownRefresh</code>触发和关闭页面下拉刷新；</li>\n</ul>\n<p>可能遇到的问题：<br>1）下拉时没有出现刷新的点点动画<br>可能是因为设置的页面背景色与点点动画一致导致无法看到动画，可以在页面配置中配置背景文字颜色：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"backgroundTextStyle\"</span>: <span class=\"string\">\"dark\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br>2、scroll-view内refresher-enabled属性开启自定义刷新<br>     基本库要求：2.10.1<br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">refresher-enabled</th>\n<th style=\"text-align:left\">boolean</th>\n<th style=\"text-align:left\">false</th>\n<th style=\"text-align:left\">否</th>\n<th style=\"text-align:left\">开启自定义下拉刷新</th>\n<th style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">refresher-threshold</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">45</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新阈值</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-default-style</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">“black”</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新默认样式，支持设置 <code>black/white/none</code>， none 表示不使用默认样式</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-background</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">“#FFF”</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置自定义下拉刷新区域背景颜色</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresher-triggered</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherpulling</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新控件被下拉</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherrefresh</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被触发</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherrestore</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被复位</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bindrefresherabort</td>\n<td style=\"text-align:left\">eventhandle</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">自定义下拉刷新被中止</td>\n<td style=\"text-align:left\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">2.10.1</a></td>\n</tr>\n</tbody>\n</table>\n<p><br>官方文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">scroll-view</a><br><br>3、原始scroll-view自定义下拉实现（为兼容2.10.1一下的下拉刷新<br>通过监听手指移动距离控制需要下拉模块的下拉距离，主要事件bindtouchstart，bindtouchmove和bindtouchend，bindtouchmove记录手指开始下拉时的起始位置，bindtouchmove计算下拉距离，bindtouchend判断并实现刷新方法。<br>我的自定义下拉组件（Taro框架）<br></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Taro, &#123; Component, render &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/taro\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; View, Image, ScrollView &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@tarojs/components\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGlobalData &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../state/global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">\"../../utils\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./index.less\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rpx2px = util.rpx2px();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loading</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  config = &#123;</span><br><span class=\"line\">    enablePullDownRefresh: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    disableScroll: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(...arguments);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      now_scroll_top: <span class=\"number\">0</span>,</span><br><span class=\"line\">      moveStartPosition: <span class=\"number\">0</span>, <span class=\"comment\">//开始位置</span></span><br><span class=\"line\">      moveDistance: <span class=\"number\">0</span>, <span class=\"comment\">//移动距离</span></span><br><span class=\"line\">      moveRefreshDistance: rpx2px(<span class=\"number\">136</span>), <span class=\"comment\">//达到刷新的阈值，没有达到不进行刷新并回弹</span></span><br><span class=\"line\">      moveMaxDistance: rpx2px(<span class=\"number\">220</span>), <span class=\"comment\">//最大可滑动距离</span></span><br><span class=\"line\">      isRefreshMaxDown: <span class=\"literal\">false</span>, <span class=\"comment\">//是否达到了最大距离， 用来判断是否要震动提示</span></span><br><span class=\"line\">      loading: <span class=\"literal\">false</span>, <span class=\"comment\">//是否正在loading</span></span><br><span class=\"line\">      loading_scale: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 2020.03.03 动态分成两个阶段，下拉时展示小鸭子浮动，放手后加载中鳄鱼</span></span><br><span class=\"line\">      pull_moving: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      back_top_num: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 父组件触发刷新结束/取消刷新</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(nextProps, this.state.loading)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.refreshLoading != <span class=\"keyword\">this</span>.state.loading) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nextProps.refreshLoading) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          loading: nextProps.refreshLoading</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stopPullLoading();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      now_scroll_top,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      back_top_num</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; autoHeight &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sys_info = getGlobalData(<span class=\"string\">\"system_info\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ScrollView</span><br><span class=\"line\">        className=&#123;[<span class=\"string\">\"view-component component-pull-scroll\"</span>, autoHeight ? <span class=\"string\">\"scroll-auto\"</span> : <span class=\"string\">\"\"</span>]&#125;</span><br><span class=\"line\">        id=<span class=\"string\">\"pull-scroll-view\"</span></span><br><span class=\"line\">        style=&#123;&#123; <span class=\"attr\">height</span>: autoHeight ? <span class=\"string\">'auto'</span> : (sys_info.screenHeight - <span class=\"number\">80</span> + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">        scrollY=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        scrollTop=&#123;back_top_num&#125;</span><br><span class=\"line\">        data-nowScrollTop=&#123;now_scroll_top&#125;</span><br><span class=\"line\">        onTouchStart=&#123;<span class=\"keyword\">this</span>.pullTouchStart.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onTouchMove=&#123;<span class=\"keyword\">this</span>.pullTouchMove.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onTouchEnd=&#123;<span class=\"keyword\">this</span>.pullTouchEnd.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        onScroll=&#123;<span class=\"keyword\">this</span>.pullScroll.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">        scrollWithAnimation</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">          className=<span class=\"string\">\"pull-view-container\"</span></span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">transform</span>: <span class=\"string\">\"translateY(\"</span> + moveDistance + <span class=\"string\">\"px)\"</span> &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;View</span><br><span class=\"line\">            className=<span class=\"string\">\"pull-refresh-box\"</span></span><br><span class=\"line\">            style=&#123;&#123;</span><br><span class=\"line\">              transform: <span class=\"string\">\"scale(\"</span> + loading_scale + <span class=\"string\">\") translateY(-100%)\"</span></span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &#123;(pull_moving || loading) &amp;&amp; (</span><br><span class=\"line\">              &lt;Image</span><br><span class=\"line\">                className=<span class=\"string\">\"loading-img\"</span></span><br><span class=\"line\">                src=<span class=\"string\">\"http://assets-cdn.lanqb.com/manual-box/mp/mp-pullLoading-duck.gif\"</span></span><br><span class=\"line\">              &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></span></span><br><span class=\"line\">            )&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触摸事件开始</span></span><br><span class=\"line\"><span class=\"comment\">   * @param e</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchStart(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition,</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    moveDistance = <span class=\"number\">0</span>; <span class=\"comment\">//重置移动距离</span></span><br><span class=\"line\">    moveStartPosition = e.touches[<span class=\"number\">0</span>].clientY; <span class=\"comment\">//记录开始移动的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触摸事件移动</span></span><br><span class=\"line\"><span class=\"comment\">   * @param e</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchMove(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveStartPosition,</span><br><span class=\"line\">      moveMaxDistance,</span><br><span class=\"line\">      isRefreshMaxDown,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveRefreshDistance,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"comment\">//如果正在loading，则不进行接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"comment\">//当前scroll-view所在的滚动位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowScrollTop = e.currentTarget.dataset.nowscrolltop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始计算移动距离</span></span><br><span class=\"line\">    moveDistance = e.touches[<span class=\"number\">0</span>].clientY - moveStartPosition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是往下滑动，则阻止接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (moveDistance &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">// _this.stopPullLoading();</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if (nowScrollTop !== 0) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // 如果滚动高度 !== 0 则不进行任何操作</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (moveDistance &gt; moveMaxDistance) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//达到阈值</span></span><br><span class=\"line\">          <span class=\"comment\">// 显示刷新动画</span></span><br><span class=\"line\">          pull_moving = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          loading_scale = <span class=\"number\">1</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          moveDistance = moveMaxDistance;</span><br><span class=\"line\">          <span class=\"comment\">//触发一次震动</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isRefreshMaxDown) &#123;</span><br><span class=\"line\">            isRefreshMaxDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Taro.vibrateShort();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moveDistance &lt; moveRefreshDistance) &#123;</span><br><span class=\"line\">          loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          loading_scale =</span><br><span class=\"line\">            moveDistance / rpx2px(<span class=\"number\">136</span>) &gt; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : moveDistance / rpx2px(<span class=\"number\">136</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      isRefreshMaxDown,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      pull_moving</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 结束触摸事件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  pullTouchEnd(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      moveRefreshDistance,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveMaxDistance,</span><br><span class=\"line\">      pull_moving,</span><br><span class=\"line\">      now_scroll_top</span><br><span class=\"line\">    &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loading || now_scroll_top &gt;= <span class=\"number\">30</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前scroll-view所在的滚动位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowScrollTop = e.currentTarget.dataset.nowscrolltop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是往下滑动，则阻止接下来的行为</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (moveDistance &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// return false</span></span><br><span class=\"line\">      loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">      moveDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">      loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (moveDistance &lt; moveRefreshDistance) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 移动距离小于刷新阈值，不进行刷新</span></span><br><span class=\"line\">          loading_scale = <span class=\"number\">0</span>;</span><br><span class=\"line\">          moveDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">          loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"需要回弹\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 开始刷新</span></span><br><span class=\"line\">          loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          pull_moving = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          _this.pullRefresh();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (moveDistance &gt;= moveMaxDistance) &#123;</span><br><span class=\"line\">            moveDistance = moveRefreshDistance;</span><br><span class=\"line\">            loading_scale =</span><br><span class=\"line\">              moveDistance / rpx2px(<span class=\"number\">136</span>) &gt; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : moveDistance / rpx2px(<span class=\"number\">136</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      loading,</span><br><span class=\"line\">      <span class=\"comment\">//重置</span></span><br><span class=\"line\">      moveStartPosition: <span class=\"number\">0</span>,</span><br><span class=\"line\">      isRefreshMaxDown: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      loading_scale,</span><br><span class=\"line\">      moveDistance,</span><br><span class=\"line\">      pull_moving</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pullRefresh() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onPullRefresh();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pullScroll(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; scrollTop &#125; = event.detail;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      now_scroll_top: scrollTop,</span><br><span class=\"line\">      back_top_num: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stopPullLoading() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _this.setState(&#123;</span><br><span class=\"line\">        moveDistance: <span class=\"number\">0</span>,</span><br><span class=\"line\">        moveStartPosition: <span class=\"number\">0</span>,</span><br><span class=\"line\">        isRefreshMaxDown: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        pull_moving: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        back_top_num: <span class=\"number\">0</span>,</span><br><span class=\"line\">        now_scroll_top: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.setState(&#123;          </span><br><span class=\"line\">          loading_scale: <span class=\"number\">0</span>,</span><br><span class=\"line\">          loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1500</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"fEutw\"></a></p>\n<h4 id=\"部分问题：\"><a href=\"#部分问题：\" class=\"headerlink\" title=\"部分问题：\"></a>部分问题：</h4><p>1、与ios上橡皮筋效果冲突导致下拉无法触发自定义刷新<br>页面配置<code>disabledScroll</code>，禁止页面滚动，同时页面内的列表滚动需要自己再优化调整；<br><br>2、scroll-view的scroll问题<br>需要设定固定高度然后纵向滚动。[我都忘了是啥问题了……<br><br>3、页面下拉刷新结束后再滑动列表出现闪屏<br>在禁止页面橡皮筋效果后，如果页面内存在需滚动区域使用scroll-view效果比view更加流畅；<br>不设定固定高度不会发生闪屏但是页面滚动非常不流畅；<br><br>4、使用官方提供的scroll-view自定义的动画时，当scroll-view内容不足充满一屏时下拉出现问题<br>将scroll-view设置固定高度后，将其子元素的高度设置多一像素达到隐形撑满的效果。<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ScrollView</span><br><span class=\"line\">\tclassName=&#123;[<span class=\"string\">\"view-component component-pull-scroll\"</span>, autoHeight ? <span class=\"string\">\"scroll-auto\"</span> : <span class=\"string\">\"\"</span>]&#125;</span><br><span class=\"line\">\tid=<span class=\"string\">\"pull-scroll-view\"</span></span><br><span class=\"line\">\tstyle=&#123;&#123; <span class=\"attr\">height</span>: (sys_info.screenHeight + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">\t&lt;View</span><br><span class=\"line\">\t\tclassName=<span class=\"string\">\"pull-view-container\"</span></span><br><span class=\"line\">\t\tstyle=&#123;&#123; <span class=\"attr\">height</span>: (sys_info.screenHeight + <span class=\"number\">1</span> + <span class=\"string\">\"px\"</span>) &#125;&#125;</span><br><span class=\"line\">\t&gt;...&lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>ScrollView&gt;</span><br></pre></td></tr></table></figure>\n<p><br>5、scroll-view内fixed元素问题<br>ios内scroll-view内fixed元素层级会出现问题，可能出现被遮挡的问题。<br><br>6、当页面内局部需要下拉刷新时可能导致内外两个滚动条问题<br>一个是页面滚动条一个是scroll-view滚动条，由于操作的时候触发的是scroll-view部分的滚动导致页面滚动无法进行从而影响页面其他操作。<br>Q5和Q6可以合并成一个问题，当页面需要一个吸顶操作时，即滑动距离超过阈值时导航条吸顶的功能，若scroll-view将整个页面包含就会出现Q5的问题，可能导致在ios内吸顶的导航栏无法显示，若scroll-view只包含需要刷新的部分则会出现Q6的两个滚动条的问题。<br>1）在页面未触发吸顶时禁止scroll-view模块下拉，触发后放开滚动，同时会导致无法下拉。<br>2）页面滚动触发，scroll-view模块可下拉，但是滚动区域无法滚动，且下拉动画只显示一次。</p>"},{"title":"在ios系统浏览器中输入框得到焦点时页面自动放大","urlname":"sr7u6b","date":"2019-01-21T09:10:24.000Z","_content":"问题：<br />\n在ios系统浏览器中输入框得到焦点时页面自动放大。<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829274-7732e1b1-4662-4cae-b22b-f4bcba322815.png#align=left&display=inline&height=1136&originHeight=1136&originWidth=639&size=0&width=639)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829276-d6ed4129-4e6e-42b3-8a6f-6d4827a7eebe.png#align=left&display=inline&height=1136&originHeight=1136&originWidth=639&size=0&width=639)<br />解决：<br />\n添加meta标签。\n\n","source":"_posts/yuque/在ios系统浏览器中输入框得到焦点时页面自动放大.md","raw":"\n---\n\ntitle: 在ios系统浏览器中输入框得到焦点时页面自动放大\n\nurlname: sr7u6b\n\ndate: 2019-01-21 17:10:24 +0800\n\ntags: []\n\ncategories: []\n\n---\n问题：<br />\n在ios系统浏览器中输入框得到焦点时页面自动放大。<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829274-7732e1b1-4662-4cae-b22b-f4bcba322815.png#align=left&display=inline&height=1136&originHeight=1136&originWidth=639&size=0&width=639)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829276-d6ed4129-4e6e-42b3-8a6f-6d4827a7eebe.png#align=left&display=inline&height=1136&originHeight=1136&originWidth=639&size=0&width=639)<br />解决：<br />\n添加meta标签。\n\n","slug":"yuque/在ios系统浏览器中输入框得到焦点时页面自动放大","published":1,"updated":"2020-04-22T02:25:07.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrr0003be36ki6yh6z6w","content":"<p>问题：<br><br>在ios系统浏览器中输入框得到焦点时页面自动放大。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829274-7732e1b1-4662-4cae-b22b-f4bcba322815.png#align=left&amp;display=inline&amp;height=1136&amp;originHeight=1136&amp;originWidth=639&amp;size=0&amp;width=639\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829276-d6ed4129-4e6e-42b3-8a6f-6d4827a7eebe.png#align=left&amp;display=inline&amp;height=1136&amp;originHeight=1136&amp;originWidth=639&amp;size=0&amp;width=639\" alt=\"\"><br>解决：<br><br>添加meta标签。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：<br><br>在ios系统浏览器中输入框得到焦点时页面自动放大。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829274-7732e1b1-4662-4cae-b22b-f4bcba322815.png#align=left&amp;display=inline&amp;height=1136&amp;originHeight=1136&amp;originWidth=639&amp;size=0&amp;width=639\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061829276-d6ed4129-4e6e-42b3-8a6f-6d4827a7eebe.png#align=left&amp;display=inline&amp;height=1136&amp;originHeight=1136&amp;originWidth=639&amp;size=0&amp;width=639\" alt=\"\"><br>解决：<br><br>添加meta标签。</p>\n"},{"title":"微信小程序自定义组件使用canvas绘图，无法绘制以及fail canvas is empty问题","urlname":"cbxdth","date":"2019-11-26T03:55:10.000Z","_content":"\n\n情况1：普通页面，canvas绘制，正常，生成图片正常；\n\n情况2：自定义组件引用canvas绘制，空白；<br />原因：查看文档，在自定义组件内需要手动传入当前实例的this，否则canvas指向的this为父组件所以无法找到正确canvas；<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1574740757955-44eee736-554f-4bb3-a6a9-9cb1f1bc6e1f.png#align=left&display=inline&height=351&name=image.png&originHeight=351&originWidth=885&size=39059&status=done&style=none&width=885)\n\n情况3：自定义组件内，canvas绘制好了，但是`canvasToTempFilePath`报fail canvas is empty错误；<br />原因：同上，但是canvasToTempFilePath({}, this)添加this可能无法解决，因为我使用的小程序框架是Taro，在 Taro 的页面和组件类中，this 指向的是 Taro页面或组件实例。<br />所以一般我们需要获取 Taro的页面和组件所对应的小程序原生页面和组件实例，这个时候我们可以通过 this.$scope 访问到它们；<br />所以最后写成：\n\n```javascript\nTaro.createCanvasContext(\"canvas-id\", this.$scope);\nTaro.canvasToTempFilePath({}, this.$scope);\n```\n\n\n","source":"_posts/yuque/微信小程序自定义组件使用canvas绘图，无法绘制以及fail canvas is empty问题.md","raw":"\n---\n\ntitle: 微信小程序自定义组件使用canvas绘图，无法绘制以及fail canvas is empty问题\n\nurlname: cbxdth\n\ndate: 2019-11-26 11:55:10 +0800\n\ntags: []\n\ncategories: []\n\n---\n\n\n情况1：普通页面，canvas绘制，正常，生成图片正常；\n\n情况2：自定义组件引用canvas绘制，空白；<br />原因：查看文档，在自定义组件内需要手动传入当前实例的this，否则canvas指向的this为父组件所以无法找到正确canvas；<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/250093/1574740757955-44eee736-554f-4bb3-a6a9-9cb1f1bc6e1f.png#align=left&display=inline&height=351&name=image.png&originHeight=351&originWidth=885&size=39059&status=done&style=none&width=885)\n\n情况3：自定义组件内，canvas绘制好了，但是`canvasToTempFilePath`报fail canvas is empty错误；<br />原因：同上，但是canvasToTempFilePath({}, this)添加this可能无法解决，因为我使用的小程序框架是Taro，在 Taro 的页面和组件类中，this 指向的是 Taro页面或组件实例。<br />所以一般我们需要获取 Taro的页面和组件所对应的小程序原生页面和组件实例，这个时候我们可以通过 this.$scope 访问到它们；<br />所以最后写成：\n\n```javascript\nTaro.createCanvasContext(\"canvas-id\", this.$scope);\nTaro.canvasToTempFilePath({}, this.$scope);\n```\n\n\n","slug":"yuque/微信小程序自定义组件使用canvas绘图，无法绘制以及fail canvas is empty问题","published":1,"updated":"2020-04-22T02:25:07.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrr1003ce36kn36ky0vb","content":"<p>情况1：普通页面，canvas绘制，正常，生成图片正常；</p>\n<p>情况2：自定义组件引用canvas绘制，空白；<br>原因：查看文档，在自定义组件内需要手动传入当前实例的this，否则canvas指向的this为父组件所以无法找到正确canvas；<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1574740757955-44eee736-554f-4bb3-a6a9-9cb1f1bc6e1f.png#align=left&amp;display=inline&amp;height=351&amp;name=image.png&amp;originHeight=351&amp;originWidth=885&amp;size=39059&amp;status=done&amp;style=none&amp;width=885\" alt=\"image.png\"></p>\n<p>情况3：自定义组件内，canvas绘制好了，但是<code>canvasToTempFilePath</code>报fail canvas is empty错误；<br>原因：同上，但是canvasToTempFilePath({}, this)添加this可能无法解决，因为我使用的小程序框架是Taro，在 Taro 的页面和组件类中，this 指向的是 Taro页面或组件实例。<br>所以一般我们需要获取 Taro的页面和组件所对应的小程序原生页面和组件实例，这个时候我们可以通过 this.$scope 访问到它们；<br>所以最后写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Taro.createCanvasContext(<span class=\"string\">\"canvas-id\"</span>, <span class=\"keyword\">this</span>.$scope);</span><br><span class=\"line\">Taro.canvasToTempFilePath(&#123;&#125;, <span class=\"keyword\">this</span>.$scope);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>情况1：普通页面，canvas绘制，正常，生成图片正常；</p>\n<p>情况2：自定义组件引用canvas绘制，空白；<br>原因：查看文档，在自定义组件内需要手动传入当前实例的this，否则canvas指向的this为父组件所以无法找到正确canvas；<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1574740757955-44eee736-554f-4bb3-a6a9-9cb1f1bc6e1f.png#align=left&amp;display=inline&amp;height=351&amp;name=image.png&amp;originHeight=351&amp;originWidth=885&amp;size=39059&amp;status=done&amp;style=none&amp;width=885\" alt=\"image.png\"></p>\n<p>情况3：自定义组件内，canvas绘制好了，但是<code>canvasToTempFilePath</code>报fail canvas is empty错误；<br>原因：同上，但是canvasToTempFilePath({}, this)添加this可能无法解决，因为我使用的小程序框架是Taro，在 Taro 的页面和组件类中，this 指向的是 Taro页面或组件实例。<br>所以一般我们需要获取 Taro的页面和组件所对应的小程序原生页面和组件实例，这个时候我们可以通过 this.$scope 访问到它们；<br>所以最后写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Taro.createCanvasContext(<span class=\"string\">\"canvas-id\"</span>, <span class=\"keyword\">this</span>.$scope);</span><br><span class=\"line\">Taro.canvasToTempFilePath(&#123;&#125;, <span class=\"keyword\">this</span>.$scope);</span><br></pre></td></tr></table></figure>\n"},{"title":"微信小程序获取当前页面options","urlname":"no7dmb","date":"2020-01-06T01:57:09.000Z","_content":"通过使用getCurrentPages（获取当前页面栈）获取当前页面时，无法获取有效的页面参数。\n\n```javascript\n \t\tlet pages = getCurrentPages();\n    let _curPage = pages[pages.length - 1];\n    console.log(_curPage)\n    let _curRoute = \"/\" + _curPage.route;\n    let _params = \"?\";\n    console.log(_curPage.options)\n    for (let key in _curPage.options) {\n      let _value = _curPage.options[key];\n      _params += `${key}=${_value}&`;\n    }\n```\n\nconsole出来的结果是：<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1578276955847-ba7b03f2-8bb4-4563-b496-7baa223230e4.png#align=left&display=inline&height=331&name=image.png&originHeight=331&originWidth=466&size=37181&status=done&style=none&width=466)<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1578276905495-54a774f6-c7db-4794-9f43-833527d84660.png#align=left&display=inline&height=85&name=image.png&originHeight=85&originWidth=467&size=11391&status=done&style=none&width=467)<br />获取到的options是undefined。\n\n原因：<br />getCurrentPages不能在App.onLaunch的时候使用，此时page 还没有生成，我用的是Taro框架，所以不能在componentWillMount的使用调用页面栈会获取不到当前页面的正确信息。\n\nTaro 会将原始文件的生命周期钩子函数转换为 Taro 的生命周期，对应关系\n\n| 微信小程序 | Taro |\n| :---: | :---: |\n| Page.onLoad | componentWillMount |\n| onShow | componentDidShow |\n| onHide | componentDidHide |\n| onReady | componentDidMount |\n| onUnload | componentWillUnmount |\n| onError | componentDidCatchError |\n| App.onLaunch | componentWillMount |\n| Component.created | componentWillMount |\n| attached | componentDidMount |\n| ready | componentDidMount |\n| detached | componentWillUnmount |\n| moved | 保留 |\n\n\n\n","source":"_posts/yuque/微信小程序获取当前页面options.md","raw":"\n---\n\ntitle: 微信小程序获取当前页面options\n\nurlname: no7dmb\n\ndate: 2020-01-06 09:57:09 +0800\n\ntags: []\n\ncategories: []\n\n---\n通过使用getCurrentPages（获取当前页面栈）获取当前页面时，无法获取有效的页面参数。\n\n```javascript\n \t\tlet pages = getCurrentPages();\n    let _curPage = pages[pages.length - 1];\n    console.log(_curPage)\n    let _curRoute = \"/\" + _curPage.route;\n    let _params = \"?\";\n    console.log(_curPage.options)\n    for (let key in _curPage.options) {\n      let _value = _curPage.options[key];\n      _params += `${key}=${_value}&`;\n    }\n```\n\nconsole出来的结果是：<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1578276955847-ba7b03f2-8bb4-4563-b496-7baa223230e4.png#align=left&display=inline&height=331&name=image.png&originHeight=331&originWidth=466&size=37181&status=done&style=none&width=466)<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/250093/1578276905495-54a774f6-c7db-4794-9f43-833527d84660.png#align=left&display=inline&height=85&name=image.png&originHeight=85&originWidth=467&size=11391&status=done&style=none&width=467)<br />获取到的options是undefined。\n\n原因：<br />getCurrentPages不能在App.onLaunch的时候使用，此时page 还没有生成，我用的是Taro框架，所以不能在componentWillMount的使用调用页面栈会获取不到当前页面的正确信息。\n\nTaro 会将原始文件的生命周期钩子函数转换为 Taro 的生命周期，对应关系\n\n| 微信小程序 | Taro |\n| :---: | :---: |\n| Page.onLoad | componentWillMount |\n| onShow | componentDidShow |\n| onHide | componentDidHide |\n| onReady | componentDidMount |\n| onUnload | componentWillUnmount |\n| onError | componentDidCatchError |\n| App.onLaunch | componentWillMount |\n| Component.created | componentWillMount |\n| attached | componentDidMount |\n| ready | componentDidMount |\n| detached | componentWillUnmount |\n| moved | 保留 |\n\n\n\n","slug":"yuque/微信小程序获取当前页面options","published":1,"updated":"2020-04-22T02:25:07.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrr1003de36k9xlhzijg","content":"<p>通过使用getCurrentPages（获取当前页面栈）获取当前页面时，无法获取有效的页面参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pages = getCurrentPages();</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _curPage = pages[pages.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(_curPage)</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _curRoute = <span class=\"string\">\"/\"</span> + _curPage.route;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _params = <span class=\"string\">\"?\"</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(_curPage.options)</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> _curPage.options) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> _value = _curPage.options[key];</span><br><span class=\"line\">   _params += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;_value&#125;</span>&amp;`</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>console出来的结果是：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578276955847-ba7b03f2-8bb4-4563-b496-7baa223230e4.png#align=left&amp;display=inline&amp;height=331&amp;name=image.png&amp;originHeight=331&amp;originWidth=466&amp;size=37181&amp;status=done&amp;style=none&amp;width=466\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578276905495-54a774f6-c7db-4794-9f43-833527d84660.png#align=left&amp;display=inline&amp;height=85&amp;name=image.png&amp;originHeight=85&amp;originWidth=467&amp;size=11391&amp;status=done&amp;style=none&amp;width=467\" alt=\"image.png\"><br>获取到的options是undefined。</p>\n<p>原因：<br>getCurrentPages不能在App.onLaunch的时候使用，此时page 还没有生成，我用的是Taro框架，所以不能在componentWillMount的使用调用页面栈会获取不到当前页面的正确信息。</p>\n<p>Taro 会将原始文件的生命周期钩子函数转换为 Taro 的生命周期，对应关系</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">微信小程序</th>\n<th style=\"text-align:center\">Taro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Page.onLoad</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onShow</td>\n<td style=\"text-align:center\">componentDidShow</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onHide</td>\n<td style=\"text-align:center\">componentDidHide</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onReady</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onUnload</td>\n<td style=\"text-align:center\">componentWillUnmount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onError</td>\n<td style=\"text-align:center\">componentDidCatchError</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">App.onLaunch</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Component.created</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">attached</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ready</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">detached</td>\n<td style=\"text-align:center\">componentWillUnmount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">moved</td>\n<td style=\"text-align:center\">保留</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>通过使用getCurrentPages（获取当前页面栈）获取当前页面时，无法获取有效的页面参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pages = getCurrentPages();</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _curPage = pages[pages.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(_curPage)</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _curRoute = <span class=\"string\">\"/\"</span> + _curPage.route;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> _params = <span class=\"string\">\"?\"</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(_curPage.options)</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> _curPage.options) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> _value = _curPage.options[key];</span><br><span class=\"line\">   _params += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;_value&#125;</span>&amp;`</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>console出来的结果是：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578276955847-ba7b03f2-8bb4-4563-b496-7baa223230e4.png#align=left&amp;display=inline&amp;height=331&amp;name=image.png&amp;originHeight=331&amp;originWidth=466&amp;size=37181&amp;status=done&amp;style=none&amp;width=466\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/250093/1578276905495-54a774f6-c7db-4794-9f43-833527d84660.png#align=left&amp;display=inline&amp;height=85&amp;name=image.png&amp;originHeight=85&amp;originWidth=467&amp;size=11391&amp;status=done&amp;style=none&amp;width=467\" alt=\"image.png\"><br>获取到的options是undefined。</p>\n<p>原因：<br>getCurrentPages不能在App.onLaunch的时候使用，此时page 还没有生成，我用的是Taro框架，所以不能在componentWillMount的使用调用页面栈会获取不到当前页面的正确信息。</p>\n<p>Taro 会将原始文件的生命周期钩子函数转换为 Taro 的生命周期，对应关系</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">微信小程序</th>\n<th style=\"text-align:center\">Taro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Page.onLoad</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onShow</td>\n<td style=\"text-align:center\">componentDidShow</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onHide</td>\n<td style=\"text-align:center\">componentDidHide</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onReady</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onUnload</td>\n<td style=\"text-align:center\">componentWillUnmount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onError</td>\n<td style=\"text-align:center\">componentDidCatchError</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">App.onLaunch</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Component.created</td>\n<td style=\"text-align:center\">componentWillMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">attached</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ready</td>\n<td style=\"text-align:center\">componentDidMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">detached</td>\n<td style=\"text-align:center\">componentWillUnmount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">moved</td>\n<td style=\"text-align:center\">保留</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"微信开发目前遇到的一些坑","urlname":"unuwh6","date":"2019-01-21T09:06:49.000Z","_content":"1、video在安卓微信内的表现（- -）\n\n- 层级始终置顶，会遮挡页面上其他元素；<br />\nvideo的z-index无论设置为多少，他始终处于最顶层。<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614599-76110260-27cc-47bd-bb4c-ce56d38e8ab6.jpeg#align=left&display=inline&height=1291&originHeight=1920&originWidth=1080&size=0&width=726)\n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614505-6c5062ea-dc0c-48f3-a7c9-665bf67d30de.jpeg#align=left&display=inline&height=1326&originHeight=1920&originWidth=1080&size=0&width=746)\n\n- 进行x5调试的话，播放视频将全屏；<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061615110-c039680c-9765-4c56-bfb2-8f6fc70b10cc.png#align=left&display=inline&height=764&originHeight=764&originWidth=495&size=0&width=495)\n\n腾讯对x5内核的解释以及部分解决方法：[https://x5.tencent.com/tbs/guide/video.html](https://x5.tencent.com/tbs/guide/video.html)<br />2、video在ios微信内的表现<br />\n加载页面时会自动播放视频：<br />\n页面内有video但是需要触发才能播放，首次进入页面时不会播放视频但是从这个页面进入下一个页面再返回上一个页面时将自动全屏播放视频；<br />\n解决：<br />但是在部分ios系统内已解决自动全屏播放视频但是还会存在声音（即无视频显示但实际应该还是在播放视频），处理将`preload=\"auto\"`属性改为`preload=\"none\"`，在加载页面时不加载video。<br />3、ios微信内SPA路由问题<br />\n条件：SPA，且采用history模式；<br />\n表现：ios微信获得`window.location.href`时获得的实际上时进入页的url而非当前页的真实地址，从而导致微信分享地址不正确以及微信支付唤起失败（提示xxx地址未注册，原因是实际获取到的地址和后台配置的不同）；<br />\n粗暴解决：对于需要获得真实地址的页面进入时不使用`router`，直接使用`location.href`进入。<br />4、新的分享接口<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614823-864a2252-1e4b-4079-915c-a9e2f130535b.png#align=left&display=inline&height=219&originHeight=219&originWidth=590&size=0&width=590)<br />现象：在安卓微信6.7.3内进行分享自定义内容无效，但分享到QQ是正常有效的；<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614768-1604b976-9905-47de-a3d1-1c65fd807d83.png#align=left&display=inline&height=120&originHeight=120&originWidth=374&size=0&width=374)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614843-d734ac65-2d1c-4017-bea6-cffd7c93beaa.png#align=left&display=inline&height=114&originHeight=114&originWidth=257&size=0&width=257)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614659-7aaa7dde-3938-43d1-98c8-c67d3bc9bab4.png#align=left&display=inline&height=178&originHeight=178&originWidth=361&size=0&width=361)<br />粗暴解决：最后还是使用了旧的分享接口，但是就接口即将废弃不知道还有什么解决方法。<br />5、新版本默认背景色非`#FFFFFF`，需自己在样式中对其进行设置。<br />Finally：微信开发千万别用SPA，会疯。\n\n","source":"_posts/yuque/微信开发目前遇到的一些坑.md","raw":"\n---\n\ntitle: 微信开发目前遇到的一些坑\n\nurlname: unuwh6\n\ndate: 2019-01-21 17:06:49 +0800\n\ntags: []\n\ncategories: []\n\n---\n1、video在安卓微信内的表现（- -）\n\n- 层级始终置顶，会遮挡页面上其他元素；<br />\nvideo的z-index无论设置为多少，他始终处于最顶层。<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614599-76110260-27cc-47bd-bb4c-ce56d38e8ab6.jpeg#align=left&display=inline&height=1291&originHeight=1920&originWidth=1080&size=0&width=726)\n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614505-6c5062ea-dc0c-48f3-a7c9-665bf67d30de.jpeg#align=left&display=inline&height=1326&originHeight=1920&originWidth=1080&size=0&width=746)\n\n- 进行x5调试的话，播放视频将全屏；<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061615110-c039680c-9765-4c56-bfb2-8f6fc70b10cc.png#align=left&display=inline&height=764&originHeight=764&originWidth=495&size=0&width=495)\n\n腾讯对x5内核的解释以及部分解决方法：[https://x5.tencent.com/tbs/guide/video.html](https://x5.tencent.com/tbs/guide/video.html)<br />2、video在ios微信内的表现<br />\n加载页面时会自动播放视频：<br />\n页面内有video但是需要触发才能播放，首次进入页面时不会播放视频但是从这个页面进入下一个页面再返回上一个页面时将自动全屏播放视频；<br />\n解决：<br />但是在部分ios系统内已解决自动全屏播放视频但是还会存在声音（即无视频显示但实际应该还是在播放视频），处理将`preload=\"auto\"`属性改为`preload=\"none\"`，在加载页面时不加载video。<br />3、ios微信内SPA路由问题<br />\n条件：SPA，且采用history模式；<br />\n表现：ios微信获得`window.location.href`时获得的实际上时进入页的url而非当前页的真实地址，从而导致微信分享地址不正确以及微信支付唤起失败（提示xxx地址未注册，原因是实际获取到的地址和后台配置的不同）；<br />\n粗暴解决：对于需要获得真实地址的页面进入时不使用`router`，直接使用`location.href`进入。<br />4、新的分享接口<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614823-864a2252-1e4b-4079-915c-a9e2f130535b.png#align=left&display=inline&height=219&originHeight=219&originWidth=590&size=0&width=590)<br />现象：在安卓微信6.7.3内进行分享自定义内容无效，但分享到QQ是正常有效的；<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614768-1604b976-9905-47de-a3d1-1c65fd807d83.png#align=left&display=inline&height=120&originHeight=120&originWidth=374&size=0&width=374)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614843-d734ac65-2d1c-4017-bea6-cffd7c93beaa.png#align=left&display=inline&height=114&originHeight=114&originWidth=257&size=0&width=257)<br />![](https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614659-7aaa7dde-3938-43d1-98c8-c67d3bc9bab4.png#align=left&display=inline&height=178&originHeight=178&originWidth=361&size=0&width=361)<br />粗暴解决：最后还是使用了旧的分享接口，但是就接口即将废弃不知道还有什么解决方法。<br />5、新版本默认背景色非`#FFFFFF`，需自己在样式中对其进行设置。<br />Finally：微信开发千万别用SPA，会疯。\n\n","slug":"yuque/微信开发目前遇到的一些坑","published":1,"updated":"2020-04-22T02:25:07.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9axxrr2003ee36kdxp6rjhr","content":"<p>1、video在安卓微信内的表现（- -）</p>\n<ul>\n<li>层级始终置顶，会遮挡页面上其他元素；<br><br>video的z-index无论设置为多少，他始终处于最顶层。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614599-76110260-27cc-47bd-bb4c-ce56d38e8ab6.jpeg#align=left&amp;display=inline&amp;height=1291&amp;originHeight=1920&amp;originWidth=1080&amp;size=0&amp;width=726\" alt=\"\"></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614505-6c5062ea-dc0c-48f3-a7c9-665bf67d30de.jpeg#align=left&amp;display=inline&amp;height=1326&amp;originHeight=1920&amp;originWidth=1080&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>进行x5调试的话，播放视频将全屏；<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061615110-c039680c-9765-4c56-bfb2-8f6fc70b10cc.png#align=left&amp;display=inline&amp;height=764&amp;originHeight=764&amp;originWidth=495&amp;size=0&amp;width=495\" alt=\"\"></li>\n</ul>\n<p>腾讯对x5内核的解释以及部分解决方法：<a href=\"https://x5.tencent.com/tbs/guide/video.html\" target=\"_blank\" rel=\"noopener\">https://x5.tencent.com/tbs/guide/video.html</a><br>2、video在ios微信内的表现<br><br>加载页面时会自动播放视频：<br><br>页面内有video但是需要触发才能播放，首次进入页面时不会播放视频但是从这个页面进入下一个页面再返回上一个页面时将自动全屏播放视频；<br><br>解决：<br>但是在部分ios系统内已解决自动全屏播放视频但是还会存在声音（即无视频显示但实际应该还是在播放视频），处理将<code>preload=&quot;auto&quot;</code>属性改为<code>preload=&quot;none&quot;</code>，在加载页面时不加载video。<br>3、ios微信内SPA路由问题<br><br>条件：SPA，且采用history模式；<br><br>表现：ios微信获得<code>window.location.href</code>时获得的实际上时进入页的url而非当前页的真实地址，从而导致微信分享地址不正确以及微信支付唤起失败（提示xxx地址未注册，原因是实际获取到的地址和后台配置的不同）；<br><br>粗暴解决：对于需要获得真实地址的页面进入时不使用<code>router</code>，直接使用<code>location.href</code>进入。<br>4、新的分享接口<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614823-864a2252-1e4b-4079-915c-a9e2f130535b.png#align=left&amp;display=inline&amp;height=219&amp;originHeight=219&amp;originWidth=590&amp;size=0&amp;width=590\" alt=\"\"><br>现象：在安卓微信6.7.3内进行分享自定义内容无效，但分享到QQ是正常有效的；<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614768-1604b976-9905-47de-a3d1-1c65fd807d83.png#align=left&amp;display=inline&amp;height=120&amp;originHeight=120&amp;originWidth=374&amp;size=0&amp;width=374\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614843-d734ac65-2d1c-4017-bea6-cffd7c93beaa.png#align=left&amp;display=inline&amp;height=114&amp;originHeight=114&amp;originWidth=257&amp;size=0&amp;width=257\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614659-7aaa7dde-3938-43d1-98c8-c67d3bc9bab4.png#align=left&amp;display=inline&amp;height=178&amp;originHeight=178&amp;originWidth=361&amp;size=0&amp;width=361\" alt=\"\"><br>粗暴解决：最后还是使用了旧的分享接口，但是就接口即将废弃不知道还有什么解决方法。<br>5、新版本默认背景色非<code>#FFFFFF</code>，需自己在样式中对其进行设置。<br>Finally：微信开发千万别用SPA，会疯。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、video在安卓微信内的表现（- -）</p>\n<ul>\n<li>层级始终置顶，会遮挡页面上其他元素；<br><br>video的z-index无论设置为多少，他始终处于最顶层。<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614599-76110260-27cc-47bd-bb4c-ce56d38e8ab6.jpeg#align=left&amp;display=inline&amp;height=1291&amp;originHeight=1920&amp;originWidth=1080&amp;size=0&amp;width=726\" alt=\"\"></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/250093/1548061614505-6c5062ea-dc0c-48f3-a7c9-665bf67d30de.jpeg#align=left&amp;display=inline&amp;height=1326&amp;originHeight=1920&amp;originWidth=1080&amp;size=0&amp;width=746\" alt=\"\"></p>\n<ul>\n<li>进行x5调试的话，播放视频将全屏；<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061615110-c039680c-9765-4c56-bfb2-8f6fc70b10cc.png#align=left&amp;display=inline&amp;height=764&amp;originHeight=764&amp;originWidth=495&amp;size=0&amp;width=495\" alt=\"\"></li>\n</ul>\n<p>腾讯对x5内核的解释以及部分解决方法：<a href=\"https://x5.tencent.com/tbs/guide/video.html\" target=\"_blank\" rel=\"noopener\">https://x5.tencent.com/tbs/guide/video.html</a><br>2、video在ios微信内的表现<br><br>加载页面时会自动播放视频：<br><br>页面内有video但是需要触发才能播放，首次进入页面时不会播放视频但是从这个页面进入下一个页面再返回上一个页面时将自动全屏播放视频；<br><br>解决：<br>但是在部分ios系统内已解决自动全屏播放视频但是还会存在声音（即无视频显示但实际应该还是在播放视频），处理将<code>preload=&quot;auto&quot;</code>属性改为<code>preload=&quot;none&quot;</code>，在加载页面时不加载video。<br>3、ios微信内SPA路由问题<br><br>条件：SPA，且采用history模式；<br><br>表现：ios微信获得<code>window.location.href</code>时获得的实际上时进入页的url而非当前页的真实地址，从而导致微信分享地址不正确以及微信支付唤起失败（提示xxx地址未注册，原因是实际获取到的地址和后台配置的不同）；<br><br>粗暴解决：对于需要获得真实地址的页面进入时不使用<code>router</code>，直接使用<code>location.href</code>进入。<br>4、新的分享接口<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614823-864a2252-1e4b-4079-915c-a9e2f130535b.png#align=left&amp;display=inline&amp;height=219&amp;originHeight=219&amp;originWidth=590&amp;size=0&amp;width=590\" alt=\"\"><br>现象：在安卓微信6.7.3内进行分享自定义内容无效，但分享到QQ是正常有效的；<br><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614768-1604b976-9905-47de-a3d1-1c65fd807d83.png#align=left&amp;display=inline&amp;height=120&amp;originHeight=120&amp;originWidth=374&amp;size=0&amp;width=374\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614843-d734ac65-2d1c-4017-bea6-cffd7c93beaa.png#align=left&amp;display=inline&amp;height=114&amp;originHeight=114&amp;originWidth=257&amp;size=0&amp;width=257\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/250093/1548061614659-7aaa7dde-3938-43d1-98c8-c67d3bc9bab4.png#align=left&amp;display=inline&amp;height=178&amp;originHeight=178&amp;originWidth=361&amp;size=0&amp;width=361\" alt=\"\"><br>粗暴解决：最后还是使用了旧的分享接口，但是就接口即将废弃不知道还有什么解决方法。<br>5、新版本默认背景色非<code>#FFFFFF</code>，需自己在样式中对其进行设置。<br>Finally：微信开发千万别用SPA，会疯。</p>\n"}],"PostAsset":[{"_id":"source/_posts/egg-vue-webpack-boilerplate/egg-vue_00.png","post":"ck9axxrp2000ee36kfukie96g","slug":"egg-vue_00.png","modified":1,"renderable":1},{"_id":"source/_posts/taro-mult-dev/avd.png","slug":"avd.png","post":"ck9axxrpa000ye36ksolz5ibo","modified":1,"renderable":0},{"_id":"source/_posts/learn-webpack/webpack_00.PNG","post":"ck9axxrp7000oe36kqbmqfaa9","slug":"webpack_00.PNG","modified":1,"renderable":1},{"_id":"source/_posts/learn-webpack/webpack_01.png","post":"ck9axxrp7000oe36kqbmqfaa9","slug":"webpack_01.png","modified":1,"renderable":1},{"_id":"source/_posts/learn-webpack/webpack_02.png","post":"ck9axxrp7000oe36kqbmqfaa9","slug":"webpack_02.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr-ss/running.png","post":"ck9axxrpe0017e36k8q2h67pw","slug":"running.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr-ss/server-detail.png","post":"ck9axxrpe0017e36k8q2h67pw","slug":"server-detail.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr-ss/vultr.png","post":"ck9axxrpe0017e36k8q2h67pw","slug":"vultr.png","modified":1,"renderable":1},{"_id":"source/_posts/android-dev-env/Android-6.png","post":"ck9axxrou0002e36k9v5qekvq","slug":"Android-6.png","modified":1,"renderable":1},{"_id":"source/_posts/android-dev-env/HAXM-error.png","post":"ck9axxrou0002e36k9v5qekvq","slug":"HAXM-error.png","modified":1,"renderable":1},{"_id":"source/_posts/android-dev-env/SDK-HOME.png","post":"ck9axxrou0002e36k9v5qekvq","slug":"SDK-HOME.png","modified":1,"renderable":1},{"_id":"source/_posts/android-dev-env/sdk-manager.png","post":"ck9axxrou0002e36k9v5qekvq","slug":"sdk-manager.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck9axxroq0000e36krsly0sqv","category_id":"ck9axxrow0004e36k4fpxe7cl","_id":"ck9axxrp4000ge36kdcmdawx7"},{"post_id":"ck9axxrou0002e36k9v5qekvq","category_id":"ck9axxrp1000be36ke9l2qnln","_id":"ck9axxrp6000le36kxukomerp"},{"post_id":"ck9axxrp5000je36k938p3mc7","category_id":"ck9axxrp4000he36kos3d24v5","_id":"ck9axxrp8000re36kbi96kx89"},{"post_id":"ck9axxrox0006e36kteybpmsb","category_id":"ck9axxrp4000he36kos3d24v5","_id":"ck9axxrpa000we36k2azcb9cb"},{"post_id":"ck9axxrp5000ke36kbxeudr38","category_id":"ck9axxrp4000he36kos3d24v5","_id":"ck9axxrpa000ze36kxvgsquy5"},{"post_id":"ck9axxroz0008e36kcd4x86i4","category_id":"ck9axxrp6000me36kgyssdi6v","_id":"ck9axxrpc0011e36k3yuz2v6i"},{"post_id":"ck9axxrp9000ve36kvzg3v7wj","category_id":"ck9axxrp4000he36kos3d24v5","_id":"ck9axxrpd0016e36kbb3jgg8o"},{"post_id":"ck9axxrp0000ae36k2puv5f7j","category_id":"ck9axxrp9000te36kmsuaah0s","_id":"ck9axxrpe0018e36k76i9g97c"},{"post_id":"ck9axxrpd0015e36krioze4mz","category_id":"ck9axxrpc0012e36k2f2ydj1h","_id":"ck9axxrpg001de36k5qr92pmc"},{"post_id":"ck9axxrp2000ee36kfukie96g","category_id":"ck9axxrpc0012e36k2f2ydj1h","_id":"ck9axxrph001ge36k4qffikzl"},{"post_id":"ck9axxrp3000fe36kn1n5b9b0","category_id":"ck9axxrp4000he36kos3d24v5","_id":"ck9axxrph001je36kshvazjsw"},{"post_id":"ck9axxrp7000oe36kqbmqfaa9","category_id":"ck9axxrp9000te36kmsuaah0s","_id":"ck9axxrpi001me36k2p56txak"},{"post_id":"ck9axxrp8000qe36kcuoymwl7","category_id":"ck9axxrph001ie36kifn1hrp0","_id":"ck9axxrpj001re36kmn6heeph"},{"post_id":"ck9axxrpa000ye36ksolz5ibo","category_id":"ck9axxrpi001ne36k56t59a7d","_id":"ck9axxrpk001xe36k4rvgh9qm"},{"post_id":"ck9axxrpb0010e36kci6q6wgq","category_id":"ck9axxrpc0012e36k2f2ydj1h","_id":"ck9axxrpk001ze36k41e2k484"},{"post_id":"ck9axxrpf001ce36kzps23mlt","category_id":"ck9axxrpk001we36ki3nifwds","_id":"ck9axxrpk0023e36ks9fq2pck"},{"post_id":"ck9axxrqr002se36kj3nimbqd","category_id":"ck9axxrqs002ue36kllzfsskd","_id":"ck9axxrqv0031e36kckrhcqqc"}],"PostTag":[{"post_id":"ck9axxroq0000e36krsly0sqv","tag_id":"ck9axxrox0005e36kyyzpvad0","_id":"ck9axxrp2000de36k6judvisy"},{"post_id":"ck9axxrou0002e36k9v5qekvq","tag_id":"ck9axxrp2000ce36kn97vekmx","_id":"ck9axxrp7000pe36k4if8ljai"},{"post_id":"ck9axxrou0002e36k9v5qekvq","tag_id":"ck9axxrp4000ie36ku4ye1r4x","_id":"ck9axxrp8000se36k8jgf1exz"},{"post_id":"ck9axxrox0006e36kteybpmsb","tag_id":"ck9axxrp7000ne36khmh710k2","_id":"ck9axxrpa000xe36k5bmj667s"},{"post_id":"ck9axxroz0008e36kcd4x86i4","tag_id":"ck9axxrp9000ue36kyzubefoj","_id":"ck9axxrpd0014e36kj03j1853"},{"post_id":"ck9axxrpd0015e36krioze4mz","tag_id":"ck9axxrpc0013e36ksorqfod8","_id":"ck9axxrpf001be36k6uu8wygx"},{"post_id":"ck9axxrp0000ae36k2puv5f7j","tag_id":"ck9axxrpc0013e36ksorqfod8","_id":"ck9axxrph001he36kvmaxaguu"},{"post_id":"ck9axxrp0000ae36k2puv5f7j","tag_id":"ck9axxrpe001ae36k0sy1ier7","_id":"ck9axxrph001ke36k99n68lgh"},{"post_id":"ck9axxrp2000ee36kfukie96g","tag_id":"ck9axxrpe001ae36k0sy1ier7","_id":"ck9axxrpi001pe36kxs3s85nq"},{"post_id":"ck9axxrp2000ee36kfukie96g","tag_id":"ck9axxrpc0013e36ksorqfod8","_id":"ck9axxrpj001qe36kmj2eqgrm"},{"post_id":"ck9axxrp5000je36k938p3mc7","tag_id":"ck9axxrpe001ae36k0sy1ier7","_id":"ck9axxrpj001ue36kx4n1l2uw"},{"post_id":"ck9axxrp7000oe36kqbmqfaa9","tag_id":"ck9axxrpc0013e36ksorqfod8","_id":"ck9axxrpk0020e36kxfcf6ur9"},{"post_id":"ck9axxrp7000oe36kqbmqfaa9","tag_id":"ck9axxrpe001ae36k0sy1ier7","_id":"ck9axxrpk0021e36ky443fyol"},{"post_id":"ck9axxrp8000qe36kcuoymwl7","tag_id":"ck9axxrpk001ye36kl4hlfd6h","_id":"ck9axxrpl0024e36kkexdgjrz"},{"post_id":"ck9axxrp9000ve36kvzg3v7wj","tag_id":"ck9axxrpe001ae36k0sy1ier7","_id":"ck9axxrpm0027e36k4xmo1hze"},{"post_id":"ck9axxrp9000ve36kvzg3v7wj","tag_id":"ck9axxrpl0025e36ksnk765j0","_id":"ck9axxrpm0028e36kiz47qogo"},{"post_id":"ck9axxrpa000ye36ksolz5ibo","tag_id":"ck9axxrpl0026e36kvpzo90ka","_id":"ck9axxrpn002be36kf6oinb3w"},{"post_id":"ck9axxrpa000ye36ksolz5ibo","tag_id":"ck9axxrpm0029e36ko7pfn6yh","_id":"ck9axxrpn002ce36ksnkaytpp"},{"post_id":"ck9axxrpa000ye36ksolz5ibo","tag_id":"ck9axxrp4000ie36ku4ye1r4x","_id":"ck9axxrpn002ee36kdnw4e60v"},{"post_id":"ck9axxrpb0010e36kci6q6wgq","tag_id":"ck9axxrpc0013e36ksorqfod8","_id":"ck9axxrpn002fe36ks70jz070"},{"post_id":"ck9axxrpe0017e36k8q2h67pw","tag_id":"ck9axxrpn002de36kdeq5njw8","_id":"ck9axxrpo002ie36kcuudtw8n"},{"post_id":"ck9axxrpe0017e36k8q2h67pw","tag_id":"ck9axxrpo002ge36k9z26mtgt","_id":"ck9axxrpo002je36ke8yinvwa"},{"post_id":"ck9axxrpf001ce36kzps23mlt","tag_id":"ck9axxrpo002he36klsdzu88u","_id":"ck9axxrpo002le36k12i6hizu"},{"post_id":"ck9axxrpf001ce36kzps23mlt","tag_id":"ck9axxrpo002ke36k80avfc0u","_id":"ck9axxrpo002me36kkliurz8g"},{"post_id":"ck9axxrqr002se36kj3nimbqd","tag_id":"ck9axxrp4000ie36ku4ye1r4x","_id":"ck9axxrqs002ve36k3sldmedi"}],"Tag":[{"name":"樊登读书","_id":"ck9axxrox0005e36kyyzpvad0"},{"name":"配置","_id":"ck9axxrp2000ce36kn97vekmx"},{"name":"React Native","_id":"ck9axxrp4000ie36ku4ye1r4x"},{"name":"js基础","_id":"ck9axxrp7000ne36khmh710k2"},{"name":"canvas","_id":"ck9axxrp9000ue36kyzubefoj"},{"name":"从入门到放弃","_id":"ck9axxrpc0013e36ksorqfod8"},{"name":"js","_id":"ck9axxrpe001ae36k0sy1ier7"},{"name":"css","_id":"ck9axxrpk001ye36kl4hlfd6h"},{"name":"工具/插件","_id":"ck9axxrpl0025e36ksnk765j0"},{"name":"taro","_id":"ck9axxrpl0026e36kvpzo90ka"},{"name":"微信小程序","_id":"ck9axxrpm0029e36ko7pfn6yh"},{"name":"实用","_id":"ck9axxrpn002de36kdeq5njw8"},{"name":"工具","_id":"ck9axxrpo002ge36k9z26mtgt"},{"name":"wx","_id":"ck9axxrpo002he36klsdzu88u"},{"name":"微信开发","_id":"ck9axxrpo002ke36k80avfc0u"}]}}